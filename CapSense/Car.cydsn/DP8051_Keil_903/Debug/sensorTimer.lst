C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE SENSORTIMER
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\sensorTimer.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\sensorTimer.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\sensorTimer.lst) CD DB NOIP OT(
                    -0) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\sensorTimer.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: SensorTimer.c
   3          * Version 2.30
   4          *
   5          * Description:
   6          *  The Timer component consists of a 8, 16, 24 or 32-bit timer with
   7          *  a selectable period between 2 and 2^Width - 1.  The timer may free run
   8          *  or be used as a capture timer as well.  The capture can be initiated
   9          *  by a positive or negative edge signal as well as via software.
  10          *  A trigger input can be programmed to enable the timer on rising edge
  11          *  falling edge, either edge or continous run.
  12          *  Interrupts may be generated due to a terminal count condition
  13          *  or a capture event.
  14          *
  15          * Note:
  16          *
  17          ********************************************************************************
  18          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions,
  20          * disclaimers, and limitations in the end user license agreement accompanying
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "SensorTimer.h"
  25          
  26          uint8 SensorTimer_initVar = 0u;
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: SensorTimer_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initialize to the schematic state
  35          *
  36          * Parameters:
  37          *  void
  38          *
  39          * Return:
  40          *  void
  41          *
  42          *******************************************************************************/
  43          void SensorTimer_Init(void) 
  44          {
  45   1          #if(!SensorTimer_UsingFixedFunction)
  46   1                  /* Interrupt State Backup for Critical Region*/
  47   1                  uint8 SensorTimer_interruptState;
  48   1          #endif /* Interrupt state back up for Fixed Function only */
  49   1      
  50   1          #if (SensorTimer_UsingFixedFunction)
                      /* Clear all bits but the enable bit (if it's already set) for Timer operation */
                      SensorTimer_CONTROL &= SensorTimer_CTRL_ENABLE;
              
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 2   

                      /* Clear the mode bits for continuous run mode */
                      #if (CY_PSOC5A)
                          SensorTimer_CONTROL2 &= ~SensorTimer_CTRL_MODE_MASK;
                      #endif /* Clear bits in CONTROL2 only in PSOC5A */
              
                      #if (CY_PSOC3 || CY_PSOC5LP)
                          SensorTimer_CONTROL3 &= ~SensorTimer_CTRL_MODE_MASK;
                      #endif /* CONTROL3 register exists only in PSoC3 OR PSoC5LP */
              
                      /* Check if One Shot mode is enabled i.e. RunMode !=0*/
                      #if (SensorTimer_RunModeUsed != 0x0u)
                          /* Set 3rd bit of Control register to enable one shot mode */
                          SensorTimer_CONTROL |= 0x04u;
                      #endif /* One Shot enabled only when RunModeUsed is not Continuous*/
              
                      #if (SensorTimer_RunModeUsed == 2)
                          #if (CY_PSOC5A)
                              /* Set last 2 bits of control2 register if one shot(halt on
                              interrupt) is enabled*/
                              SensorTimer_CONTROL2 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Set last 2 bits of control3 register if one shot(halt on
                              interrupt) is enabled*/
                              SensorTimer_CONTROL3 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL3 for PSoC3 or PSoC5LP */
              
                      #endif /* Remove section if One Shot Halt on Interrupt is not enabled */
              
                      #if (SensorTimer_UsingHWEnable != 0)
                          #if (CY_PSOC5A)
                              /* Set the default Run Mode of the Timer to Continuous */
                              SensorTimer_CONTROL2 |= SensorTimer_CTRL_MODE_PULSEWIDTH;
                          #endif /* Set Continuous Run Mode in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Clear and Set ROD and COD bits of CFG2 register */
                              SensorTimer_CONTROL3 &= ~SensorTimer_CTRL_RCOD_MASK;
                              SensorTimer_CONTROL3 |= SensorTimer_CTRL_RCOD;
              
                              /* Clear and Enable the HW enable bit in CFG2 register */
                              SensorTimer_CONTROL3 &= ~SensorTimer_CTRL_ENBL_MASK;
                              SensorTimer_CONTROL3 |= SensorTimer_CTRL_ENBL;
              
                              /* Set the default Run Mode of the Timer to Continuous */
                              SensorTimer_CONTROL3 |= SensorTimer_CTRL_MODE_CONTINUOUS;
                          #endif /* Set Continuous Run Mode in CONTROL3 for PSoC3ES3 or PSoC5A */
              
                      #endif /* Configure Run Mode with hardware enable */
              
                      /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                      SensorTimer_RT1 &= ~SensorTimer_RT1_MASK;
                      SensorTimer_RT1 |= SensorTimer_SYNC;
              
                      /*Enable DSI Sync all all inputs of the Timer*/
                      SensorTimer_RT1 &= ~(SensorTimer_SYNCDSI_MASK);
                      SensorTimer_RT1 |= SensorTimer_SYNCDSI_EN;
              
                      /* Set the IRQ to use the status register interrupts */
                      SensorTimer_CONTROL2 |= SensorTimer_CTRL2_IRQ_SEL;
                  #endif /* Configuring registers of fixed function implementation */
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 3   

 116   1      
 117   1          /* Set Initial values from Configuration */
 118   1          SensorTimer_WritePeriod(SensorTimer_INIT_PERIOD);
 119   1          SensorTimer_WriteCounter(SensorTimer_INIT_PERIOD);
 120   1      
 121   1          #if (SensorTimer_UsingHWCaptureCounter)/* Capture counter is enabled */
                      SensorTimer_CAPTURE_COUNT_CTRL |= SensorTimer_CNTR_ENABLE;
                      SensorTimer_SetCaptureCount(SensorTimer_INIT_CAPTURE_COUNT);
                  #endif /* Configure capture counter value */
 125   1      
 126   1          #if (!SensorTimer_UsingFixedFunction)
 127   1              #if (SensorTimer_SoftwareCaptureMode)
                          SensorTimer_SetCaptureMode(SensorTimer_INIT_CAPTURE_MODE);
                      #endif /* Set Capture Mode for UDB implementation if capture mode is software controlled */
 130   1      
 131   1              #if (SensorTimer_SoftwareTriggerMode)
                          if (!(SensorTimer_CONTROL & SensorTimer__B_TIMER__TM_SOFTWARE))
                          {
                              SensorTimer_SetTriggerMode(SensorTimer_INIT_TRIGGER_MODE);
                          }
                      #endif /* Set trigger mode for UDB Implementation if trigger mode is software controlled */
 137   1      
 138   1              /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
 139   1              /* Enter Critical Region*/
 140   1              SensorTimer_interruptState = CyEnterCriticalSection();
 141   1      
 142   1              /* Use the interrupt output of the status register for IRQ output */
 143   1              SensorTimer_STATUS_AUX_CTRL |= SensorTimer_STATUS_ACTL_INT_EN_MASK;
 144   1      
 145   1              /* Exit Critical Region*/
 146   1              CyExitCriticalSection(SensorTimer_interruptState);
 147   1      
 148   1              #if (SensorTimer_EnableTriggerMode)
                          SensorTimer_EnableTrigger();
                      #endif /* Set Trigger enable bit for UDB implementation in the control register*/
 151   1      
 152   1              #if (SensorTimer_InterruptOnCaptureCount)
 153   1                   #if (!SensorTimer_ControlRegRemoved)
 154   1                      SensorTimer_SetInterruptCount(SensorTimer_INIT_INT_CAPTURE_COUNT);
 155   1                  #endif /* Set interrupt count in control register if control register is not removed */
 156   1              #endif /*Set interrupt count in UDB implementation if interrupt count feature is checked.*/
 157   1      
 158   1              SensorTimer_ClearFIFO();
 159   1          #endif /* Configure additional features of UDB implementation */
 160   1      
 161   1          SensorTimer_SetInterruptMode(SensorTimer_INIT_INTERRUPT_MODE);
 162   1      }
 163          
 164          
 165          /*******************************************************************************
 166          * Function Name: SensorTimer_Enable
 167          ********************************************************************************
 168          *
 169          * Summary:
 170          *  Enable the Timer
 171          *
 172          * Parameters:
 173          *  void
 174          *
 175          * Return:
 176          *  void
 177          *
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 4   

 178          *******************************************************************************/
 179          void SensorTimer_Enable(void) 
 180          {
 181   1          /* Globally Enable the Fixed Function Block chosen */
 182   1          #if (SensorTimer_UsingFixedFunction)
                      SensorTimer_GLOBAL_ENABLE |= SensorTimer_BLOCK_EN_MASK;
                      SensorTimer_GLOBAL_STBY_ENABLE |= SensorTimer_BLOCK_STBY_EN_MASK;
                  #endif /* Set Enable bit for enabling Fixed function timer*/
 186   1      
 187   1          /* Remove assignment if control register is removed */
 188   1          #if (!SensorTimer_ControlRegRemoved || SensorTimer_UsingFixedFunction)
 189   1              SensorTimer_CONTROL |= SensorTimer_CTRL_ENABLE;
 190   1          #endif /* Remove assignment if control register is removed */
 191   1      }
 192          
 193          
 194          /*******************************************************************************
 195          * Function Name: SensorTimer_Start
 196          ********************************************************************************
 197          *
 198          * Summary:
 199          *  The start function initializes the timer with the default values, the
 200          *  enables the timerto begin counting.  It does not enable interrupts,
 201          *  the EnableInt command should be called if interrupt generation is required.
 202          *
 203          * Parameters:
 204          *  void
 205          *
 206          * Return:
 207          *  void
 208          *
 209          * Global variables:
 210          *  SensorTimer_initVar: Is modified when this function is called for the
 211          *   first time. Is used to ensure that initialization happens only once.
 212          *
 213          *******************************************************************************/
 214          void SensorTimer_Start(void) 
 215          {
 216   1          if(SensorTimer_initVar == 0u)
 217   1          {
 218   2              SensorTimer_Init();
 219   2      
 220   2              SensorTimer_initVar = 1u;   /* Clear this bit for Initialization */
 221   2          }
 222   1      
 223   1          /* Enable the Timer */
 224   1          SensorTimer_Enable();
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: SensorTimer_Stop
 230          ********************************************************************************
 231          *
 232          * Summary:
 233          *  The stop function halts the timer, but does not change any modes or disable
 234          *  interrupts.
 235          *
 236          * Parameters:
 237          *  void
 238          *
 239          * Return:
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 5   

 240          *  void
 241          *
 242          * Side Effects: If the Enable mode is set to Hardware only then this function
 243          *               has no effect on the operation of the timer.
 244          *
 245          *******************************************************************************/
 246          void SensorTimer_Stop(void) 
 247          {
 248   1          /* Disable Timer */
 249   1          #if(!SensorTimer_ControlRegRemoved || SensorTimer_UsingFixedFunction)
 250   1              SensorTimer_CONTROL &= ~SensorTimer_CTRL_ENABLE;
 251   1          #endif /* Remove assignment if control register is removed */
 252   1      
 253   1          /* Globally disable the Fixed Function Block chosen */
 254   1          #if (SensorTimer_UsingFixedFunction)
                      SensorTimer_GLOBAL_ENABLE &= ~SensorTimer_BLOCK_EN_MASK;
                      SensorTimer_GLOBAL_STBY_ENABLE &= ~SensorTimer_BLOCK_STBY_EN_MASK;
                  #endif /* Disable global enable for the Timer Fixed function block to stop the Timer*/
 258   1      }
 259          
 260          
 261          /*******************************************************************************
 262          * Function Name: SensorTimer_SetInterruptMode
 263          ********************************************************************************
 264          *
 265          * Summary:
 266          *  This function selects which of the interrupt inputs may cause an interrupt.
 267          *  The twosources are caputure and terminal.  One, both or neither may
 268          *  be selected.
 269          *
 270          * Parameters:
 271          *  interruptMode:   This parameter is used to enable interrups on either/or
 272          *                   terminal count or capture.
 273          *
 274          * Return:
 275          *  void
 276          *
 277          *******************************************************************************/
 278          void SensorTimer_SetInterruptMode(uint8 interruptMode) 
 279          {
 280   1          SensorTimer_STATUS_MASK = interruptMode;
 281   1      }
 282          
 283          
 284          /*******************************************************************************
 285          * Function Name: SensorTimer_SoftwareCapture
 286          ********************************************************************************
 287          *
 288          * Summary:
 289          *  This function forces a capture independent of the capture signal.
 290          *
 291          * Parameters:
 292          *  void
 293          *
 294          * Return:
 295          *  void
 296          *
 297          * Side Effects:
 298          *  An existing hardware capture could be overwritten.
 299          *
 300          *******************************************************************************/
 301          void SensorTimer_SoftwareCapture(void) 
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 6   

 302          {
 303   1          /* Generate a software capture by reading the counter register */
 304   1          CY_GET_REG8(SensorTimer_COUNTER_LSB_PTR);
 305   1          /* Capture Data is now in the FIFO */
 306   1      }
 307          
 308          
 309          /*******************************************************************************
 310          * Function Name: SensorTimer_ReadStatusRegister
 311          ********************************************************************************
 312          *
 313          * Summary:
 314          *  Reads the status register and returns it's state. This function should use
 315          *  defined types for the bit-field information as the bits in this register may
 316          *  be permuteable.
 317          *
 318          * Parameters:
 319          *  void
 320          *
 321          * Return:
 322          *  The contents of the status register
 323          *
 324          * Side Effects:
 325          *  Status register bits may be clear on read.
 326          *
 327          *******************************************************************************/
 328          uint8   SensorTimer_ReadStatusRegister(void) 
 329          {
 330   1          return SensorTimer_STATUS;
 331   1      }
 332          
 333          
 334          #if (!SensorTimer_ControlRegRemoved) /* Remove API if control register is removed */
 335          
 336          
 337          /*******************************************************************************
 338          * Function Name: SensorTimer_ReadControlRegister
 339          ********************************************************************************
 340          *
 341          * Summary:
 342          *  Reads the control register and returns it's value.
 343          *
 344          * Parameters:
 345          *  void
 346          *
 347          * Return:
 348          *  The contents of the control register
 349          *
 350          *******************************************************************************/
 351          uint8 SensorTimer_ReadControlRegister(void) 
 352          {
 353   1          return SensorTimer_CONTROL;
 354   1      }
 355          
 356          
 357          /*******************************************************************************
 358          * Function Name: SensorTimer_WriteControlRegister
 359          ********************************************************************************
 360          *
 361          * Summary:
 362          *  Sets the bit-field of the control register.
 363          *
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 7   

 364          * Parameters:
 365          *  control: The contents of the control register
 366          *
 367          * Return:
 368          *
 369          *******************************************************************************/
 370          void SensorTimer_WriteControlRegister(uint8 control) 
 371          {
 372   1          SensorTimer_CONTROL = control;
 373   1      }
 374          #endif /* Remove API if control register is removed */
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: SensorTimer_ReadPeriod
 379          ********************************************************************************
 380          *
 381          * Summary:
 382          *  This function returns the current value of the Period.
 383          *
 384          * Parameters:
 385          *  void
 386          *
 387          * Return:
 388          *  The present value of the counter.
 389          *
 390          *******************************************************************************/
 391          uint32 SensorTimer_ReadPeriod(void) 
 392          {
 393   1         return ( CY_GET_REG32(SensorTimer_PERIOD_LSB_PTR) );
 394   1      }
 395          
 396          
 397          /*******************************************************************************
 398          * Function Name: SensorTimer_WritePeriod
 399          ********************************************************************************
 400          *
 401          * Summary:
 402          *  This function is used to change the period of the counter.  The new period
 403          *  will be loaded the next time terminal count is detected.
 404          *
 405          * Parameters:
 406          *  period: This value may be between 1 and (2^Resolution)-1.  A value of 0 will
 407          *          result in the counter remaining at zero.
 408          *
 409          * Return:
 410          *  void
 411          *
 412          *******************************************************************************/
 413          void SensorTimer_WritePeriod(uint32 period) 
 414          {
 415   1          #if(SensorTimer_UsingFixedFunction)
                      uint16 period_temp = (uint16)period;
                      CY_SET_REG16(SensorTimer_PERIOD_LSB_PTR, period_temp);
                  #else
 419   1              CY_SET_REG32(SensorTimer_PERIOD_LSB_PTR, period);
 420   1          #endif /*Write Period value with appropriate resolution suffix depending on UDB or fixed function impl
             -ementation */
 421   1      }
 422          
 423          
 424          /*******************************************************************************
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 8   

 425          * Function Name: SensorTimer_ReadCapture
 426          ********************************************************************************
 427          *
 428          * Summary:
 429          *  This function returns the last value captured.
 430          *
 431          * Parameters:
 432          *  void
 433          *
 434          * Return:
 435          *  Present Capture value.
 436          *
 437          *******************************************************************************/
 438          uint32 SensorTimer_ReadCapture(void) 
 439          {
 440   1         return ( CY_GET_REG32(SensorTimer_CAPTURE_LSB_PTR) );
 441   1      }
 442          
 443          
 444          /*******************************************************************************
 445          * Function Name: SensorTimer_WriteCounter
 446          ********************************************************************************
 447          *
 448          * Summary:
 449          *  This funtion is used to set the counter to a specific value
 450          *
 451          * Parameters:
 452          *  counter:  New counter value.
 453          *
 454          * Return:
 455          *  void
 456          *
 457          *******************************************************************************/
 458          void SensorTimer_WriteCounter(uint32 counter) \
 459                                             
 460          {
 461   1         #if(SensorTimer_UsingFixedFunction)
                      counter = counter;
                      /* This functionality is removed until a FixedFunction HW update to
                       * allow this register to be written
                       */
                      /* uint16 counter_temp = (uint16)counter;
                       * CY_SET_REG16(SensorTimer_COUNTER_LSB_PTR, counter_temp);
                       */
                  #else
 470   1              CY_SET_REG32(SensorTimer_COUNTER_LSB_PTR, counter);
 471   1          #endif /* Set Write Counter only for the UDB implementation (Write Counter not available in fixed func
             -tion Timer */
 472   1      }
 473          
 474          
 475          /*******************************************************************************
 476          * Function Name: SensorTimer_ReadCounter
 477          ********************************************************************************
 478          *
 479          * Summary:
 480          *  This function returns the current counter value.
 481          *
 482          * Parameters:
 483          *  void
 484          *
 485          * Return:
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 9   

 486          *  Present compare value.
 487          *
 488          *******************************************************************************/
 489          uint32 SensorTimer_ReadCounter(void) 
 490          {
 491   1      
 492   1          /* Force capture by reading Accumulator */
 493   1          /* Must first do a software capture to be able to read the counter */
 494   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 495   1          CY_GET_REG8(SensorTimer_COUNTER_LSB_PTR);
 496   1      
 497   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 498   1          return (CY_GET_REG32(SensorTimer_CAPTURE_LSB_PTR));
 499   1      }
 500          
 501          
 502          #if(!SensorTimer_UsingFixedFunction) /* UDB Specific Functions */
 503          
 504          /*******************************************************************************
 505           * The functions below this point are only available using the UDB
 506           * implementation.  If a feature is selected, then the API is enabled.
 507           ******************************************************************************/
 508          
 509          
 510          #if (SensorTimer_SoftwareCaptureMode)
              
              
              /*******************************************************************************
              * Function Name: SensorTimer_SetCaptureMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture mode to either rising or falling edge.
              *
              * Parameters:
              *  captureMode: This parameter sets the capture mode of the UDB capture feature
              *  The parameter values are defined using the
              *  #define SensorTimer__B_TIMER__CM_NONE 0
              #define SensorTimer__B_TIMER__CM_RISINGEDGE 1
              #define SensorTimer__B_TIMER__CM_FALLINGEDGE 2
              #define SensorTimer__B_TIMER__CM_EITHEREDGE 3
              #define SensorTimer__B_TIMER__CM_SOFTWARE 4
               identifiers
              *  The following are the possible values of the parameter
              *  SensorTimer__B_TIMER__CM_NONE        - Set Capture mode to None
              *  SensorTimer__B_TIMER__CM_RISINGEDGE  - Rising edge of Capture input
              *  SensorTimer__B_TIMER__CM_FALLINGEDGE - Falling edge of Capture input
              *  SensorTimer__B_TIMER__CM_EITHEREDGE  - Either edge of Capture input
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void SensorTimer_SetCaptureMode(uint8 captureMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  captureMode = (captureMode << SensorTimer_CTRL_CAP_MODE_SHIFT);
                  captureMode &= (SensorTimer_CTRL_CAP_MODE_MASK);
              
                  /* Clear the Current Setting */
                  SensorTimer_CONTROL &= ~SensorTimer_CTRL_CAP_MODE_MASK;
              
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 10  

                  /* Write The New Setting */
                  SensorTimer_CONTROL |= captureMode;
              }
              #endif /* Remove API if Capture Mode is not Software Controlled */
 552          
 553          
 554          #if (SensorTimer_SoftwareTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: SensorTimer_SetTriggerMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the trigger input mode
              *
              * Parameters:
              *  triggerMode: Pass one of the pre-defined Trigger Modes (except Software)
                  #define SensorTimer__B_TIMER__TM_NONE 0x00u
                  #define SensorTimer__B_TIMER__TM_RISINGEDGE 0x04u
                  #define SensorTimer__B_TIMER__TM_FALLINGEDGE 0x08u
                  #define SensorTimer__B_TIMER__TM_EITHEREDGE 0x0Cu
                  #define SensorTimer__B_TIMER__TM_SOFTWARE 0x10u
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void SensorTimer_SetTriggerMode(uint8 triggerMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  triggerMode &= SensorTimer_CTRL_TRIG_MODE_MASK;
              
                  /* Clear the Current Setting */
                  SensorTimer_CONTROL &= ~SensorTimer_CTRL_TRIG_MODE_MASK;
              
                  /* Write The New Setting */
                  SensorTimer_CONTROL |= (triggerMode | SensorTimer__B_TIMER__TM_SOFTWARE);
              
              }
              #endif /* Remove API if Trigger Mode is not Software Controlled */
 589          
 590          #if (SensorTimer_EnableTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: SensorTimer_EnableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Sets the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void SensorTimer_EnableTrigger(void) 
              {
                  #if (!SensorTimer_ControlRegRemoved)   /* Remove assignment if control register is removed */
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 11  

                      SensorTimer_CONTROL |= SensorTimer_CTRL_TRIG_EN;
                  #endif /* Remove code section if control register is not used */
              }
              
              
              /*******************************************************************************
              * Function Name: SensorTimer_DisableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Clears the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void SensorTimer_DisableTrigger(void) 
              {
                  #if (!SensorTimer_ControlRegRemoved)   /* Remove assignment if control register is removed */
                      SensorTimer_CONTROL &= ~SensorTimer_CTRL_TRIG_EN;
                  #endif /* Remove code section if control register is not used */
              }
              #endif /* Remove API is Trigger Mode is set to None */
 636          
 637          
 638          #if(SensorTimer_InterruptOnCaptureCount)
 639          #if (!SensorTimer_ControlRegRemoved)   /* Remove API if control register is removed */
 640          
 641          
 642          /*******************************************************************************
 643          * Function Name: SensorTimer_SetInterruptCount
 644          ********************************************************************************
 645          *
 646          * Summary:
 647          *  This function sets the capture count before an interrupt is triggered.
 648          *
 649          * Parameters:
 650          *  interruptCount:  A value between 0 and 3 is valid.  If the value is 0, then
 651          *                   an interrupt will occur each time a capture occurs.
 652          *                   A value of 1 to 3 will cause the interrupt
 653          *                   to delay by the same number of captures.
 654          *
 655          * Return:
 656          *  void
 657          *
 658          *******************************************************************************/
 659          void SensorTimer_SetInterruptCount(uint8 interruptCount) 
 660          {
 661   1          /* This must only set to two bits of the control register associated */
 662   1          interruptCount &= SensorTimer_CTRL_INTCNT_MASK;
 663   1      
 664   1          /* Clear the Current Setting */
 665   1          SensorTimer_CONTROL &= ~SensorTimer_CTRL_INTCNT_MASK;
 666   1          /* Write The New Setting */
 667   1          SensorTimer_CONTROL |= interruptCount;
 668   1      }
 669          #endif /* Remove API if control register is removed */
 670          #endif /* SensorTimer_InterruptOnCaptureCount */
 671          
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 12  

 672          
 673          #if (SensorTimer_UsingHWCaptureCounter)
              
              
              /*******************************************************************************
              * Function Name: SensorTimer_SetCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count
              *
              * Parameters:
              *  captureCount: A value between 2 and 127 inclusive is valid.  A value of 1
              *                to 127 will cause the interrupt to delay by the same number of
              *                captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void SensorTimer_SetCaptureCount(uint8 captureCount) 
              {
                  SensorTimer_CAP_COUNT = captureCount;
              }
              
              
              /*******************************************************************************
              * Function Name: SensorTimer_ReadCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function reads the capture count setting
              *
              * Parameters:
              *  void
              *
              * Return:
              *  Returns the Capture Count Setting
              *
              *******************************************************************************/
              uint8 SensorTimer_ReadCaptureCount(void) 
              {
                  return SensorTimer_CAP_COUNT ;
              }
              #endif /* SensorTimer_UsingHWCaptureCounter */
 717          
 718          
 719          /*******************************************************************************
 720          * Function Name: SensorTimer_ClearFIFO
 721          ********************************************************************************
 722          *
 723          * Summary:
 724          *  This function clears all capture data from the capture FIFO
 725          *
 726          * Parameters:
 727          *  void
 728          *
 729          * Return:
 730          *  void
 731          *
 732          *******************************************************************************/
 733          void SensorTimer_ClearFIFO(void) 
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 13  

 734          {
 735   1          while(SensorTimer_ReadStatusRegister() & SensorTimer_STATUS_FIFONEMP)
 736   1          {
 737   2              SensorTimer_ReadCapture();
 738   2          }
 739   1      }
 740          
 741          #endif /* UDB Specific Functions */
 742          
 743          
 744          /* [] END OF FILE */
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION SensorTimer_Init (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 118
0000 7F7F              MOV     R7,#07FH
0002 7EE3              MOV     R6,#0E3H
0004 7DFF              MOV     R5,#0FFH
0006 7CFF              MOV     R4,#0FFH
0008 120000      R     LCALL   _SensorTimer_WritePeriod
                                           ; SOURCE LINE # 119
000B 7F7F              MOV     R7,#07FH
000D 7EE3              MOV     R6,#0E3H
000F 7DFF              MOV     R5,#0FFH
0011 7CFF              MOV     R4,#0FFH
0013 120000      R     LCALL   _SensorTimer_WriteCounter
                                           ; SOURCE LINE # 140
0016 120000      E     LCALL   CyEnterCriticalSection
0019 900000      R     MOV     DPTR,#SensorTimer_interruptState
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
001E 906494            MOV     DPTR,#06494H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 4410              ORL     A,#010H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0029 900000      R     MOV     DPTR,#SensorTimer_interruptState
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 154
0031 7F00              MOV     R7,#00H
0033 120000      R     LCALL   _SensorTimer_SetInterruptCount
                                           ; SOURCE LINE # 158
0036 120000      R     LCALL   SensorTimer_ClearFIFO
                                           ; SOURCE LINE # 161
0039 7F02              MOV     R7,#02H
003B 120000      R     LCALL   _SensorTimer_SetInterruptMode
                                           ; SOURCE LINE # 162
003E         ?C0001:
003E 22                RET     
             ; FUNCTION SensorTimer_Init (END)

             ; FUNCTION SensorTimer_Enable (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 189
0000 906475            MOV     DPTR,#06475H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 15  

                                           ; SOURCE LINE # 191
000B         ?C0002:
000B 22                RET     
             ; FUNCTION SensorTimer_Enable (END)

             ; FUNCTION SensorTimer_Start (BEGIN)
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0000 900000      R     MOV     DPTR,#SensorTimer_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0008 120000      R     LCALL   SensorTimer_Init
                                           ; SOURCE LINE # 220
000B 900000      R     MOV     DPTR,#SensorTimer_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0011         ?C0003:
                                           ; SOURCE LINE # 224
0011 120000      R     LCALL   SensorTimer_Enable
                                           ; SOURCE LINE # 225
0014         ?C0004:
0014 22                RET     
             ; FUNCTION SensorTimer_Start (END)

             ; FUNCTION SensorTimer_Stop (BEGIN)
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 250
0000 906475            MOV     DPTR,#06475H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
000B         ?C0005:
000B 22                RET     
             ; FUNCTION SensorTimer_Stop (END)

             ; FUNCTION _SensorTimer_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 278
0000 900000      R     MOV     DPTR,#interruptMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0005 900000      R     MOV     DPTR,#interruptMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906484            MOV     DPTR,#06484H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
000F         ?C0006:
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 16  

000F 22                RET     
             ; FUNCTION _SensorTimer_SetInterruptMode (END)

             ; FUNCTION SensorTimer_SoftwareCapture (BEGIN)
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 304
0000 906404            MOV     DPTR,#06404H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 306
0005         ?C0007:
0005 22                RET     
             ; FUNCTION SensorTimer_SoftwareCapture (END)

             ; FUNCTION SensorTimer_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0000 906464            MOV     DPTR,#06464H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 331
0005         ?C0008:
0005 22                RET     
             ; FUNCTION SensorTimer_ReadStatusRegister (END)

             ; FUNCTION SensorTimer_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0000 906475            MOV     DPTR,#06475H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 354
0005         ?C0009:
0005 22                RET     
             ; FUNCTION SensorTimer_ReadControlRegister (END)

             ; FUNCTION _SensorTimer_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 370
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906475            MOV     DPTR,#06475H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
000F         ?C0010:
000F 22                RET     
             ; FUNCTION _SensorTimer_WriteControlRegister (END)

             ; FUNCTION SensorTimer_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0000 7B02              MOV     R3,#02H
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 17  

0002 7A64              MOV     R2,#064H
0004 7924              MOV     R1,#024H
0006 120000      E     LCALL   _cyread32_nodpx
                                           ; SOURCE LINE # 394
0009         ?C0011:
0009 22                RET     
             ; FUNCTION SensorTimer_ReadPeriod (END)

             ; FUNCTION _SensorTimer_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 413
0000 900000      R     MOV     DPTR,#period
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 419
0006 7B02              MOV     R3,#02H
0008 7A64              MOV     R2,#064H
000A 7924              MOV     R1,#024H
000C 900000      R     MOV     DPTR,#period
000F E0                MOVX    A,@DPTR
0010 FC                MOV     R4,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 421
001D         ?C0012:
001D 22                RET     
             ; FUNCTION _SensorTimer_WritePeriod (END)

             ; FUNCTION SensorTimer_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
0000 7B02              MOV     R3,#02H
0002 7A64              MOV     R2,#064H
0004 7944              MOV     R1,#044H
0006 120000      E     LCALL   _cyread32_nodpx
                                           ; SOURCE LINE # 441
0009         ?C0013:
0009 22                RET     
             ; FUNCTION SensorTimer_ReadCapture (END)

             ; FUNCTION _SensorTimer_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 458
0000 900000      R     MOV     DPTR,#counter
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 470
0006 7B02              MOV     R3,#02H
0008 7A64              MOV     R2,#064H
000A 7904              MOV     R1,#04H
000C 900000      R     MOV     DPTR,#counter
000F E0                MOVX    A,@DPTR
0010 FC                MOV     R4,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 18  

0013 FD                MOV     R5,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 472
001D         ?C0014:
001D 22                RET     
             ; FUNCTION _SensorTimer_WriteCounter (END)

             ; FUNCTION SensorTimer_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 495
0000 906404            MOV     DPTR,#06404H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 498
0005 7B02              MOV     R3,#02H
0007 7A64              MOV     R2,#064H
0009 7944              MOV     R1,#044H
000B 120000      E     LCALL   _cyread32_nodpx
                                           ; SOURCE LINE # 499
000E         ?C0015:
000E 22                RET     
             ; FUNCTION SensorTimer_ReadCounter (END)

             ; FUNCTION _SensorTimer_SetInterruptCount (BEGIN)
                                           ; SOURCE LINE # 659
0000 900000      R     MOV     DPTR,#interruptCount
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 662
0005 900000      R     MOV     DPTR,#interruptCount
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#interruptCount
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
0013 906475            MOV     DPTR,#06475H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54FC              ANL     A,#0FCH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
001E 906475            MOV     DPTR,#06475H
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 900000      R     MOV     DPTR,#interruptCount
C51 COMPILER V9.03   SENSORTIMER                                                           04/04/2015 14:09:15 PAGE 19  

002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C EF                MOV     A,R7
002D 4E                ORL     A,R6
002E FF                MOV     R7,A
002F D082              POP     DPL
0031 D083              POP     DPH
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
0035         ?C0016:
0035 22                RET     
             ; FUNCTION _SensorTimer_SetInterruptCount (END)

             ; FUNCTION SensorTimer_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
0000         ?C0017:
                                           ; SOURCE LINE # 735
0000 120000      R     LCALL   SensorTimer_ReadStatusRegister
0003 7E00              MOV     R6,#00H
0005 EF                MOV     A,R7
0006 30E305            JNB     ACC.3,?C0019
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
0009 120000      R     LCALL   SensorTimer_ReadCapture
                                           ; SOURCE LINE # 738
000C 80F2              SJMP    ?C0017
000E         ?C0018:
                                           ; SOURCE LINE # 739
000E         ?C0019:
000E 22                RET     
             ; FUNCTION SensorTimer_ClearFIFO (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    322    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
