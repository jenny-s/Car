C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CLOCK_SERVO
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\Clock_servo.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\Clock_servo.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\Clock_servo.lst) CD DB NOIP OT(
                    -0) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\Clock_servo.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Clock_servo.c
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   This file provides the source code to the API for the clock component.
   7          *
   8          *  Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <cydevice_trm.h>
  18          #include "Clock_servo.h"
  19          
  20          /* Clock Distribution registers. */
  21          #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22          #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23          #define BCFG2_MASK               (0x80u)
  24          #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25          #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26          
  27          #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28          
  29          
  30          /*******************************************************************************
  31          * Function Name: Clock_servo_Start
  32          ********************************************************************************
  33          * Summary:
  34          *  Starts the clock. Note that on startup, clocks may be already running if the
  35          *  "Start on Reset" option is enabled in the DWR.
  36          *
  37          * Parameters:
  38          *  void
  39          *
  40          * Returns:
  41          *  void
  42          *
  43          *******************************************************************************/
  44          void Clock_servo_Start(void) 
  45          {
  46   1          /* Set the bit to enable the clock. */
  47   1          Clock_servo_CLKEN |= Clock_servo_CLKEN_MASK;
  48   1      }
  49          
  50          
  51          /*******************************************************************************
  52          * Function Name: Clock_servo_Stop
  53          ********************************************************************************
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 2   

  54          * Summary:
  55          *  Stops the clock and returns immediately. This API does not require the
  56          *  source clock to be running but may return before the hardware is actually
  57          *  disabled. If the settings of the clock are changed after calling this
  58          *  function, the clock may glitch when it is started. To avoid the clock
  59          *  glitch, use the StopBlock function.
  60          *
  61          * Parameters:
  62          *  void
  63          *
  64          * Returns:
  65          *  void
  66          *
  67          *******************************************************************************/
  68          void Clock_servo_Stop(void) 
  69          {
  70   1          /* Clear the bit to disable the clock. */
  71   1          Clock_servo_CLKEN &= ~Clock_servo_CLKEN_MASK;
  72   1      }
  73          
  74          
  75          #if(CY_PSOC3 || CY_PSOC5LP)
  76          /*******************************************************************************
  77          * Function Name: Clock_servo_StopBlock
  78          ********************************************************************************
  79          * Summary:
  80          *  Stops the clock and waits for the hardware to actually be disabled before
  81          *  returning. This ensures that the clock is never truncated (high part of the
  82          *  cycle will terminate before the clock is disabled and the API returns).
  83          *  Note that the source clock must be running or this API will never return as
  84          *  a stopped clock cannot be disabled.
  85          *
  86          * Parameters:
  87          *  void
  88          *
  89          * Returns:
  90          *  void
  91          *
  92          *******************************************************************************/
  93          void Clock_servo_StopBlock(void) 
  94          {
  95   1          if (Clock_servo_CLKEN & Clock_servo_CLKEN_MASK)
  96   1          {
  97   2      #if HAS_CLKDIST_LD_DISABLE
  98   2              uint16 oldDivider;
  99   2      
 100   2              CLK_DIST_LD = 0;
 101   2      
 102   2              /* Clear all the mask bits except ours. */
 103   2      #if defined(Clock_servo__CFG3)
                      CLK_DIST_AMASK = Clock_servo_CLKEN_MASK;
                      CLK_DIST_DMASK = 0x00u;
              #else
 107   2              CLK_DIST_DMASK = Clock_servo_CLKEN_MASK;
 108   2              CLK_DIST_AMASK = 0x00u;
 109   2      #endif
 110   2      
 111   2              /* Clear mask of bus clock. */
 112   2              CLK_DIST_BCFG2 &= ~BCFG2_MASK;
 113   2      
 114   2              oldDivider = CY_GET_REG16(Clock_servo_DIV_PTR);
 115   2              CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 3   

 116   2              CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 117   2      
 118   2              /* Wait for clock to be disabled */
 119   2              while (CLK_DIST_LD & CYCLK_LD_LOAD) { }
 120   2      #endif
 121   2      
 122   2              /* Clear the bit to disable the clock. */
 123   2              Clock_servo_CLKEN &= ~Clock_servo_CLKEN_MASK;
 124   2      
 125   2      #if HAS_CLKDIST_LD_DISABLE
 126   2              /* Clear the disable bit */
 127   2              CLK_DIST_LD = 0x00u;
 128   2              CY_SET_REG16(Clock_servo_DIV_PTR, oldDivider);
 129   2      #endif
 130   2          }
 131   1      }
 132          #endif
 133          
 134          /*******************************************************************************
 135          * Function Name: Clock_servo_StandbyPower
 136          ********************************************************************************
 137          * Summary:
 138          *  Sets whether the clock is active in standby mode.
 139          *
 140          * Parameters:
 141          *  state:  0 to disable clock during standby, nonzero to enable.
 142          *
 143          * Returns:
 144          *  void
 145          *
 146          *******************************************************************************/
 147          void Clock_servo_StandbyPower(uint8 state) 
 148          {
 149   1          if(state == 0)
 150   1          {
 151   2              Clock_servo_CLKSTBY &= ~Clock_servo_CLKSTBY_MASK;
 152   2          }
 153   1          else
 154   1          {
 155   2              Clock_servo_CLKSTBY |= Clock_servo_CLKSTBY_MASK;
 156   2          }
 157   1      }
 158          
 159          
 160          /*******************************************************************************
 161          * Function Name: Clock_servo_SetDividerRegister
 162          ********************************************************************************
 163          * Summary:
 164          *  Modifies the clock divider and, thus, the frequency. When the clock divider
 165          *  register is set to zero or changed from zero, the clock will be temporarily
 166          *  disabled in order to change the SSS mode bit. If the clock is enabled when
 167          *  SetDividerRegister is called, then the source clock must be running.
 168          *
 169          * Parameters:
 170          *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 171          *    divider; the clock hardware divides by clkDivider plus one. For example,
 172          *    to divide the clock by 2, this parameter should be set to 1.
 173          *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 174          *   will be truncated and the new divide value will take effect immediately. If
 175          *   zero, the new divide value will take effect at the end of the current clock
 176          *   cycle.
 177          *
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 4   

 178          * Returns:
 179          *  void
 180          *
 181          *******************************************************************************/
 182          void Clock_servo_SetDividerRegister(uint16 clkDivider, uint8 restart) 
 183          {
 184   1          uint8 enabled;
 185   1      
 186   1          uint8 currSrc = Clock_servo_GetSourceRegister();
 187   1          uint16 oldDivider = Clock_servo_GetDividerRegister();
 188   1      
 189   1          if (clkDivider != oldDivider)
 190   1          {
 191   2              enabled = Clock_servo_CLKEN & Clock_servo_CLKEN_MASK;
 192   2      
 193   2              if (currSrc == CYCLK_SRC_SEL_CLK_SYNC_D && (oldDivider == 0 || clkDivider == 0))
 194   2              {
 195   3                  /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 196   3                  if (oldDivider == 0 && clkDivider != 0)
 197   3                  {
 198   4                      /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 199   4                      /* don't halt the clock.  Using the shadow load isn't required as the       */
 200   4                      /* divider is ignored while SSS is set.                                     */
 201   4                      CY_SET_REG16(Clock_servo_DIV_PTR, clkDivider);
 202   4                      Clock_servo_MOD_SRC &= ~CYCLK_SSS;
 203   4                  }
 204   3                  else
 205   3                  {
 206   4                      /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 207   4                      /* it without bothering with the shadow load.                               */
 208   4                      Clock_servo_MOD_SRC |= CYCLK_SSS;
 209   4                      CY_SET_REG16(Clock_servo_DIV_PTR, clkDivider);
 210   4                  }
 211   3              }
 212   2              else
 213   2              {
 214   3                  if (enabled)
 215   3                  {
 216   4                      CLK_DIST_LD = 0x00u;
 217   4      
 218   4                      /* Clear all the mask bits except ours. */
 219   4      #if defined(Clock_servo__CFG3)
                              CLK_DIST_AMASK = Clock_servo_CLKEN_MASK;
                              CLK_DIST_DMASK = 0x00u;
              #else
 223   4                      CLK_DIST_DMASK = Clock_servo_CLKEN_MASK;
 224   4                      CLK_DIST_AMASK = 0x00u;
 225   4      #endif
 226   4                      /* Clear mask of bus clock. */
 227   4                      CLK_DIST_BCFG2 &= ~BCFG2_MASK;
 228   4      
 229   4      #if HAS_CLKDIST_LD_DISABLE
 230   4                      CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 231   4                      CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 232   4      
 233   4                      /* Wait for clock to be disabled */
 234   4                      while (CLK_DIST_LD & CYCLK_LD_LOAD) { }
 235   4      #endif
 236   4      
 237   4                      Clock_servo_CLKEN &= ~Clock_servo_CLKEN_MASK;
 238   4      
 239   4      #if HAS_CLKDIST_LD_DISABLE
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 5   

 240   4                      /* Clear the disable bit */
 241   4                      CLK_DIST_LD = 0x00u;
 242   4      #endif
 243   4                  }
 244   3      
 245   3                  /* Load divide value. */
 246   3                  if (Clock_servo_CLKEN & Clock_servo_CLKEN_MASK)
 247   3                  {
 248   4                      /* If the clock is still enabled, use the shadow registers */
 249   4                      CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 250   4      
 251   4                      CLK_DIST_LD = (CYCLK_LD_LOAD | (restart ? CYCLK_LD_SYNC_EN : 0x00u));
 252   4                      while (CLK_DIST_LD & CYCLK_LD_LOAD) { }
 253   4                  }
 254   3                  else
 255   3                  {
 256   4                      /* If the clock is disabled, set the divider directly */
 257   4                      CY_SET_REG16(Clock_servo_DIV_PTR, clkDivider);
 258   4                  }
 259   3      
 260   3                  Clock_servo_CLKEN |= enabled;
 261   3              }
 262   2          }
 263   1      }
 264          
 265          
 266          /*******************************************************************************
 267          * Function Name: Clock_servo_GetDividerRegister
 268          ********************************************************************************
 269          * Summary:
 270          *  Gets the clock divider register value.
 271          *
 272          * Parameters:
 273          *  void
 274          *
 275          * Returns:
 276          *  Divide value of the clock minus 1. For example, if the clock is set to
 277          *  divide by 2, the return value will be 1.
 278          *
 279          *******************************************************************************/
 280          uint16 Clock_servo_GetDividerRegister(void) 
 281          {
 282   1          return CY_GET_REG16(Clock_servo_DIV_PTR);
 283   1      }
 284          
 285          
 286          /*******************************************************************************
 287          * Function Name: Clock_servo_SetModeRegister
 288          ********************************************************************************
 289          * Summary:
 290          *  Sets flags that control the operating mode of the clock. This function only
 291          *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 292          *  To clear flags, use the ClearModeRegister function. The clock must be
 293          *  disabled before changing the mode.
 294          *
 295          * Parameters:
 296          *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 297          *   clkMode should be a set of the following optional bits or'ed together.
 298          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 299          *                 occur when the divider count reaches half of the divide
 300          *                 value.
 301          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 6   

 302          *                 is asserted for approximately half of its period. When
 303          *                 disabled, the output clock is asserted for one period of the
 304          *                 source clock.
 305          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 306          *                 be enabled for all synchronous clocks.
 307          *   See the Technical Reference Manual for details about setting the mode of
 308          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 309          *
 310          * Returns:
 311          *  void
 312          *
 313          *******************************************************************************/
 314          void Clock_servo_SetModeRegister(uint8 clkMode) 
 315          {
 316   1          Clock_servo_MOD_SRC |= clkMode & Clock_servo_MODE_MASK;
 317   1      }
 318          
 319          
 320          /*******************************************************************************
 321          * Function Name: Clock_servo_ClearModeRegister
 322          ********************************************************************************
 323          * Summary:
 324          *  Clears flags that control the operating mode of the clock. This function
 325          *  only changes flags from 1 to 0; flags that are already 0 will remain
 326          *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 327          *  disabled before changing the mode.
 328          *
 329          * Parameters:
 330          *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 331          *   clkMode should be a set of the following optional bits or'ed together.
 332          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 333          *                 occur when the divider count reaches half of the divide
 334          *                 value.
 335          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 336          *                 is asserted for approximately half of its period. When
 337          *                 disabled, the output clock is asserted for one period of the
 338          *                 source clock.
 339          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 340          *                 be enabled for all synchronous clocks.
 341          *   See the Technical Reference Manual for details about setting the mode of
 342          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 343          *
 344          * Returns:
 345          *  void
 346          *
 347          *******************************************************************************/
 348          void Clock_servo_ClearModeRegister(uint8 clkMode) 
 349          {
 350   1          Clock_servo_MOD_SRC &= ~clkMode | ~Clock_servo_MODE_MASK;
 351   1      }
 352          
 353          
 354          /*******************************************************************************
 355          * Function Name: Clock_servo_GetModeRegister
 356          ********************************************************************************
 357          * Summary:
 358          *  Gets the clock mode register value.
 359          *
 360          * Parameters:
 361          *  void
 362          *
 363          * Returns:
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 7   

 364          *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 365          *  ClearModeRegister descriptions for details about the mode bits.
 366          *
 367          *******************************************************************************/
 368          uint8 Clock_servo_GetModeRegister(void) 
 369          {
 370   1          return Clock_servo_MOD_SRC & Clock_servo_MODE_MASK;
 371   1      }
 372          
 373          
 374          /*******************************************************************************
 375          * Function Name: Clock_servo_SetSourceRegister
 376          ********************************************************************************
 377          * Summary:
 378          *  Sets the input source of the clock. The clock must be disabled before
 379          *  changing the source. The old and new clock sources must be running.
 380          *
 381          * Parameters:
 382          *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 383          *   following input sources:
 384          *   - CYCLK_SRC_SEL_SYNC_DIG
 385          *   - CYCLK_SRC_SEL_IMO
 386          *   - CYCLK_SRC_SEL_XTALM
 387          *   - CYCLK_SRC_SEL_ILO
 388          *   - CYCLK_SRC_SEL_PLL
 389          *   - CYCLK_SRC_SEL_XTALK
 390          *   - CYCLK_SRC_SEL_DSI_G
 391          *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 392          *   See the Technical Reference Manual for details on clock sources.
 393          *
 394          * Returns:
 395          *  void
 396          *
 397          *******************************************************************************/
 398          void Clock_servo_SetSourceRegister(uint8 clkSource) 
 399          {
 400   1          uint16 currDiv = Clock_servo_GetDividerRegister();
 401   1          uint8 oldSrc = Clock_servo_GetSourceRegister();
 402   1      
 403   1          if (oldSrc != CYCLK_SRC_SEL_CLK_SYNC_D && clkSource == CYCLK_SRC_SEL_CLK_SYNC_D && currDiv == 0)
 404   1          {
 405   2              /* Switching to Master and divider is 1, set SSS, which will output master, */
 406   2              /* then set the source so we are consistent.                                */
 407   2              Clock_servo_MOD_SRC |= CYCLK_SSS;
 408   2              Clock_servo_MOD_SRC =
 409   2                  (Clock_servo_MOD_SRC & ~Clock_servo_SRC_SEL_MSK) | clkSource;
 410   2          }
 411   1          else if (oldSrc == CYCLK_SRC_SEL_CLK_SYNC_D && clkSource != CYCLK_SRC_SEL_CLK_SYNC_D && currDiv == 0)
 412   1          {
 413   2              /* Switching from Master to not and divider is 1, set source, so we don't   */
 414   2              /* lock when we clear SSS.                                                  */
 415   2              Clock_servo_MOD_SRC =
 416   2                  (Clock_servo_MOD_SRC & ~Clock_servo_SRC_SEL_MSK) | clkSource;
 417   2              Clock_servo_MOD_SRC &= ~CYCLK_SSS;
 418   2          }
 419   1          else
 420   1          {
 421   2              Clock_servo_MOD_SRC =
 422   2                  (Clock_servo_MOD_SRC & ~Clock_servo_SRC_SEL_MSK) | clkSource;
 423   2          }
 424   1      }
 425          
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 8   

 426          
 427          /*******************************************************************************
 428          * Function Name: Clock_servo_GetSourceRegister
 429          ********************************************************************************
 430          * Summary:
 431          *  Gets the input source of the clock.
 432          *
 433          * Parameters:
 434          *  void
 435          *
 436          * Returns:
 437          *  The input source of the clock. See SetSourceRegister for details.
 438          *
 439          *******************************************************************************/
 440          uint8 Clock_servo_GetSourceRegister(void) 
 441          {
 442   1          return Clock_servo_MOD_SRC & Clock_servo_SRC_SEL_MSK;
 443   1      }
 444          
 445          
 446          #if defined(Clock_servo__CFG3)
              
              
              /*******************************************************************************
              * Function Name: Clock_servo_SetPhaseRegister
              ********************************************************************************
              * Summary:
              *  Sets the phase delay of the analog clock. This function is only available
              *  for analog clocks. The clock must be disabled before changing the phase
              *  delay to avoid glitches.
              *
              *
              * Parameters:
              *  clkPhase: Amount to delay the phase of the clock, in 1.0ns increments.
              *   clkPhase must be from 1 to 11 inclusive. Other values, including 0,
              *   disable the clock. clkPhase = 1 produces a 0ns delay and clkPhase = 11 
              *   produces a 10ns delay.
              *
              * Returns:
              *  void
              *
              *******************************************************************************/
              void Clock_servo_SetPhaseRegister(uint8 clkPhase) 
              {
                  Clock_servo_PHASE = clkPhase & Clock_servo_PHASE_MASK;
              }
              
              
              /*******************************************************************************
              * Function Name: Clock_servo_GetPhase
              ********************************************************************************
              * Summary:
              *  Gets the phase delay of the analog clock. This function is only available
              *  for analog clocks.
              *
              * Parameters:
              *  void
              *
              * Returns:
              *  Phase of the analog clock. See SetPhaseRegister for details.
              *
              *******************************************************************************/
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 9   

              uint8 Clock_servo_GetPhaseRegister(void) 
              {
                  return Clock_servo_PHASE & Clock_servo_PHASE_MASK;
              }
              
              #endif
 494          
 495          
 496          /* [] END OF FILE */
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Clock_servo_Start (BEGIN)
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 47
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 48
000B         ?C0001:
000B 22                RET     
             ; FUNCTION Clock_servo_Start (END)

             ; FUNCTION Clock_servo_Stop (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 71
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
000B         ?C0002:
000B 22                RET     
             ; FUNCTION Clock_servo_Stop (END)

             ; FUNCTION Clock_servo_StopBlock (BEGIN)
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E46D            JNB     ACC.4,?C0006
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 100
0009 904001            MOV     DPTR,#04001H
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
000E 904010            MOV     DPTR,#04010H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
0014 904014            MOV     DPTR,#04014H
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0019 904008            MOV     DPTR,#04008H
001C E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 11  

001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 547F              ANL     A,#07FH
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0024 7B02              MOV     R3,#02H
0026 7A40              MOV     R2,#040H
0028 7990              MOV     R1,#090H
002A 120000      E     LCALL   _cyread16_nodpx
002D 900000      R     MOV     DPTR,#oldDivider
0030 EE                MOV     A,R6
0031 F0                MOVX    @DPTR,A
0032 A3                INC     DPTR
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0035 7B02              MOV     R3,#02H
0037 7A40              MOV     R2,#040H
0039 7902              MOV     R1,#02H
003B 900000      R     MOV     DPTR,#oldDivider
003E E0                MOVX    A,@DPTR
003F FC                MOV     R4,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FD                MOV     R5,A
0043 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 116
0046 904001            MOV     DPTR,#04001H
0049 7407              MOV     A,#07H
004B F0                MOVX    @DPTR,A
004C         ?C0004:
                                           ; SOURCE LINE # 119
004C 904001            MOV     DPTR,#04001H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 20E0F7            JB      ACC.0,?C0004
0055         ?C0005:
                                           ; SOURCE LINE # 123
0055 9043A2            MOV     DPTR,#043A2H
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B 54EF              ANL     A,#0EFH
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0060 904001            MOV     DPTR,#04001H
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0065 7B02              MOV     R3,#02H
0067 7A40              MOV     R2,#040H
0069 7990              MOV     R1,#090H
006B 900000      R     MOV     DPTR,#oldDivider
006E E0                MOVX    A,@DPTR
006F FC                MOV     R4,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 12  

0072 FD                MOV     R5,A
0073 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 130
0076         ?C0003:
                                           ; SOURCE LINE # 131
0076         ?C0006:
0076 22                RET     
             ; FUNCTION Clock_servo_StopBlock (END)

             ; FUNCTION _Clock_servo_StandbyPower (BEGIN)
                                           ; SOURCE LINE # 147
0000 900000      R     MOV     DPTR,#state
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
0005 900000      R     MOV     DPTR,#state
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 700C              JNZ     ?C0007
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
000D 9043B2            MOV     DPTR,#043B2H
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 54EF              ANL     A,#0EFH
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0018 22                RET     
0019         ?C0007:
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0019 9043B2            MOV     DPTR,#043B2H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 4410              ORL     A,#010H
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0024         ?C0008:
                                           ; SOURCE LINE # 157
0024         ?C0009:
0024 22                RET     
             ; FUNCTION _Clock_servo_StandbyPower (END)

             ; FUNCTION _Clock_servo_SetDividerRegister (BEGIN)
                                           ; SOURCE LINE # 182
0000 900000      R     MOV     DPTR,#clkDivider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#restart
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 13  

                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 186
000D 120000      R     LCALL   Clock_servo_GetSourceRegister
0010 900000      R     MOV     DPTR,#currSrc
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
0015 120000      R     LCALL   Clock_servo_GetDividerRegister
0018 900000      R     MOV     DPTR,#oldDivider
001B EE                MOV     A,R6
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0020 900000      R     MOV     DPTR,#oldDivider
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#clkDivider
002B E0                MOVX    A,@DPTR
002C FC                MOV     R4,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 ED                MOV     A,R5
0031 6F                XRL     A,R7
0032 7002              JNZ     ?C0036
0034 EC                MOV     A,R4
0035 6E                XRL     A,R6
0036         ?C0036:
0036 7003              JNZ     $ + 5H
0038 020000      R     LJMP    ?C0025
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
003B 9043A2            MOV     DPTR,#043A2H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 5410              ANL     A,#010H
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#enabled
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0049 900000      R     MOV     DPTR,#currSrc
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 706A              JNZ     ?C0011
0051 900000      R     MOV     DPTR,#oldDivider
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 4E                ORL     A,R6
005B 600C              JZ      ?C0012
005D 900000      R     MOV     DPTR,#clkDivider
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 14  

0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 4E                ORL     A,R6
0067 7052              JNZ     ?C0011
0069         ?C0012:
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 196
0069 900000      R     MOV     DPTR,#oldDivider
006C E0                MOVX    A,@DPTR
006D FE                MOV     R6,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 4E                ORL     A,R6
0073 7029              JNZ     ?C0013
0075 900000      R     MOV     DPTR,#clkDivider
0078 E0                MOVX    A,@DPTR
0079 FE                MOV     R6,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 4E                ORL     A,R6
007F 601D              JZ      ?C0013
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 201
0081 7B02              MOV     R3,#02H
0083 7A40              MOV     R2,#040H
0085 7990              MOV     R1,#090H
0087 900000      R     MOV     DPTR,#clkDivider
008A E0                MOVX    A,@DPTR
008B FC                MOV     R4,A
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E FD                MOV     R5,A
008F 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 202
0092 904092            MOV     DPTR,#04092H
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 EF                MOV     A,R7
0098 54BF              ANL     A,#0BFH
009A FF                MOV     R7,A
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
009D 22                RET     
009E         ?C0013:
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 208
009E 904092            MOV     DPTR,#04092H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 4440              ORL     A,#040H
00A6 FF                MOV     R7,A
00A7 EF                MOV     A,R7
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 15  

00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
00A9 7B02              MOV     R3,#02H
00AB 7A40              MOV     R2,#040H
00AD 7990              MOV     R1,#090H
00AF 900000      R     MOV     DPTR,#clkDivider
00B2 E0                MOVX    A,@DPTR
00B3 FC                MOV     R4,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 FD                MOV     R5,A
00B7 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 210
00BA         ?C0014:
                                           ; SOURCE LINE # 211
00BA 22                RET     
00BB         ?C0011:
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
00BB 900000      R     MOV     DPTR,#enabled
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 EF                MOV     A,R7
00C1 604B              JZ      ?C0016
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
00C3 904001            MOV     DPTR,#04001H
00C6 E4                CLR     A
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
00C8 904010            MOV     DPTR,#04010H
00CB 7410              MOV     A,#010H
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
00CE 904014            MOV     DPTR,#04014H
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
00D3 904008            MOV     DPTR,#04008H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 547F              ANL     A,#07FH
00DB FF                MOV     R7,A
00DC EF                MOV     A,R7
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
00DE 7B02              MOV     R3,#02H
00E0 7A40              MOV     R2,#040H
00E2 7902              MOV     R1,#02H
00E4 900000      R     MOV     DPTR,#oldDivider
00E7 E0                MOVX    A,@DPTR
00E8 FC                MOV     R4,A
00E9 A3                INC     DPTR
00EA E0                MOVX    A,@DPTR
00EB FD                MOV     R5,A
00EC 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 231
00EF 904001            MOV     DPTR,#04001H
00F2 7407              MOV     A,#07H
00F4 F0                MOVX    @DPTR,A
00F5         ?C0017:
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 16  

                                           ; SOURCE LINE # 234
00F5 904001            MOV     DPTR,#04001H
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA EF                MOV     A,R7
00FB 20E0F7            JB      ACC.0,?C0017
00FE         ?C0018:
                                           ; SOURCE LINE # 237
00FE 9043A2            MOV     DPTR,#043A2H
0101 E0                MOVX    A,@DPTR
0102 FF                MOV     R7,A
0103 EF                MOV     A,R7
0104 54EF              ANL     A,#0EFH
0106 FF                MOV     R7,A
0107 EF                MOV     A,R7
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
0109 904001            MOV     DPTR,#04001H
010C E4                CLR     A
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
010E         ?C0016:
                                           ; SOURCE LINE # 246
010E 9043A2            MOV     DPTR,#043A2H
0111 E0                MOVX    A,@DPTR
0112 FF                MOV     R7,A
0113 EF                MOV     A,R7
0114 30E435            JNB     ACC.4,?C0019
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 249
0117 7B02              MOV     R3,#02H
0119 7A40              MOV     R2,#040H
011B 7902              MOV     R1,#02H
011D 900000      R     MOV     DPTR,#clkDivider
0120 E0                MOVX    A,@DPTR
0121 FC                MOV     R4,A
0122 A3                INC     DPTR
0123 E0                MOVX    A,@DPTR
0124 FD                MOV     R5,A
0125 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 251
0128 900000      R     MOV     DPTR,#restart
012B E0                MOVX    A,@DPTR
012C FF                MOV     R7,A
012D EF                MOV     A,R7
012E 6004              JZ      ?C0020
0130 7F02              MOV     R7,#02H
0132 8002              SJMP    ?C0021
0134         ?C0020:
0134 7F00              MOV     R7,#00H
0136         ?C0021:
0136 EF                MOV     A,R7
0137 4401              ORL     A,#01H
0139 FF                MOV     R7,A
013A 904001            MOV     DPTR,#04001H
013D EF                MOV     A,R7
013E F0                MOVX    @DPTR,A
013F         ?C0022:
                                           ; SOURCE LINE # 252
013F 904001            MOV     DPTR,#04001H
0142 E0                MOVX    A,@DPTR
0143 FF                MOV     R7,A
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 17  

0144 EF                MOV     A,R7
0145 30E015            JNB     ACC.0,?C0024
0148 80F5              SJMP    ?C0022
014A         ?C0023:
                                           ; SOURCE LINE # 253
014A 8011              SJMP    ?C0024
014C         ?C0019:
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 257
014C 7B02              MOV     R3,#02H
014E 7A40              MOV     R2,#040H
0150 7990              MOV     R1,#090H
0152 900000      R     MOV     DPTR,#clkDivider
0155 E0                MOVX    A,@DPTR
0156 FC                MOV     R4,A
0157 A3                INC     DPTR
0158 E0                MOVX    A,@DPTR
0159 FD                MOV     R5,A
015A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 258
015D         ?C0024:
                                           ; SOURCE LINE # 260
015D 9043A2            MOV     DPTR,#043A2H
0160 C083              PUSH    DPH
0162 C082              PUSH    DPL
0164 E0                MOVX    A,@DPTR
0165 FF                MOV     R7,A
0166 900000      R     MOV     DPTR,#enabled
0169 E0                MOVX    A,@DPTR
016A FE                MOV     R6,A
016B EF                MOV     A,R7
016C 4E                ORL     A,R6
016D FF                MOV     R7,A
016E D082              POP     DPL
0170 D083              POP     DPH
0172 EF                MOV     A,R7
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
0174         ?C0015:
                                           ; SOURCE LINE # 262
0174         ?C0010:
                                           ; SOURCE LINE # 263
0174         ?C0025:
0174 22                RET     
             ; FUNCTION _Clock_servo_SetDividerRegister (END)

             ; FUNCTION Clock_servo_GetDividerRegister (BEGIN)
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
0000 7B02              MOV     R3,#02H
0002 7A40              MOV     R2,#040H
0004 7990              MOV     R1,#090H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 283
0009         ?C0026:
0009 22                RET     
             ; FUNCTION Clock_servo_GetDividerRegister (END)

             ; FUNCTION _Clock_servo_SetModeRegister (BEGIN)
                                           ; SOURCE LINE # 314
0000 900000      R     MOV     DPTR,#clkMode
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 18  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0005 904092            MOV     DPTR,#04092H
0008 C083              PUSH    DPH
000A C082              PUSH    DPL
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#clkMode
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F8              ANL     A,#0F8H
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 4E                ORL     A,R6
0019 FF                MOV     R7,A
001A D082              POP     DPL
001C D083              POP     DPH
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0020         ?C0027:
0020 22                RET     
             ; FUNCTION _Clock_servo_SetModeRegister (END)

             ; FUNCTION _Clock_servo_ClearModeRegister (BEGIN)
                                           ; SOURCE LINE # 348
0000 900000      R     MOV     DPTR,#clkMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
0005 904092            MOV     DPTR,#04092H
0008 C083              PUSH    DPH
000A C082              PUSH    DPL
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#clkMode
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 F4                CPL     A
0015 FE                MOV     R6,A
0016 EE                MOV     A,R6
0017 4407              ORL     A,#07H
0019 FE                MOV     R6,A
001A EF                MOV     A,R7
001B 5E                ANL     A,R6
001C FF                MOV     R7,A
001D D082              POP     DPL
001F D083              POP     DPH
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
0023         ?C0028:
0023 22                RET     
             ; FUNCTION _Clock_servo_ClearModeRegister (END)

             ; FUNCTION Clock_servo_GetModeRegister (BEGIN)
                                           ; SOURCE LINE # 368
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 19  

                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
0000 904092            MOV     DPTR,#04092H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54F8              ANL     A,#0F8H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 371
0009         ?C0029:
0009 22                RET     
             ; FUNCTION Clock_servo_GetModeRegister (END)

             ; FUNCTION _Clock_servo_SetSourceRegister (BEGIN)
                                           ; SOURCE LINE # 398
0000 900000      R     MOV     DPTR,#clkSource
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
0005 120000      R     LCALL   Clock_servo_GetDividerRegister
0008 900000      R     MOV     DPTR,#currDiv
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
0010 120000      R     LCALL   Clock_servo_GetSourceRegister
0013 900000      R     MOV     DPTR,#oldSrc
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0018 900000      R     MOV     DPTR,#oldSrc
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 6036              JZ      ?C0030
0020 900000      R     MOV     DPTR,#clkSource
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 702E              JNZ     ?C0030
0028 900000      R     MOV     DPTR,#currDiv
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 4E                ORL     A,R6
0032 7022              JNZ     ?C0030
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 407
0034 904092            MOV     DPTR,#04092H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 4440              ORL     A,#040H
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 20  

                                           ; SOURCE LINE # 409
003F 904092            MOV     DPTR,#04092H
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 54F8              ANL     A,#0F8H
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#clkSource
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D EF                MOV     A,R7
004E 4E                ORL     A,R6
004F FF                MOV     R7,A
0050 904092            MOV     DPTR,#04092H
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
0055 22                RET     
0056         ?C0030:
                                           ; SOURCE LINE # 411
0056 900000      R     MOV     DPTR,#oldSrc
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 7036              JNZ     ?C0032
005E 900000      R     MOV     DPTR,#clkSource
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 602E              JZ      ?C0032
0066 900000      R     MOV     DPTR,#currDiv
0069 E0                MOVX    A,@DPTR
006A FE                MOV     R6,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 4E                ORL     A,R6
0070 7022              JNZ     ?C0032
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 416
0072 904092            MOV     DPTR,#04092H
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 54F8              ANL     A,#0F8H
007A FF                MOV     R7,A
007B 900000      R     MOV     DPTR,#clkSource
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 EF                MOV     A,R7
0081 4E                ORL     A,R6
0082 FF                MOV     R7,A
0083 904092            MOV     DPTR,#04092H
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
0088 904092            MOV     DPTR,#04092H
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D EF                MOV     A,R7
008E 54BF              ANL     A,#0BFH
C51 COMPILER V9.03   CLOCK_SERVO                                                           04/01/2015 20:32:55 PAGE 21  

0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
0093 22                RET     
0094         ?C0032:
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 422
0094 904092            MOV     DPTR,#04092H
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 54F8              ANL     A,#0F8H
009C FF                MOV     R7,A
009D 900000      R     MOV     DPTR,#clkSource
00A0 E0                MOVX    A,@DPTR
00A1 FE                MOV     R6,A
00A2 EF                MOV     A,R7
00A3 4E                ORL     A,R6
00A4 FF                MOV     R7,A
00A5 904092            MOV     DPTR,#04092H
00A8 EF                MOV     A,R7
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
00AA         ?C0033:
00AA         ?C0031:
                                           ; SOURCE LINE # 424
00AA         ?C0034:
00AA 22                RET     
             ; FUNCTION _Clock_servo_SetSourceRegister (END)

             ; FUNCTION Clock_servo_GetSourceRegister (BEGIN)
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0000 904092            MOV     DPTR,#04092H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5407              ANL     A,#07H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 443
0009         ?C0035:
0009 22                RET     
             ; FUNCTION Clock_servo_GetSourceRegister (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    823    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     16    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
