C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CAPSENSE_CSHL
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\CapSense_CSHL.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\CapSense_CSHL.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\CapSense_CSHL.lst) CD DB NOIP
                    - OT(0) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\CapSense_CSHL.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CapSense_CSHL.c
   3          * Version 3.20
   4          *
   5          * Description:
   6          *  This file provides the source code to the High Level APIs for the CapSesne
   7          *  CSD component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CapSense_CSHL.h"
  19          
  20          /* SmartSense functions */
  21          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
                  extern void CapSense_CalculateThresholds(uint8 SensorNumber)
                         ;
              #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
  25          
  26          /* Median filter function prototype */
  27          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  28                (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
                  uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
                  ;
              #endif /* CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  32          
  33          /* Averaging filter function prototype */
  34          #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) || \
  35                (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
                  uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
                  ;
              #endif /* CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  39          
  40          /* IIR2Filter(1/2prev + 1/2cur) filter function prototype */
  41          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) || \
  42                (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
                  uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2) ;
              #endif /* CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  45          
  46          /* IIR4Filter(3/4prev + 1/4cur) filter function prototype */
  47          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) || \
  48                (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
                  uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2) ;
              #endif /* CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  51          
  52          /* IIR8Filter(7/8prev + 1/8cur) filter function prototype - RawCounts only */
  53          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 2   

                  uint16 CapSense_IIR8Filter(uint16 x1, uint16 x2) ;
              #endif /* CapSense_RAW_FILTER_MASK */
  56          
  57          /* IIR16Filter(15/16prev + 1/16cur) filter function prototype - RawCounts only */
  58          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                  uint16 CapSense_IIR16Filter(uint16 x1, uint16 x2) ;
              #endif /* CapSense_RAW_FILTER_MASK */
  61          
  62          /* JitterFilter filter function prototype */
  63          #if ( (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) || \
  64                (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER) )
                  uint16 CapSense_JitterFilter(uint16 x1, uint16 x2) ;
              #endif /* CapSense_RAW_FILTER_MASK && CapSense_POS_FILTERS_MASK */
  67          
  68          /* Storage of filters data */
  69          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  70                (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
              
                  uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
                  uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
              
              #elif ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)   || \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)   || \
                      (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) || \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)   || \
                      (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) )
                      
                  uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
              
              #else
  84              /* No Raw filters */
  85          #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  86                  *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  87                  */
  88          
  89          extern uint16 CapSense_SensorRaw[CapSense_TOTAL_SENSOR_COUNT];
  90          extern uint8 CapSense_SensorEnableMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  91          extern const uint8 CYCODE CapSense_widgetNumber[];
  92          
  93          uint16 CapSense_SensorBaseline[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  94          uint8 CapSense_SensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  95          uint8 CapSense_SensorSignal[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  96          uint8 CapSense_SensorOnMask[(((CapSense_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)] = {0u};
  97          
  98          uint8 CapSense_LowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  99          
 100          /* Helps while centroid calulation */
 101          #if (CapSense_TOTAL_CENTROIDS_COUNT)
 102              static uint8 CapSense_centroid[3];
 103          #endif  /* (CapSense_TOTAL_CENTROIDS_COUNT) */
 104          
 105          uint8 CapSense_fingerThreshold[] = {
 106              48u, 60u, 60u, 
 107          };
 108          
 109          uint8 CapSense_noiseThreshold[] = {
 110              24u, 30u, 30u, 
 111          };
 112          
 113          uint8 CapSense_hysteresis[] = {
 114              0u, 5u, 5u, 
 115          };
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 3   

 116          
 117          uint8 CapSense_debounce[] = {
 118              1u, 1u, 1u, 
 119          };
 120          
 121          uint8 CapSense_debounceCounter[] = {
 122              0u, 0u, 0u, 
 123          };
 124          
 125          const uint8 CYCODE CapSense_rawDataIndex[] = {
 126              2u, /* LinearSlider0__LS */
 127              0u, /* Button0__BTN */
 128              1u, /* Button1__BTN */
 129          
 130          };
 131          
 132          const uint8 CYCODE CapSense_numberOfSensors[] = {
 133              5u, /* LinearSlider0__LS */
 134              1u, /* Button0__BTN */
 135              1u, /* Button1__BTN */
 136          
 137          };
 138          
 139          const uint16 CYCODE CapSense_centroidMult[] = {
 140              6400u, 
 141          };
 142          
 143          
 144          
 145          
 146          /*******************************************************************************
 147          * Function Name: CapSense_BaseInit
 148          ********************************************************************************
 149          *
 150          * Summary:
 151          *  Loads the CapSense_SensorBaseline[sensor] array element with an 
 152          *  initial value which is equal to raw count value. 
 153          *  Resets to zero CapSense_SensorBaselineLow[senesor] and 
 154          *  CapSense_SensorSignal[sensor] array element.
 155          *  Loads CapSense_debounceCounter[sensor] array element with initial 
 156          *  value equal CapSense_debounce[].
 157          *  Loads the CapSense_rawFilterData2[sensor] and 
 158          *  CapSense_rawFilterData2[sensor] array element with an 
 159          *  initial value which is equal raw count value if raw data filter is enabled.
 160          *
 161          * Parameters:
 162          *  sensor:  Sensor number.
 163          *
 164          * Return:
 165          *  None
 166          *
 167          * Global Variables:
 168          *  CapSense_SensorBaseline[]    - used to store baseline value.
 169          *  CapSense_SensorBaselineLow[] - used to store fraction byte of 
 170          *  baseline value.
 171          *  CapSense_SensorSignal[]      - used to store diffence between 
 172          *  current value of raw data and previous value of baseline.
 173          *  CapSense_debounceCounter[]   - used to store current debounce 
 174          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 175          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 176          *  and use the last element of this array with value 0 (it means no debounce).
 177          *  CapSense_rawFilterData1[]    - used to store previous sample of 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 4   

 178          *  any enabled raw data filter.
 179          *  CapSense_rawFilterData2[]    - used to store before previous sample
 180          *  of enabled raw data filter. Only required for median or average filters.
 181          *
 182          * Reentrant:
 183          *  No
 184          *
 185          *******************************************************************************/
 186          void CapSense_BaseInit(uint8 sensor) 
 187          {
 188   1          #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 189   1               (CapSense_TOTAL_GENERICS_COUNT))
 190   1              uint8 widget = CapSense_widgetNumber[sensor];
 191   1          #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 192   1          
 193   1          #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
                      uint8 debounceIndex;
                  #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 196   1          
 197   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 202   1          
 203   1          /* Initialize Baseline */
 204   1          CapSense_SensorBaseline[sensor] = CapSense_SensorRaw[sensor];
 205   1          CapSense_SensorBaselineLow[sensor] = 0u;
 206   1          CapSense_SensorSignal[sensor] = 0u;
 207   1              
 208   1          if(widget > CapSense_END_OF_TOUCH_PAD_INDEX)
 209   1          {
 210   2              CapSense_debounceCounter[widget - (CapSense_END_OF_TOUCH_PAD_INDEX + 1)] =  CapSense_debounce[widg
             -et];
 211   2          }
 212   1      
 213   1          
 214   1          #if ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) ||\
 215   1               (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
              
                      CapSense_rawFilterData1[sensor] = CapSense_SensorRaw[sensor];
                      CapSense_rawFilterData2[sensor] = CapSense_SensorRaw[sensor];
                  
                  #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) ||\
                         (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
                          
                      CapSense_rawFilterData1[sensor] = CapSense_SensorRaw[sensor];
                  
                  #else
 229   1              /* No Raw filters */
 230   1          #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
 231   1                  *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 232   1                  */
 233   1          
 234   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 238   1      }
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 5   

 239          
 240          
 241          /*******************************************************************************
 242          * Function Name: CapSense_InitializeSensorBaseline
 243          ********************************************************************************
 244          *
 245          * Summary:
 246          *  Loads the CapSense_SensorBaseline[sensor] array element with an 
 247          *  initial value by scanning the selected sensor (one channel design) or pair 
 248          *  of sensors (two channels designs). The raw count value is copied into the 
 249          *  baseline array for each sensor. The raw data filters are initialized if 
 250          *  enabled.
 251          *
 252          * Parameters:
 253          *  sensor:  Sensor number.
 254          *
 255          * Return:
 256          *  None
 257          *
 258          * Reentrant:
 259          *  No
 260          *
 261          *******************************************************************************/
 262          void CapSense_InitializeSensorBaseline(uint8 sensor)
 263                                    
 264          {
 265   1          /* Scan sensor */
 266   1          CapSense_ScanSensor(sensor);
 267   1          while(CapSense_IsBusy() != 0u) {;}
 268   1          
 269   1          #if (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN)
 270   1              /* Initialize Baseline, Signal and debounce counters */       
 271   1              CapSense_BaseInit(sensor);
 272   1              
 273   1          #else
                  
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH0)
                      {
                          /* Initialize Baseline, Signal and debounce counters */ 
                          CapSense_BaseInit(sensor);
                      }
                      
                      if(sensor < CapSense_TOTAL_SENSOR_COUNT__CH1)
                      {
                          /* Initialize Baseline, Signal and debounce counters */
                          CapSense_BaseInit(sensor + CapSense_TOTAL_SENSOR_COUNT__CH0);
                      }
                  
                  #endif  /* (CapSense_DESIGN_TYPE == CapSense_ONE_CHANNEL_DESIGN) */
 288   1      }
 289          
 290          
 291          /*******************************************************************************
 292          * Function Name: CapSense_InitializeAllBaselines
 293          ********************************************************************************
 294          *
 295          * Summary:
 296          *  Uses the CapSense_InitializeSensorBaseline function to loads the 
 297          *  CapSense_SensorBaseline[] array with an initial values by scanning 
 298          *  all sensors. The raw count values are copied into the baseline array for 
 299          *  all sensors. The raw data filters are initialized if enabled.
 300          *
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 6   

 301          * Parameters:
 302          *  None
 303          *
 304          * Return:
 305          *  None
 306          *
 307          * Reentrant:
 308          *  No
 309          *
 310          *******************************************************************************/
 311          void CapSense_InitializeAllBaselines(void)
 312                                    
 313          {
 314   1          uint8 i;
 315   1          
 316   1          /* The baseline initialize by sensor of sensor pair */
 317   1          for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 318   1          {
 319   2              CapSense_InitializeSensorBaseline(i);
 320   2          }
 321   1      }
 322          
 323          
 324          /*******************************************************************************
 325          * Function Name: CapSense_InitializeEnabledBaselines
 326          ********************************************************************************
 327          *
 328          * Summary:
 329          *  Scans all enabled widgets and the raw count values are copied into the 
 330          *  baseline array for all sensors enabled in scanning process. Baselines 
 331          *  initialize with zero values for sensors disabled from scanning process. 
 332          *  The raw data filters are initialized if enabled.
 333          *
 334          * Parameters:
 335          *  None
 336          *
 337          * Return:
 338          *  None
 339          *
 340          * Reentrant:
 341          *  No
 342          *
 343          *******************************************************************************/
 344          void CapSense_InitializeEnabledBaselines(void)
 345                                       
 346          {
 347   1          uint8 i;
 348   1          uint8 pos;
 349   1          uint8 enMask;
 350   1          
 351   1          CapSense_ScanEnabledWidgets();
 352   1          while(CapSense_IsBusy() != 0u){;}
 353   1          
 354   1          for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 355   1          {
 356   2              pos = (i >> 3u);
 357   2              enMask = 0x01u << (i & 0x07u);
 358   2              
 359   2              /* Clear raw data if sensor is disabled from scanning process */
 360   2              if((CapSense_SensorEnableMask[pos] & enMask) == 0u)
 361   2              {
 362   3                  CapSense_SensorRaw[i] = 0u;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 7   

 363   3              }
 364   2              
 365   2              /* Initialize baselines */
 366   2              CapSense_BaseInit(i);
 367   2          }
 368   1      }  
 369          
 370          
 371          /*******************************************************************************
 372          * Function Name: CapSense_UpdateSensorBaseline
 373          ********************************************************************************
 374          *
 375          * Summary:
 376          *  Updates the CapSense_SensorBaseline[sensor] array element using the 
 377          *  LP filter with k = 256. The signal calculates the difference of count by 
 378          *  subtracting the previous baseline from the current raw count value and stores
 379          *  it in CapSense_SensorSignal[sensor]. 
 380          *  If auto reset option is enabled the baseline updated regards noise threshold. 
 381          *  If auto reset option is disabled the baseline stops updating if signal is 
 382          *  greater that zero and baseline loads with raw count value if signal is less 
 383          *  that noise threshold.
 384          *  Raw data filters are applied to the values if enabled before baseline 
 385          *  calculation.
 386          *
 387          * Parameters:
 388          *  sensor:  Sensor number.
 389          *
 390          * Return:
 391          *  None
 392          *
 393          * Global Variables:
 394          *  CapSense_SensorBaseline[]    - used to store baseline value.
 395          *  CapSense_SensorBaselineLow[] - used to store fraction byte of 
 396          *  baseline value.
 397          *  CapSense_SensorSignal[]      - used to store diffence between 
 398          *  current value of raw data and previous value of baseline.
 399          *  CapSense_rawFilterData1[]    - used to store previous sample of 
 400          *  any enabled raw data filter.
 401          *  CapSense_rawFilterData2[]    - used to store before previous sample
 402          *  of enabled raw data filter. Only required for median or average filters.
 403          *
 404          * Reentrant:
 405          *  No
 406          *
 407          *******************************************************************************/
 408           void CapSense_UpdateSensorBaseline(uint8 sensor)
 409                                           
 410          {
 411   1          uint32 calc;
 412   1          uint16 tempRaw;
 413   1          uint16 filteredRawData;
 414   1          uint8 widget = CapSense_widgetNumber[sensor];
 415   1          uint8 noiseThreshold = CapSense_noiseThreshold[widget];
 416   1          
 417   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      if(widget < CapSense_END_OF_WIDGETS_INDEX)
                      {
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 422   1          
 423   1          filteredRawData = CapSense_SensorRaw[sensor];
 424   1          
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 8   

 425   1          #if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
                                                                      CapSense_rawFilterData2[sensor]);
                      CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
                      CapSense_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
                      tempRaw = filteredRawData;
                      filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor],
                                                                         CapSense_rawFilterData2[sensor]);
                      CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
                      CapSense_rawFilterData1[sensor] = tempRaw;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
                      filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
                      filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                          
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
                      filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
                      filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                      filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
                      CapSense_rawFilterData1[sensor] = filteredRawData;
                      
                  #else
 460   1              /* No Raw filters */
 461   1          #endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 462   1          
 463   1          #if (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING)
                      CapSense_CalculateThresholds(sensor);
                  #endif /* (CapSense_TUNING_METHOD == CapSense_AUTO_TUNING) */
 466   1      
 467   1      
 468   1          /* Baseline calculation */
 469   1          /* Calculate difference RawData[cur] - Baseline[prev] */
 470   1          if(filteredRawData >= CapSense_SensorBaseline[sensor])
 471   1          {
 472   2              tempRaw = filteredRawData - CapSense_SensorBaseline[sensor];
 473   2              widget = 1u;    /* Positive difference - Calculate the Signal */
 474   2          }
 475   1          else
 476   1          {
 477   2              tempRaw = CapSense_SensorBaseline[sensor] - filteredRawData;
 478   2              widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 479   2          }
 480   1      
 481   1          if((widget == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 482   1          {
 483   2              if(CapSense_LowBaselineResetCnt[sensor] >= CapSense_LOW_BASELINE_RESET)
 484   2              {
 485   3                  CapSense_BaseInit(sensor);
 486   3                  CapSense_LowBaselineResetCnt[sensor] = 0;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 9   

 487   3              }
 488   2              else
 489   2              {
 490   3                  CapSense_LowBaselineResetCnt[sensor]++;
 491   3              }
 492   2          }
 493   1          else
 494   1          {
 495   2              #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 496   2                  /* Update Baseline if lower that noiseThreshold */
 497   2                  if ( (tempRaw <= (uint16) noiseThreshold) || 
 498   2                       ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 499   2                         && widget == 0))
 500   2                  {
 501   3              #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 502   3                      /* Make full Baseline 23 bits */
 503   3                      calc = (uint32) CapSense_SensorBaseline[sensor] << 8u;
 504   3                      calc |= (uint32) CapSense_SensorBaselineLow[sensor];
 505   3      
 506   3                      /* Add Raw Data to Baseline */
 507   3                      calc += filteredRawData;
 508   3      
 509   3                      /* Sub the high Baseline */
 510   3                      calc -= CapSense_SensorBaseline[sensor];
 511   3      
 512   3                      /* Put Baseline and BaselineLow */
 513   3                      CapSense_SensorBaseline[sensor] = ((uint16) (calc >> 8u));
 514   3                      CapSense_SensorBaselineLow[sensor] = ((uint8) calc);
 515   3      
 516   3                      CapSense_LowBaselineResetCnt[sensor] = 0;
 517   3              #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 518   3                  }
 519   2              #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 520   2          }
 521   1      
 522   1          /* Calculate Signal if possitive difference > noiseThreshold */
 523   1          if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 524   1          {
 525   2              #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
 526   2                  /* Over flow defence for uint8 */
 527   2                  if (tempRaw > 0xFFu)
 528   2                  {
 529   3                      CapSense_SensorSignal[sensor] = 0xFFu;
 530   3                  }    
 531   2                  else 
 532   2                  {
 533   3                      CapSense_SensorSignal[sensor] = ((uint8) tempRaw);
 534   3                  }
 535   2              #else
                          CapSense_SensorSignal[sensor] = ((uint16) tempRaw);
                      #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 538   2          }
 539   1          else
 540   1          {
 541   2              /* Signal is zero */
 542   2              CapSense_SensorSignal[sensor] = 0u;
 543   2          }
 544   1      
 545   1          #if (CapSense_TOTAL_GENERICS_COUNT)
                      /* Exclude generic widget */
                      }
                  #endif  /* CapSense_TOTAL_GENERICS_COUNT */
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 10  

 549   1      }
 550          
 551          
 552          /*******************************************************************************
 553          * Function Name: CapSense_UpdateEnabledBaselines
 554          ********************************************************************************
 555          *
 556          * Summary:
 557          *  Checks CapSense_SensorEnableMask[] array and calls the 
 558          *  CapSense_UpdateSensorBaseline function to update the baselines 
 559          *  for enabled sensors.
 560          *
 561          * Parameters:
 562          *  None
 563          *
 564          * Return:
 565          *  None
 566          *
 567          * Global Variables:
 568          *  CapSense_SensorEnableMask[] - used to store the sensor scanning 
 569          *  state.
 570          *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 
 571          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 572          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 573          *  sensors 8 through 15 (if needed), and so on.
 574          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 575          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 576          *
 577          * Reentrant:
 578          *  No
 579          *
 580          *******************************************************************************/
 581           void CapSense_UpdateEnabledBaselines(void)
 582                                           
 583          {
 584   1          uint8 i;
 585   1          uint8 pos;
 586   1          uint8 enMask;
 587   1          
 588   1          for(i = 0; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 589   1          {
 590   2              pos = (i >> 3u);
 591   2              enMask = 0x01u << (i & 0x07u);
 592   2              if((CapSense_SensorEnableMask[pos] & enMask) != 0u)
 593   2              {
 594   3                  CapSense_UpdateSensorBaseline(i);
 595   3              }
 596   2          }
 597   1      }
 598          
 599          
 600          /*******************************************************************************
 601          * Function Name: CapSense_CheckIsSensorActive
 602          ********************************************************************************
 603          *
 604          * Summary:
 605          *  Compares the CapSense_SensorSignal[sensor] array element to finger
 606          *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 607          *  account. The hysteresis is added or subtracted from the finger threshold 
 608          *  based on whether the sensor is currently active. 
 609          *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 610          *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 11  

 611          *  The debounce counter added to the sensor active transition.
 612          *  This function updates CapSense_SensorOnMask[] array element.
 613          *
 614          * Parameters:
 615          *  sensor:  Sensor number.
 616          *
 617          * Return:
 618          *  Returns sensor state 1 if active, 0 if not active.
 619          *
 620          * Global Variables:
 621          *  CapSense_SensorSignal[]      - used to store diffence between 
 622          *  current value of raw data and previous value of baseline.
 623          *  CapSense_debounceCounter[]   - used to store current debounce 
 624          *  counter of sensor. Widget which has this parameter are buttons, matrix 
 625          *  buttons, proximity, guard. All other widgets haven't debounce parameter
 626          *  and use the last element of this array with value 0 (it means no debounce).
 627          *  CapSense_SensorOnMask[] - used to store sensors on/off state.
 628          *  CapSense_SensorOnMask[0] contains the masked bits for sensors 
 629          *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 630          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 631          *  sensors 8 through 15 (if needed), and so on.
 632          *  0 - sensor is inactive.
 633          *  1 - sensor is active.
 634          *
 635          * Reentrant:
 636          *  No
 637          *
 638          *******************************************************************************/
 639          uint8 CapSense_CheckIsSensorActive(uint8 sensor)
 640                                            
 641          {
 642   1          uint8 debounceIndex;
 643   1          /* Get On/Off mask */
 644   1          uint8 pos = (sensor >> 3u);
 645   1          uint8 onMask = 0x01u << (sensor & 0x07u);
 646   1          /* Prepare to find debounce counter index */
 647   1          uint8 widget = CapSense_widgetNumber[sensor];
 648   1          uint8 fingerThreshold = CapSense_fingerThreshold[widget];
 649   1          uint8 hysteresis = CapSense_hysteresis[widget];
 650   1          uint8 debounce = CapSense_debounce[widget];
 651   1          
 652   1          if (widget < CapSense_TOTAL_CENTROIDS_COUNT)
 653   1          {
 654   2              debounceIndex = CapSense_UNUSED_DEBOUNCE_COUNTER_INDEX;
 655   2              CapSense_debounceCounter[debounceIndex] = 1u;
 656   2          }
 657   1          else
 658   1          {
 659   2              debounceIndex = widget - (CapSense_END_OF_TOUCH_PAD_INDEX + 1);
 660   2          }
 661   1      
 662   1          
 663   1          /* Was on */
 664   1          if (CapSense_SensorOnMask[pos] & onMask)
 665   1          {
 666   2              /* Hysteresis minus */
 667   2              if (CapSense_SensorSignal[sensor] < (fingerThreshold - hysteresis))
 668   2              {
 669   3                  CapSense_SensorOnMask[pos] &= ~onMask;
 670   3                  CapSense_debounceCounter[debounceIndex] = debounce; 
 671   3              }
 672   2          }
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 12  

 673   1          else    /* Was off */
 674   1          {
 675   2              /* Hysteresis plus */
 676   2              if (CapSense_SensorSignal[sensor] > (fingerThreshold + hysteresis))
 677   2              {
 678   3                  /* Sensor active, decrement debounce counter */
 679   3                  if (CapSense_debounceCounter[debounceIndex]-- <= 1u)
 680   3                  {
 681   4                      CapSense_SensorOnMask[pos] |= onMask; 
 682   4                  }
 683   3              }
 684   2              else
 685   2              {
 686   3                  /* Sensor inactive - reset Debounce counter */
 687   3                  CapSense_debounceCounter[debounceIndex] = debounce;
 688   3              }
 689   2          }
 690   1          
 691   1          return (CapSense_SensorOnMask[pos] & onMask) ? 1u : 0u;
 692   1      }
 693          
 694          
 695          /*******************************************************************************
 696          * Function Name: CapSense_CheckIsWidgetActive
 697          ********************************************************************************
 698          *
 699          * Summary:
 700          *  Use function CapSense_CheckIsSensorActive() to update 
 701          *  CapSense_SensorOnMask[] for all sensors within the widget.
 702          *  If one of sensors within widget is active the function return that widget is 
 703          *  active.
 704          *  The touch pad and matrix buttons widgets need to have active sensor within 
 705          *  col and row to return widget active status.
 706          *
 707          * Parameters:
 708          *  widget:  widget number.
 709          *
 710          * Return:
 711          *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 712          *  active, 0 if all sensors within widget are inactive.
 713          *
 714          * Reentrant:
 715          *  No
 716          *
 717          *******************************************************************************/
 718          uint8 CapSense_CheckIsWidgetActive(uint8 widget)
 719                                           
 720          {
 721   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 722   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 723   1          uint8 state = 0u;
 724   1      
 725   1          /* Check all sensors of the widget */
 726   1          do
 727   1          {
 728   2              if(CapSense_CheckIsSensorActive(rawIndex) != 0u)
 729   2              {
 730   3                  state = CapSense_SENSOR_1_IS_ACTIVE;
 731   3              }
 732   2              rawIndex++;
 733   2          }
 734   1          while(rawIndex < numberOfSensors);
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 13  

 735   1          
 736   1      
 737   1          
 738   1          return state;
 739   1      }
 740          
 741          
 742          /*******************************************************************************
 743          * Function Name: CapSense_CheckIsAnyWidgetActive
 744          ********************************************************************************
 745          *
 746          * Summary:
 747          *  Compares all sensors of the CapSense_Signal[] array to their finger 
 748          *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
 749          *  the CapSense_SensorOnMask[] array is up to date after calling this 
 750          *  function.
 751          *
 752          * Parameters:
 753          *  widget:  widget number.
 754          *
 755          * Return:
 756          *  Returns 1 if any widget is active, 0 none of widgets are active.
 757          *
 758          * Reentrant:
 759          *  No
 760          *
 761          *******************************************************************************/
 762          uint8 CapSense_CheckIsAnyWidgetActive(void)
 763                                           
 764          {
 765   1          uint8 i;
 766   1          uint8 state = 0u;
 767   1          
 768   1          for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 769   1          {
 770   2              if (CapSense_CheckIsWidgetActive(i) != 0u)
 771   2              {
 772   3                  state = CapSense_WIDGET_IS_ACTIVE;
 773   3              }
 774   2          }
 775   1          
 776   1      
 777   1          return state;
 778   1      }
 779          
 780          
 781          /*******************************************************************************
 782          * Function Name: CapSense_EnableWidget
 783          ********************************************************************************
 784          *
 785          * Summary:
 786          *  Enable all widget elements (sensors) to scanning process.
 787          *
 788          * Parameters:
 789          *  widget:  widget number.
 790          *
 791          * Return:
 792          *  None
 793          *
 794          * Global Variables:
 795          *  CapSense_SensorEnableMask[] - used to store the sensor scanning 
 796          *  state.
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 14  

 797          *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 
 798          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 799          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 800          *  sensors 8 through 15 (if needed), and so on.
 801          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 802          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 803          *
 804          * Reentrant:
 805          *  No
 806          *
 807          *******************************************************************************/
 808          void CapSense_EnableWidget(uint8 widget)
 809                                             
 810          {
 811   1          uint8 pos;
 812   1          uint8 enMask;
 813   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 814   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 815   1          
 816   1          /* Enable all sensors of the widget */
 817   1          do
 818   1          {
 819   2              pos = (rawIndex >> 3u);
 820   2              enMask = 0x01u << (rawIndex & 0x07u);
 821   2              
 822   2              CapSense_SensorEnableMask[pos] |= enMask;
 823   2              rawIndex++;
 824   2          }
 825   1          while(rawIndex < numberOfSensors);
 826   1          
 827   1      
 828   1      }
 829          
 830          
 831          /*******************************************************************************
 832          * Function Name: CapSense_DisableWidget
 833          ********************************************************************************
 834          *
 835          * Summary:
 836          *  Disable all widget elements (sensors) from scanning process.
 837          *
 838          * Parameters:
 839          *  widget:  widget number.
 840          *
 841          * Return:
 842          *  None
 843          *
 844          * Global Variables:
 845          *  CapSense_SensorEnableMask[] - used to store the sensor scanning 
 846          *  state.
 847          *  CapSense_SensorEnableMask[0] contains the masked bits for sensors 
 848          *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 849          *  CapSense_SensorEnableMask[1] contains the masked bits for 
 850          *  sensors 8 through 15 (if needed), and so on.
 851          *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 852          *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 853          *
 854          * Reentrant:
 855          *  No
 856          *
 857          *******************************************************************************/
 858          void CapSense_DisableWidget(uint8 widget)
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 15  

 859                                              
 860          {
 861   1          uint8 pos;
 862   1          uint8 enMask;
 863   1          uint8 rawIndex = CapSense_rawDataIndex[widget];
 864   1          uint8 numberOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
 865   1         
 866   1          /* Disable all sensors of the widget */
 867   1          do
 868   1          {
 869   2              pos = (rawIndex >> 3u);
 870   2              enMask = 0x01u << (rawIndex & 0x07u);
 871   2              
 872   2              CapSense_SensorEnableMask[pos] &= ~enMask;
 873   2              rawIndex++;
 874   2          }
 875   1          while(rawIndex < numberOfSensors);
 876   1          
 877   1      
 878   1      }
 879          #if(CapSense_TOTAL_CENTROIDS_COUNT)
 880              /*******************************************************************************
 881              * Function Name: CapSense_FindMaximum
 882              ********************************************************************************
 883              *
 884              * Summary:
 885              *  Finds index of maximum element within defined centroid. Checks 
 886              *  CapSense_SensorSignal[] within defined cenrtoid and 
 887              *  returns index of maximum element. The values below finger threshold are 
 888              *  ignored.
 889              *  The centrod defines by offset of first element and number of elements - count.
 890              *  The diplexed centroid requires at least consecutive two elements above
 891              *  FingerThreshold to find index of maximum element.
 892              * 
 893              * Parameters:
 894              *  offset:  Start index of cetroid in CapSense_SensorSignal[] array.
 895              *  count:   number of elements within centroid.
 896              *  fingerThreshold:  Finger threshould.
 897              *  diplex:   pointer to diplex table.
 898              * 
 899              * Return:
 900              *  Returns index of maximum element within defined centroid.
 901              *  If index of maximum element doesn't find the 0xFF returns.
 902              * 
 903              *******************************************************************************/
 904              #if (CapSense_IS_DIPLEX_SLIDER)
                      uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 CYCODE *d
             -iplex)
                                                             
                  #else 
 908                  uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
 909                                                         
 910              #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 911              {
 912   1              uint8 i;
 913   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          uint8 curPos = 0u;
                          /* No centroid at the Start */
                          uint8 curCntrdSize = 0u;
                          uint8 curCtrdStartPos = 0xFFu;
                          /* The biggset centroid is zero */
                          uint8 biggestCtrdSize = 0u;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 16  

                          uint8 biggestCtrdStartPos = 0u;
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
 922   1              uint8 maximum = 0xFFu;
 923   1              uint8 temp = 0u;
 924   1              uint8 *startOfSlider = &CapSense_SensorSignal[offset]; 
 925   1      
 926   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          if(diplex != 0u)
                          {
                              /* Initialize */
                              i = 0u;
                              
                              /* Make slider x2 as Diplexed */
                              count <<= 1u;
                              while(1u)
                              { 
                                  if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
                                  {
                                      if (curCtrdStartPos == 0xFFu)
                                      {
                                          /* Start of centroid */
                                          curCtrdStartPos = i;
                                          curCntrdSize++;
                                      }
                                      else
                                      {
                                          curCntrdSize++;
                                      }
                                  }
                                  else   /* Select the bigest and indicate zero start */
                                  {          
                                      if(curCntrdSize > 0)
                                      {
                                          /* We are in the end of current */
                                          if(curCntrdSize > biggestCtrdSize)
                                          {
                                              biggestCtrdSize = curCntrdSize;
                                              biggestCtrdStartPos = curCtrdStartPos;
                                          }
                                          
                                          curCntrdSize = 0u;
                                          curCtrdStartPos = 0xFFu;
                                      }
                                  }
                                  
                                  i++; 
                                  curPos = diplex[i];
                                  if(i == count)
                                  {
                                      break;
                                  }            
                              }
                                  
                                  /* Find the biggest centroid if two are the same size, last one wins
                                     We are in the end of current */
                              if (curCntrdSize >= biggestCtrdSize) 
                              {
                                  biggestCtrdSize = curCntrdSize;
                                  biggestCtrdStartPos = curCtrdStartPos;
                              }
                          }
                          else
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 17  

                          {
                              /* Without diplexing */ 
                              biggestCtrdSize = count;
                          }
                                      
              
                          /* Check centroid size */
                          #if (CapSense_IS_NON_DIPLEX_SLIDER)
                              if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
                          #else                    
                              if(biggestCtrdSize >= 2u)
                          #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
                              {
                                  for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
                                  {
                                      #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
                                          if (diplex == 0u)
                                          {
                                              curPos = i;
                                          }
                                          else
                                          {
                                              curPos = diplex[i];
                                          }                    
                                      #elif (CapSense_IS_DIPLEX_SLIDER)                    
                                          curPos = diplex[i];                    
                                      #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
                                      /* Looking for the grater element within centroid */
                                      if(startOfSlider[curPos] > fingerThreshold)
                                      {
                                          if(startOfSlider[curPos] > temp)
                                          {
                                              maximum = i;
                                              temp = startOfSlider[curPos];
                                          }
                                      }
                                  }
                              } 
                      #else
1021   1                  for (i = 0u; i < count; i++)
1022   1                  {                      
1023   2                      /* Looking for the grater element within centroid */
1024   2                      if(startOfSlider[i] > fingerThreshold)
1025   2                      {
1026   3                          if(startOfSlider[i] > temp)
1027   3                          {
1028   4                              maximum = i;
1029   4                              temp = startOfSlider[i];
1030   4                          }
1031   3                      }
1032   2                  }    
1033   1              #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1034   1              return (maximum);
1035   1          }
1036              
1037              
1038              /*******************************************************************************
1039              * Function Name: CapSense_CalcCentroid
1040              ********************************************************************************
1041              *
1042              * Summary:
1043              *  Returns position value calculated accoring index of maximum element and API
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 18  

1044              *  resolution.
1045              *
1046              * Parameters:
1047              *  type:  widget type.
1048              *  diplex:  pointer to diplex table.
1049              *  maximum:  Index of maximum element within centroid.
1050              *  offset:   Start index of cetroid in CapSense_SensorSignal[] array.
1051              *  count:    Number of elements within centroid.
1052              *  resolution:  multiplicator calculated according to centroid type and
1053              *  API resolution.
1054              *  noiseThreshold:  Noise threshould.
1055              * 
1056              * Return:
1057              *  Returns position value of the slider.
1058              * 
1059              *
1060              * Reentrant:
1061              *  No.
1062              *
1063              *******************************************************************************/
1064              uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
1065                                                  uint8 count, uint16 resolution, uint8 noiseThreshold)
1066                                                      
1067              {
1068   1              #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1069   1                  uint8 posPrev;
1070   1                  uint8 posNext;
1071   1              #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT>0u)) */
1072   1                     
1073   1              #if (CapSense_IS_DIPLEX_SLIDER)                
                          uint8 pos;
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1076   1      
1077   1              uint8 position;
1078   1              int32 numerator;
1079   1              int32 denominator;
1080   1              uint8 *startOfSlider = &CapSense_SensorSignal[offset];
1081   1                          
1082   1              #if (CapSense_ADD_SLIDER_TYPE)
                          if(type == CapSense_TYPE_RADIAL_SLIDER)
                          {
                      #endif /* (CapSense_ADD_SLIDER_TYPE) */
1086   1      
1087   1                  #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
                              /* Copy Signal for found centriod */
                              CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
                               
                              /* Check borders for ROTARY Slider */
                              if (maximum == 0u)                   /* Start of centroid */
                              { 
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
                              }
                              else if (maximum == (count - 1u))    /* End of centroid */
                              {
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
                              }
                              else                                /* Not first Not last */
                              {
                                  CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
                                  CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 19  

                              }
                          #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1108   1      
1109   1              #if (CapSense_ADD_SLIDER_TYPE)
                          }
                          else
                          {
                      #endif
1114   1      
1115   1                  #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u))
1116   1                      #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                    
                                  /* Calculate next and previous near to maximum */
                                  if(diplex == 0u)
                                  {
                                      pos     = maximum;
                                      posPrev = maximum - 1u;
                                      posNext = maximum + 1u; 
                                  }
                                  else
                                  {
                                      pos     = diplex[maximum];
                                      posPrev = diplex[maximum - 1u];
                                      posNext = diplex[maximum + 1u];
                                      count <<= 1u;
                                  }                    
                              #elif (CapSense_IS_DIPLEX_SLIDER)
                                  /* Calculate next and previous near to maximum */
                                  pos     = diplex[maximum];
                                  posPrev = diplex[maximum - 1u];
                                  posNext = diplex[maximum + 1u];
                                  count <<= 1u;                    
                              #else                    
1138   1                          /* Calculate next and previous near to maximum */
1139   1                          posPrev = maximum - 1u;
1140   1                          posNext = maximum + 1u; 
1141   1                      #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1142   1                              
1143   1                      /* Copy Signal for found centriod */
1144   1                      #if (CapSense_IS_DIPLEX_SLIDER)
                                  CapSense_centroid[CapSense_POS] = startOfSlider[pos];
                              #else
1147   1                          CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1148   1                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1149   1                          
1150   1                      /* Check borders for LINEAR Slider */
1151   1                      if (maximum == 0u)                   /* Start of centroid */
1152   1                      { 
1153   2                          CapSense_centroid[CapSense_POS_PREV] = 0u;
1154   2                          CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1155   2                      }
1156   1                      else if (maximum == ((count) - 1u)) /* End of centroid */
1157   1                      {
1158   2                          CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1159   2                          CapSense_centroid[CapSense_POS_NEXT] = 0u;
1160   2                      }
1161   1                      else                                /* Not first Not last */
1162   1                      {
1163   2                          CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1164   2                          CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1165   2                      }
1166   1                  #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_COUNT>0u))*/
1167   1      
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 20  

1168   1              #if (CapSense_ADD_SLIDER_TYPE)
                          }
                      #endif /* (CapSense_ADD_SLIDER_TYPE) */
1171   1          
1172   1              /* Subtract noiseThreshold */
1173   1              if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1174   1              {
1175   2                  CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1176   2              }
1177   1              else
1178   1              {
1179   2                  CapSense_centroid[CapSense_POS_PREV] = 0u;
1180   2              }
1181   1              
1182   1              /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1183   1              CapSense_centroid[CapSense_POS] -= noiseThreshold;
1184   1              
1185   1              /* Subtract noiseThreshold */
1186   1              if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1187   1              {
1188   2                  CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1189   2              }
1190   1              else
1191   1              {
1192   2                  CapSense_centroid[CapSense_POS_NEXT] = 0u;
1193   2              }
1194   1              
1195   1              
1196   1              /* Si+1 - Si-1 */
1197   1              numerator = (int32) CapSense_centroid[CapSense_POS_NEXT] - 
1198   1                          (int32) CapSense_centroid[CapSense_POS_PREV];
1199   1              
1200   1              /* Si+1 + Si + Si-1 */
1201   1              denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1202   1                            (int32) CapSense_centroid[CapSense_POS] + 
1203   1                            (int32) CapSense_centroid[CapSense_POS_NEXT];
1204   1              
1205   1              /* (numerator/denominator) + maximum */
1206   1              denominator = (numerator << 8u)/denominator + ((uint16) maximum << 8u);
1207   1              
1208   1              #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                          /* Only required for RADIAL Slider */
                          if(denominator < 0)
                          {
                              denominator += ((uint16) count << 8u);
                          }
                      #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1215   1              
1216   1              denominator *= resolution;
1217   1              
1218   1              /* Round the relust and put it to uint8 */
1219   1              position = ((uint8) HI16(denominator + CapSense_CENTROID_ROUND_VALUE));
1220   1      
1221   1              return (position);
1222   1          }    
1223          #endif /* (CapSense_TOTAL_CENTROIDS_COUNT) */
1224          
1225          
1226          #if(CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1227              /*******************************************************************************
1228              * Function Name: CapSense_GetCentroidPos
1229              ********************************************************************************
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 21  

1230              *
1231              * Summary:
1232              *  Checks the CapSense_Signal[ ] array for a centroid within
1233              *  slider specified range. The centroid position is calculated to the resolution
1234              *  specified in the CapSense customizer. The position filters are applied to the
1235              *  result if enabled.
1236              *
1237              * Parameters:
1238              *  widget:  Widget number.
1239              *  For every linear slider widget there are defines in this format:
1240              *  #define CapSense_LS__"widget_name"            5
1241              * 
1242              * Return:
1243              *  Returns position value of the linear slider.
1244              *
1245              * Side Effects:
1246              *  If any sensor within the slider widget is active, the function returns values
1247              *  from zero to the API resolution value set in the CapSense customizer. If no
1248              *  sensors are active, the function returns 0xFFFF. If an error occurs during
1249              *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1250              *  There are no checks of widget type argument provided to this function.
1251              *  The unproper widget type provided will cause unexpected position calculations.
1252              *
1253              * Note:
1254              *  If noise counts on the slider segments are greater than the noise
1255              *  threshold, this subroutine may generate a false centroid result. The noise
1256              *  threshold should be set carefully (high enough above the noise level) so
1257              *  that noise will not generate a false centroid.
1258              *
1259              * Reentrant:
1260              *  No.
1261              *
1262              *******************************************************************************/
1263              uint16 CapSense_GetCentroidPos(uint8 widget) 
1264              {
1265   1              #if (CapSense_IS_DIPLEX_SLIDER)
                          const uint8 CYCODE *diplex;
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1268   1                      
1269   1              #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
                      #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1274   1      
1275   1              #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1276   1                   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                             *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                             */
1281   1      
1282   1              uint8 maximum;
1283   1              uint16 position;
1284   1              uint8 offset = CapSense_rawDataIndex[widget];
1285   1              uint8 count = CapSense_numberOfSensors[widget];
1286   1                              
1287   1              #if (CapSense_IS_DIPLEX_SLIDER)
                          if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
                          {
                              maximum = CapSense_diplexTable[widget];
                              diplex = &CapSense_diplexTable[maximum];
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 22  

                          }
                          else
                          {
                              diplex = 0u;
                          }
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1298   1      
1299   1              /* Find Maximum within centroid */      
1300   1              #if (CapSense_IS_DIPLEX_SLIDER)        
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], diplex);
                      #else
1303   1                  maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
1304   1              #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1305   1      
1306   1              if (maximum != 0xFFu)
1307   1              {
1308   2                  /* Calculate centroid */
1309   2                  position = (uint16) CapSense_CalcCentroid(maximum, 
1310   2                               offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widget]);
1311   2      
1312   2                  #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this linear slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_posFiltersData[posIndex] = (uint8) position;
                                      #if ((0u != (CapSense_MEDIAN_FILTER & \
                                                   CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                                           (0u != (CapSense_AVERAGING_FILTER & \
                                                   CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
              
                                          if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
                                               (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                          {
                                              CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
                                             *   (0u != (CapSense_AVERAGING_FILTER & \
                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
                                             */
                                      
                                      CapSense_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_MedianFilter(position, 
                                                                                  CapSense_posFiltersData[posIndex],
                                                                                  CapSense_posFiltersData[posIndex + 1u]
             -);
                                              CapSense_posFiltersData[posIndex + 1u] = 
                                                                                           CapSense_posFiltersData[posIn
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 23  

             -dex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /*(0u != (CapSense_MEDIAN_FILTER &
                                             *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_AveragingFilter(position, 
                                                                                     CapSense_posFiltersData[posIndex],
                                                                                     CapSense_posFiltersData[posIndex + 
             -1u]);
                                              CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posIndex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_AVERAGING_FILTER & \
                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) 
                                          if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
                                          {
                                              position = CapSense_IIR2Filter(position,
                                                                                     CapSense_posFiltersData[posIndex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_IIR2_FILTER & \
                                             *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                          {
                                              position = CapSense_IIR4Filter(position, 
                                                                                     CapSense_posFiltersData[posIndex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }                                
                                      #endif /* (0u != (CapSense_IIR4_FILTER & \
                                             *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                          {
                                              position = CapSense_JitterFilter(position, 
                                                                                       CapSense_posFiltersData[posIndex]
             -);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_JITTER_FILTER & \
                                             *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
                                             */
                                  }
                              }
                          #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1408   2      
1409   2              }
1410   1              else
1411   1              {
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 24  

1412   2                  /* The maximum didn't find */
1413   2                  position = 0xFFFFu;
1414   2      
1415   2                  #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1422   2              }
1423   1      
1424   1              
1425   1              return (position);
1426   1          }
1427          #endif /* (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1428          
1429          
1430          #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_GetRadialCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Checks the CapSense_Signal[ ] array for a centroid within
                  *  slider specified range. The centroid position is calculated to the resolution
                  *  specified in the CapSense customizer. The position filters are applied to the
                  *  result if enabled.
                  *
                  * Parameters:
                  *  widget:  Widget number.
                  *  For every radial slider widget there are defines in this format:
                  *  #define CapSense_RS_"widget_name"            5
                  * 
                  * Return:
                  *  Returns position value of the radial slider.
                  *
                  * Side Effects:
                  *  If any sensor within the slider widget is active, the function returns values
                  *  from zero to the API resolution value set in the CapSense customizer. If no
                  *  sensors are active, the function returns 0xFFFF.
                  *  There are no checks of widget type argument provided to this function.
                  *  The unproper widget type provided will cause unexpected position calculations.
                  *
                  * Note:
                  *  If noise counts on the slider segments are greater than the noise
                  *  threshold, this subroutine may generate a false centroid result. The noise
                  *  threshold should be set carefully (high enough above the noise level) so 
                  *  that noise will not generate a false centroid.
                  *
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                   uint16 CapSense_GetRadialCentroidPos(uint8 widget)
                                                             
                  {
                      #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                          uint8 posIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 25  

                      #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
              
                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                          uint8 tempPos;
                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                             *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                             */
              
                      uint8 maximum;
                      uint16 position;
                      uint8 offset = CapSense_rawDataIndex[widget];
                      uint8 count = CapSense_numberOfSensors[widget];
                      
                      /* Find Maximum within centroid */        
                      #if (CapSense_IS_DIPLEX_SLIDER)
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
                      #else
                          maximum = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
                      
                      if (maximum != 0xFFu)
                      {
                          /* Calculate centroid */
                          position = (uint16) CapSense_CalcCentroid(maximum, 
                                       offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widget]);
              
                          #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Check if this Radial slider has enabled filters */
                              if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
                              {
                                  /* Caluclate position to store filters data */
                                  posIndex  = firstTimeIndex + 1u;
                                  
                                  if (0u == CapSense_posFiltersData[firstTimeIndex])
                                  {
                                      /* Init filters */
                                      CapSense_posFiltersData[posIndex] = (uint8) position;
                                      #if ((0u != (CapSense_MEDIAN_FILTER & \
                                                   CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                                           (0u != (CapSense_AVERAGING_FILTER & \
                                                   CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
              
                                          if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
                                               (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                          {
                                              CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
                                          }
                                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
                                             *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
                                             *   (0u != (CapSense_AVERAGING_FILTER & \
                                             *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
                                             */
                                      
                                      CapSense_posFiltersData[firstTimeIndex] = 1u;
                                  }
                                  else
                                  {
                                      /* Do filtering */
                                      #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                          {
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 26  

                                              tempPos = (uint8) position;
                                              position = CapSense_MedianFilter(position,
                                                                                      CapSense_posFiltersData[posIndex],
                                                                                      CapSense_posFiltersData[posIndex +
             - 1u]);
                                              CapSense_posFiltersData[posIndex + 1u] = 
                                                                                            CapSense_posFiltersData[posI
             -ndex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_MEDIAN_FILTER & 
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_AVERAGING_FILTER & \
                                                  CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
                                          {
                                              tempPos = (uint8) position;
                                              position = CapSense_AveragingFilter(position, 
                                                                                     CapSense_posFiltersData[posIndex],
                                                                                     CapSense_posFiltersData[posIndex + 
             -1u]);
                                              CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIndex];
                                              CapSense_posFiltersData[posIndex] = tempPos;
                                          }
                                      #endif /* (0u != (CapSense_AVERAGING_FILTER & \
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
                                          {
                                              position = CapSense_IIR2Filter(position, 
                                                                                     CapSense_posFiltersData[posIndex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_IIR2_FILTER & 
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                          {
                                              position = CapSense_IIR4Filter(position, 
                                                                                     CapSense_posFiltersData[posIndex]);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_IIR4_FILTER & 
                                             *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                             */
              
                                      #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
                                          if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                          {
                                              position = CapSense_JitterFilter(position, 
                                                                                       CapSense_posFiltersData[posIndex]
             -);
                                              CapSense_posFiltersData[posIndex] = (uint8) position;
                                          }
                                      #endif /* (0u != (CapSense_JITTER_FILTER &
                                             *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 27  

                                             */
                                  }
                              }
                          #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
              
                      }
                      else
                      {
                          /* The maximum didn't find */
                          position = 0xFFFFu;
              
                          #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
                              /* Reset the filters */
                              if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
                      }
                      
                      return (position);
                  }
              #endif
1617          
1618          
1619          #if(CapSense_TOTAL_TOUCH_PADS_COUNT > 0u)
                  /*******************************************************************************
                  * Function Name: CapSense_GetTouchCentroidPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  If a finger is present on touch pad, this function calculates the X and Y
                  *  position of the finger by calculating the centroids within touch pad specified
                  *  range. The X and Y positions are calculated to the API resolutions set in the
                  *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
                  *  The position filter is applied to the result if enabled.
                  *  This function is available only if a touch pad is defined by the CapSense
                  *  customizer.
                  *
                  * Parameters:
                  *  widget:  Widget number. 
                  *  For every touchpad widget there are defines in this format:
                  *  #define CapSense_TP_"widget_name"            5
                  *
                  *  pos:     Pointer to the array of two uint16 elements, where result
                  *  result of calculation of X and Y position are stored.
                  *  pos[0u]  - position of X
                  *  pos[1u]  - position of Y
                  *
                  * Return:
                  *  Returns a 1 if a finger is on the touch pad, 0 - if not.
                  *
                  * Side Effects:
                  *   There are no checks of widget type argument provided to this function.
                  *   The unproper widget type provided will cause unexpected position
                  *   calculations.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  uint8 CapSense_GetTouchCentroidPos(uint8 widget, uint16* pos)
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 28  

                                                          
                  {
                      #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                          uint8 posXIndex;
                          uint8 posYIndex;
                          uint8 firstTimeIndex = CapSense_posFiltersData[widget];
                          uint8 posFiltersMask = CapSense_posFiltersMask[widget];
                      #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
              
                      #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
                           (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
                          uint16 tempPos;
                      #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
                             *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
                             */
              
                      uint8 MaxX;
                      uint8 MaxY;
                      uint8 posX;
                      uint8 posY;
                      uint8 touch = 0u;
                      uint8 offset = CapSense_rawDataIndex[widget];
                      uint8 count = CapSense_numberOfSensors[widget];
                      
                      /* Find Maximum within X centroid */
                      #if (CapSense_IS_DIPLEX_SLIDER)
                          MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
                      #else
                          MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
                      #endif /* (CapSense_IS_DIPLEX_SLIDER) */
              
                      if (MaxX != 0xFFu)
                      {
                          offset = CapSense_rawDataIndex[widget + 1u];
                          count = CapSense_numberOfSensors[widget + 1u];
              
                          /* Find Maximum within Y centroid */
                          #if (CapSense_IS_DIPLEX_SLIDER)
                              MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0u);
                          #else
                              MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
                          #endif /* (CapSense_IS_DIPLEX_SLIDER) */
              
                          if (MaxY != 0xFFu)
                          {
                              /* X and Y maximums are found = true touch */
                              touch = 1u;
                              
                              /* Calculate Y centroid */
                              posY = CapSense_CalcCentroid(MaxY, offset, count, 
                                          CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u]);
                              
                              /* Calculate X centroid */
                              offset = CapSense_rawDataIndex[widget];
                              count = CapSense_numberOfSensors[widget];
                              
                              posX = CapSense_CalcCentroid(MaxX, offset, count, 
                                          CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
                  
                              #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                                  /* Check if this TP has enabled filters */
                                  if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 29  

                                  {
                                      /* Caluclate position to store filters data */
                                      posXIndex  = firstTimeIndex + 1u;
                                      posYIndex  = CapSense_posFiltersData[widget + 1u];
                                      
                                      if (0u == CapSense_posFiltersData[firstTimeIndex])
                                      {
                                          /* Init filters */
                                          CapSense_posFiltersData[posXIndex] = posX;
                                          CapSense_posFiltersData[posYIndex] = posY;
              
                                          #if((0u != (CapSense_MEDIAN_FILTER & \
                                                      CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
                                              (0u != (CapSense_AVERAGING_FILTER & \
                                                      CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
              
                                              if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
                                                   (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
                                              {
                                                  CapSense_posFiltersData[posXIndex + 1u] = posX;
                                                  CapSense_posFiltersData[posYIndex + 1u] = posY;
                                              }
                                          #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
                                                 *    (0u != (CapSense_AVERAGING_FILTER & \
                                                 *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
                                                 */
                                          
                                          CapSense_posFiltersData[firstTimeIndex] = 1u;
                                      }
                                      else
                                      {
                                          /* Do filtering */
                                          #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_MedianFilter(posX,
                                                                                    CapSense_posFiltersData[posXIndex],
                                                                                    CapSense_posFiltersData[posXIndex + 
             -1u]);
                                                  CapSense_posFiltersData[posXIndex + 1u] = 
                                                                                           CapSense_posFiltersData[posXI
             -ndex];
                                                  CapSense_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
                                                  posY = (uint8) CapSense_MedianFilter(posY,
                                                                                     CapSense_posFiltersData[posYIndex],
             - 
                                                                                     CapSense_posFiltersData[posYIndex +
             - 1u]);
                                                  CapSense_posFiltersData[posYIndex + 1u] = 
                                                                                           CapSense_posFiltersData[posYI
             -ndex];
                                                  CapSense_posFiltersData[posYIndex] = tempPos;
                                              }
                                              
                                          #endif /* (0u != (CapSense_MEDIAN_FILTER & \
                                                 *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 30  

                                          #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
                                              {
                                                  tempPos = posX;
                                                  posX = (uint8) CapSense_AveragingFilter(posX,
                                                                                     CapSense_posFiltersData[posXIndex],
             - 
                                                                                     CapSense_posFiltersData[posXIndex +
             - 1u]);
                                                  CapSense_posFiltersData[posXIndex + 1u] = 
                                                                                           CapSense_posFiltersData[posXI
             -ndex];
                                                  CapSense_posFiltersData[posXIndex] = tempPos;
                                                  
                                                  tempPos = posY;
                                                  posY = (uint8) CapSense_AveragingFilter(posY, 
                                                                                    CapSense_posFiltersData[posYIndex], 
                                                                                    CapSense_posFiltersData[posYIndex + 
             -1u]);
                                                  CapSense_posFiltersData[posYIndex + 1u] = 
                                                                                          CapSense_posFiltersData[posYIn
             -dex];
                                                  CapSense_posFiltersData[posYIndex] = tempPos;
                                              }
              
                                          #endif /* (0u != (CapSense_AVERAGING_FILTER & \
                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
                                              {
                                                  posX = (uint8) CapSense_IIR2Filter(posX, 
                                                                                         CapSense_posFiltersData[posXInd
             -ex]);
                                                  CapSense_posFiltersData[posXIndex] = posX;
                                                  
                                                  posY = (uint8) CapSense_IIR2Filter(posY, 
                                                                                          CapSense_posFiltersData[posYIn
             -dex]);
                                                  CapSense_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif /* (0u != (CapSense_IIR2_FILTER & \
                                                 *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
                                              {
                                                  posX = (uint8) CapSense_IIR4Filter(posX, 
                                                                                          CapSense_posFiltersData[posXIn
             -dex]);
                                                  CapSense_posFiltersData[posXIndex] = posX;
                                                  
                                                  posY = (uint8) CapSense_IIR4Filter(posY, 
                                                                                          CapSense_posFiltersData[posYIn
             -dex]);
                                                  CapSense_posFiltersData[posYIndex] = posY;
                                              }
                                              
                                          #endif /* (0u != (CapSense_IIR4_FILTER & \
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 31  

                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
              
                                          #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                              if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
                                                  {
                                                      posX = (uint8) CapSense_JitterFilter(posX, 
                                                                                          CapSense_posFiltersData[posXIn
             -dex]);
                                                      CapSense_posFiltersData[posXIndex] = posX;
                                                      
                                                      posY = (uint8) CapSense_JitterFilter(posY, 
                                                                                          CapSense_posFiltersData[posYIn
             -dex]);
                                                      CapSense_posFiltersData[posYIndex] = posY;
                                                  }
                                          #endif /* (0u != (CapSense_JITTER_FILTER & \
                                                 *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
                                                 */
                                      }
                                  }
                              #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
              
                              /* Save positions */
                              pos[0u] = posX;
                              pos[1u] = posY;
                          }
                      }
              
                      #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
                          if(touch == 0u)
                          {
                              /* Reset the filters */
                              if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
                              {
                                  CapSense_posFiltersData[firstTimeIndex] = 0u;
                              }
                          }
                      #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
                      
                      return (touch);
                  }
              #endif /* (CapSense_TOTAL_TOUCH_PADS_COUNT > 0u) */
1869          
1870          
1871          #if ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
1872                (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_MedianFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Median filter function. 
                  *  The median filter looks at the three most recent samples and reports the 
                  *  median value.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 32  

                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
                                                       
                  {
                      uint16 tmp;
                      
                      if (x1 > x2)
                      {
                          tmp = x2;
                          x2 = x1;
                          x1 = tmp;
                      }
                      
                      if (x2 > x3)
                      {
                          x2 = x3;
                      }
                      
                      return ((x1 > x2) ? x1 : x2);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER) )
                     */
1913          
1914          
1915          #if ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) || \
1916                (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_AveragingFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Averaging filter function.
                  *  The averaging filter looks at the three most recent samples of position and
                  *  reports the averaging value.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *  x3:  Before previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
                                                          
                  {
                      uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) || \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) )
                     */
1945          
1946          
1947          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) || \
1948                (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
                  /*******************************************************************************
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 33  

                  * Function Name: CapSense_IIR2Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/2 Current Value+ 1/2 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp >>= 1u;
                  
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) || \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER) )
                     */
1978          
1979          
1980          #if ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) || \
1981                (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
                  /*******************************************************************************
                  * Function Name: CapSense_IIR4Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/4 Current Value + 3/4 Previous Value */
                      tmp = (uint32)x1 + (uint32)x2;
                      tmp += ((uint32)x2 << 1u);
                      tmp >>= 2u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) || \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER) )
                     */
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 34  

2012          
2013          
2014          #if ( (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) || \
2015                (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER) )
                  /*******************************************************************************
                  * Function Name: uint16 CapSense_JitterFilter
                  ********************************************************************************
                  *
                  * Summary:
                  *  Jitter filter function.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_JitterFilter(uint16 x1, uint16 x2)
                                                       
                  {
                      if (x1 > x2)
                      {
                          x1--;
                      }
                      else
                      {
                          if (x1 < x2)
                          {
                              x1++;
                          }
                      }
                  
                      return x1;
                  }
              #endif /* ( (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) || \
                     *    (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER) )
                     */
2051          
2052          
2053          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_IIR8Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR8Filter(uint16 x1, uint16 x2)
                                                     
                  {
                      uint32 tmp;
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 35  

                      
                      /* IIR = 1/8 Current Value + 7/8 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 3u) - ((uint32)x2));
                      tmp >>= 3u;
                  
                      return ((uint16) tmp);
                  }
              #endif /* (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) */
2083          
2084          
2085          #if (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
                  /*******************************************************************************
                  * Function Name: CapSense_IIR16Filter
                  ********************************************************************************
                  *
                  * Summary:
                  *  IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
                  *  Only applies for raw data.
                  *
                  * Parameters:
                  *  x1:  Current value.
                  *  x2:  Previous value.
                  *
                  * Return:
                  *  Returns filtered value.
                  *
                  *******************************************************************************/
                  uint16 CapSense_IIR16Filter(uint16 x1, uint16 x2)
                                                      
                  {
                      uint32 tmp;
                      
                      /* IIR = 1/16 Current Value + 15/16 Previous Value */
                      tmp = (uint32)x1;
                      tmp += (((uint32)x2 << 4u) - ((uint32)x2));
                      tmp >>= 4u;
                      
                      return ((uint16) tmp);
                  }
              #endif /* (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) */
2115          
2116          
2117          #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
              
                  /*******************************************************************************
                  * Function Name: CapSense_GetMatrixButtonPos
                  ********************************************************************************
                  *
                  * Summary:
                  *  Function calculates and returns touch position (column and row) for matrix
                  *  button widget.
                  *
                  * Parameters:
                  *  widget:  widget number;
                  *  pos:     pointer to an array of two uint8, where touch postion will be 
                  *           stored:
                  *           pos[0] - column position;
                  *           pos[1] - raw position.
                  *
                  * Return:
                  *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 36  

                  *  cases.
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  uint8 CapSense_GetMatrixButtonPos(uint8 widget, uint8* pos)
                                                                
                  {
                      uint8 i;
                      uint16 row_sig_max = 0u;
                      uint16 col_sig_max = 0u;
                      uint8 row_ind = 0u;
                      uint8 col_ind = 0u;
              
                      if (CapSense_CheckIsWidgetActive(widget))
                      {
                          /* Find row number with maximal signal value */
                          for(i = CapSense_rawDataIndex[widget]; i < CapSense_rawDataIndex[widget] + \
                               CapSense_numberOfSensors[widget]; i++) 
                          {          
                              if (CapSense_SensorSignal[i] > col_sig_max)
                              {
                                  col_ind = i;
                                  col_sig_max = CapSense_SensorSignal[i];
                              }
                          }
              
                          /* Find row number with maximal signal value */
                          for(i = CapSense_rawDataIndex[widget+1u]; i < CapSense_rawDataIndex[widget+1u] + \
                               CapSense_numberOfSensors[widget+1u]; i++) 
                          {          
                              if (CapSense_SensorSignal[i] > row_sig_max)
                              {
                                  row_ind = i;
                                  row_sig_max = CapSense_SensorSignal[i];
                              }
                          }
              
                          if(col_sig_max >= CapSense_fingerThreshold[widget] && \
                             row_sig_max >= CapSense_fingerThreshold[widget+1u])
                          {
                              pos[0u] = col_ind - CapSense_rawDataIndex[widget];
                              pos[1u] = row_ind - CapSense_rawDataIndex[widget+1u];
                              return 1u;
                          }
                      }
                      return 0u;
                  }
              
              #endif /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
2187          
2188          /* [] END OF FILE */
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 37  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CapSense_BaseInit (BEGIN)
                                           ; SOURCE LINE # 186
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 190
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0015 900000      R     MOV     DPTR,#sensor
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 25E0              ADD     A,ACC
001D 2400        E     ADD     A,#LOW CapSense_SensorRaw
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        E     ADDC    A,#HIGH CapSense_SensorRaw
0024 F583              MOV     DPH,A
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#sensor
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 ED                MOV     A,R5
0031 25E0              ADD     A,ACC
0033 2400        R     ADD     A,#LOW CapSense_SensorBaseline
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
003A F583              MOV     DPH,A
003C EE                MOV     A,R6
003D F0                MOVX    @DPTR,A
003E A3                INC     DPTR
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0041 900000      R     MOV     DPTR,#sensor
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7400        R     MOV     A,#LOW CapSense_SensorBaselineLow
0048 2F                ADD     A,R7
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH CapSense_SensorBaselineLow
004E F583              MOV     DPH,A
0050 E4                CLR     A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 38  

0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0052 900000      R     MOV     DPTR,#sensor
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 7400        R     MOV     A,#LOW CapSense_SensorSignal
0059 2F                ADD     A,R7
005A F582              MOV     DPL,A
005C E4                CLR     A
005D 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
005F F583              MOV     DPH,A
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
0063 900000      R     MOV     DPTR,#widget
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 D3                SETB    C
006A 9400              SUBB    A,#00H
006C 4022              JC      ?C0002
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
006E 900000      R     MOV     DPTR,#widget
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 7400        R     MOV     A,#LOW CapSense_debounce
0075 2F                ADD     A,R7
0076 F582              MOV     DPL,A
0078 E4                CLR     A
0079 3400        R     ADDC    A,#HIGH CapSense_debounce
007B F583              MOV     DPH,A
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F 900000      R     MOV     DPTR,#widget
0082 E0                MOVX    A,@DPTR
0083 FE                MOV     R6,A
0084 7400        R     MOV     A,#LOW CapSense_debounceCounter+0FFFFH
0086 2E                ADD     A,R6
0087 F582              MOV     DPL,A
0089 E4                CLR     A
008A 3400        R     ADDC    A,#HIGH CapSense_debounceCounter+0FFFFH
008C F583              MOV     DPH,A
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0090         ?C0001:
                                           ; SOURCE LINE # 238
0090         ?C0002:
0090 22                RET     
             ; FUNCTION _CapSense_BaseInit (END)

             ; FUNCTION _CapSense_InitializeSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 262
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 266
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 39  

000A 120000      E     LCALL   _CapSense_ScanSensor
000D         ?C0003:
                                           ; SOURCE LINE # 267
000D 120000      E     LCALL   CapSense_IsBusy
0010 EF                MOV     A,R7
0011 70FA              JNZ     ?C0003
0013         ?C0004:
                                           ; SOURCE LINE # 271
0013 900000      R     MOV     DPTR,#sensor
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 288
001B         ?C0005:
001B 22                RET     
             ; FUNCTION _CapSense_InitializeSensorBaseline (END)

             ; FUNCTION CapSense_InitializeAllBaselines (BEGIN)
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 317
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0006:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5010              JNC     ?C0009
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _CapSense_InitializeSensorBaseline
                                           ; SOURCE LINE # 320
0018         ?C0008:
0018 900000      R     MOV     DPTR,#i
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E 80E5              SJMP    ?C0006
0020         ?C0007:
                                           ; SOURCE LINE # 321
0020         ?C0009:
0020 22                RET     
             ; FUNCTION CapSense_InitializeAllBaselines (END)

             ; FUNCTION CapSense_InitializeEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 351
0000 120000      E     LCALL   CapSense_ScanEnabledWidgets
0003         ?C0010:
                                           ; SOURCE LINE # 352
0003 120000      E     LCALL   CapSense_IsBusy
0006 EF                MOV     A,R7
0007 70FA              JNZ     ?C0010
0009         ?C0011:
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 40  

                                           ; SOURCE LINE # 354
0009 900000      R     MOV     DPTR,#i
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
000E         ?C0012:
000E 900000      R     MOV     DPTR,#i
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9407              SUBB    A,#07H
0017 506D              JNC     ?C0016
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
0019 900000      R     MOV     DPTR,#i
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 13                RRC     A
0020 13                RRC     A
0021 13                RRC     A
0022 541F              ANL     A,#01FH
0024 FF                MOV     R7,A
0025 900000      R     MOV     DPTR,#pos
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
002A 900000      R     MOV     DPTR,#i
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 5407              ANL     A,#07H
0032 FF                MOV     R7,A
0033 7401              MOV     A,#01H
0035 A807              MOV     R0,AR7
0037 08                INC     R0
0038 8002              SJMP    ?C0083
003A         ?C0082:
003A C3                CLR     C
003B 33                RLC     A
003C         ?C0083:
003C D8FC              DJNZ    R0,?C0082
003E FF                MOV     R7,A
003F 900000      R     MOV     DPTR,#enMask
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
0044 900000      R     MOV     DPTR,#pos
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
004B 2F                ADD     A,R7
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0051 F583              MOV     DPH,A
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#enMask
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 41  

005B 5E                ANL     A,R6
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E 7016              JNZ     ?C0015
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0060 900000      R     MOV     DPTR,#i
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 25E0              ADD     A,ACC
0068 2400        E     ADD     A,#LOW CapSense_SensorRaw
006A F582              MOV     DPL,A
006C E4                CLR     A
006D 3400        E     ADDC    A,#HIGH CapSense_SensorRaw
006F F583              MOV     DPH,A
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0076         ?C0015:
                                           ; SOURCE LINE # 366
0076 900000      R     MOV     DPTR,#i
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 367
007E         ?C0014:
007E 900000      R     MOV     DPTR,#i
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
0084 8088              SJMP    ?C0012
0086         ?C0013:
                                           ; SOURCE LINE # 368
0086         ?C0016:
0086 22                RET     
             ; FUNCTION CapSense_InitializeEnabledBaselines (END)

             ; FUNCTION _CapSense_UpdateSensorBaseline (BEGIN)
                                           ; SOURCE LINE # 408
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 414
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      E     MOV     DPTR,#CapSense_widgetNumber
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#widget
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 42  

001A 7400        R     MOV     A,#LOW CapSense_noiseThreshold
001C 2F                ADD     A,R7
001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3400        R     ADDC    A,#HIGH CapSense_noiseThreshold
0022 F583              MOV     DPH,A
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#noiseThreshold
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
002B 900000      R     MOV     DPTR,#sensor
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 25E0              ADD     A,ACC
0033 2400        E     ADD     A,#LOW CapSense_SensorRaw
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        E     ADDC    A,#HIGH CapSense_SensorRaw
003A F583              MOV     DPH,A
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#filteredRawData
0044 EE                MOV     A,R6
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0049 900000      R     MOV     DPTR,#sensor
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 25E0              ADD     A,ACC
0051 2400        R     ADD     A,#LOW CapSense_SensorBaseline
0053 F582              MOV     DPL,A
0055 E4                CLR     A
0056 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
0058 F583              MOV     DPH,A
005A E0                MOVX    A,@DPTR
005B FE                MOV     R6,A
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 900000      R     MOV     DPTR,#filteredRawData
0062 E0                MOVX    A,@DPTR
0063 FC                MOV     R4,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FD                MOV     R5,A
0067 C3                CLR     C
0068 ED                MOV     A,R5
0069 9F                SUBB    A,R7
006A EC                MOV     A,R4
006B 9E                SUBB    A,R6
006C 4035              JC      ?C0017
                                           ; SOURCE LINE # 471
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 43  

                                           ; SOURCE LINE # 472
006E 900000      R     MOV     DPTR,#sensor
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 25E0              ADD     A,ACC
0076 2400        R     ADD     A,#LOW CapSense_SensorBaseline
0078 F582              MOV     DPL,A
007A E4                CLR     A
007B 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
007D F583              MOV     DPH,A
007F E0                MOVX    A,@DPTR
0080 FE                MOV     R6,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 900000      R     MOV     DPTR,#filteredRawData
0087 E0                MOVX    A,@DPTR
0088 FC                MOV     R4,A
0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B FD                MOV     R5,A
008C C3                CLR     C
008D ED                MOV     A,R5
008E 9F                SUBB    A,R7
008F FF                MOV     R7,A
0090 EC                MOV     A,R4
0091 9E                SUBB    A,R6
0092 FE                MOV     R6,A
0093 900000      R     MOV     DPTR,#tempRaw
0096 EE                MOV     A,R6
0097 F0                MOVX    @DPTR,A
0098 A3                INC     DPTR
0099 EF                MOV     A,R7
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
009B 900000      R     MOV     DPTR,#widget
009E 7401              MOV     A,#01H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
00A1 8032              SJMP    ?C0018
00A3         ?C0017:
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
00A3 900000      R     MOV     DPTR,#sensor
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 EF                MOV     A,R7
00A9 25E0              ADD     A,ACC
00AB 2400        R     ADD     A,#LOW CapSense_SensorBaseline
00AD F582              MOV     DPL,A
00AF E4                CLR     A
00B0 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
00B2 F583              MOV     DPH,A
00B4 E0                MOVX    A,@DPTR
00B5 FE                MOV     R6,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 900000      R     MOV     DPTR,#filteredRawData
00BC E0                MOVX    A,@DPTR
00BD FC                MOV     R4,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 44  

00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FD                MOV     R5,A
00C1 C3                CLR     C
00C2 EF                MOV     A,R7
00C3 9D                SUBB    A,R5
00C4 FF                MOV     R7,A
00C5 EE                MOV     A,R6
00C6 9C                SUBB    A,R4
00C7 FE                MOV     R6,A
00C8 900000      R     MOV     DPTR,#tempRaw
00CB EE                MOV     A,R6
00CC F0                MOVX    @DPTR,A
00CD A3                INC     DPTR
00CE EF                MOV     A,R7
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
00D0 900000      R     MOV     DPTR,#widget
00D3 E4                CLR     A
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
00D5         ?C0018:
                                           ; SOURCE LINE # 481
00D5 900000      R     MOV     DPTR,#widget
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA EF                MOV     A,R7
00DB 7059              JNZ     ?C0019
00DD 900000      R     MOV     DPTR,#tempRaw
00E0 E0                MOVX    A,@DPTR
00E1 FE                MOV     R6,A
00E2 A3                INC     DPTR
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
00E5 D3                SETB    C
00E6 EF                MOV     A,R7
00E7 9414              SUBB    A,#014H
00E9 EE                MOV     A,R6
00EA 9400              SUBB    A,#00H
00EC 4048              JC      ?C0019
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
00EE 900000      R     MOV     DPTR,#sensor
00F1 E0                MOVX    A,@DPTR
00F2 FF                MOV     R7,A
00F3 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
00F5 2F                ADD     A,R7
00F6 F582              MOV     DPL,A
00F8 E4                CLR     A
00F9 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
00FB F583              MOV     DPH,A
00FD E0                MOVX    A,@DPTR
00FE FF                MOV     R7,A
00FF EF                MOV     A,R7
0100 C3                CLR     C
0101 9405              SUBB    A,#05H
0103 401C              JC      ?C0020
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
0105 900000      R     MOV     DPTR,#sensor
0108 E0                MOVX    A,@DPTR
0109 FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 45  

010A 120000      R     LCALL   _CapSense_BaseInit
                                           ; SOURCE LINE # 486
010D 900000      R     MOV     DPTR,#sensor
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
0114 2F                ADD     A,R7
0115 F582              MOV     DPL,A
0117 E4                CLR     A
0118 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
011A F583              MOV     DPH,A
011C E4                CLR     A
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
011E 020000      R     LJMP    ?C0022
0121         ?C0020:
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
0121 900000      R     MOV     DPTR,#sensor
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
0126 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
0128 2F                ADD     A,R7
0129 F582              MOV     DPL,A
012B E4                CLR     A
012C 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
012E F583              MOV     DPH,A
0130 E0                MOVX    A,@DPTR
0131 04                INC     A
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
0133         ?C0021:
                                           ; SOURCE LINE # 492
0133 020000      R     LJMP    ?C0022
0136         ?C0019:
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 498
0136 900000      R     MOV     DPTR,#noiseThreshold
0139 E0                MOVX    A,@DPTR
013A FF                MOV     R7,A
013B 7E00              MOV     R6,#00H
013D 900000      R     MOV     DPTR,#tempRaw
0140 E0                MOVX    A,@DPTR
0141 FC                MOV     R4,A
0142 A3                INC     DPTR
0143 E0                MOVX    A,@DPTR
0144 FD                MOV     R5,A
0145 D3                SETB    C
0146 ED                MOV     A,R5
0147 9F                SUBB    A,R7
0148 EC                MOV     A,R4
0149 9E                SUBB    A,R6
014A 401F              JC      ?C0024
014C 900000      R     MOV     DPTR,#tempRaw
014F E0                MOVX    A,@DPTR
0150 FE                MOV     R6,A
0151 A3                INC     DPTR
0152 E0                MOVX    A,@DPTR
0153 FF                MOV     R7,A
0154 C3                CLR     C
0155 EF                MOV     A,R7
0156 9414              SUBB    A,#014H
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 46  

0158 EE                MOV     A,R6
0159 9400              SUBB    A,#00H
015B 4003              JC      $ + 5H
015D 020000      R     LJMP    ?C0022
0160 900000      R     MOV     DPTR,#widget
0163 E0                MOVX    A,@DPTR
0164 FF                MOV     R7,A
0165 EF                MOV     A,R7
0166 6003              JZ      $ + 5H
0168 020000      R     LJMP    ?C0022
016B         ?C0024:
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 503
016B 900000      R     MOV     DPTR,#sensor
016E E0                MOVX    A,@DPTR
016F FF                MOV     R7,A
0170 EF                MOV     A,R7
0171 25E0              ADD     A,ACC
0173 2400        R     ADD     A,#LOW CapSense_SensorBaseline
0175 F582              MOV     DPL,A
0177 E4                CLR     A
0178 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
017A F583              MOV     DPH,A
017C E0                MOVX    A,@DPTR
017D FE                MOV     R6,A
017E A3                INC     DPTR
017F E0                MOVX    A,@DPTR
0180 FF                MOV     R7,A
0181 E4                CLR     A
0182 FC                MOV     R4,A
0183 FD                MOV     R5,A
0184 7808              MOV     R0,#08H
0186 120000      E     LCALL   ?C?LSHL
0189 900000      R     MOV     DPTR,#calc
018C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 504
018F 900000      R     MOV     DPTR,#calc
0192 E0                MOVX    A,@DPTR
0193 F8                MOV     R0,A
0194 A3                INC     DPTR
0195 E0                MOVX    A,@DPTR
0196 F9                MOV     R1,A
0197 A3                INC     DPTR
0198 E0                MOVX    A,@DPTR
0199 FA                MOV     R2,A
019A A3                INC     DPTR
019B E0                MOVX    A,@DPTR
019C FB                MOV     R3,A
019D 900000      R     MOV     DPTR,#sensor
01A0 E0                MOVX    A,@DPTR
01A1 FF                MOV     R7,A
01A2 7400        R     MOV     A,#LOW CapSense_SensorBaselineLow
01A4 2F                ADD     A,R7
01A5 F582              MOV     DPL,A
01A7 E4                CLR     A
01A8 3400        R     ADDC    A,#HIGH CapSense_SensorBaselineLow
01AA F583              MOV     DPH,A
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE E4                CLR     A
01AF FC                MOV     R4,A
01B0 FD                MOV     R5,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 47  

01B1 FE                MOV     R6,A
01B2 EB                MOV     A,R3
01B3 4F                ORL     A,R7
01B4 FF                MOV     R7,A
01B5 EA                MOV     A,R2
01B6 4E                ORL     A,R6
01B7 FE                MOV     R6,A
01B8 E9                MOV     A,R1
01B9 4D                ORL     A,R5
01BA FD                MOV     R5,A
01BB E8                MOV     A,R0
01BC 4C                ORL     A,R4
01BD FC                MOV     R4,A
01BE 900000      R     MOV     DPTR,#calc
01C1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 507
01C4 900000      R     MOV     DPTR,#calc
01C7 E0                MOVX    A,@DPTR
01C8 F8                MOV     R0,A
01C9 A3                INC     DPTR
01CA E0                MOVX    A,@DPTR
01CB F9                MOV     R1,A
01CC A3                INC     DPTR
01CD E0                MOVX    A,@DPTR
01CE FA                MOV     R2,A
01CF A3                INC     DPTR
01D0 E0                MOVX    A,@DPTR
01D1 FB                MOV     R3,A
01D2 900000      R     MOV     DPTR,#filteredRawData
01D5 E0                MOVX    A,@DPTR
01D6 FE                MOV     R6,A
01D7 A3                INC     DPTR
01D8 E0                MOVX    A,@DPTR
01D9 FF                MOV     R7,A
01DA E4                CLR     A
01DB FC                MOV     R4,A
01DC FD                MOV     R5,A
01DD EB                MOV     A,R3
01DE 2F                ADD     A,R7
01DF FF                MOV     R7,A
01E0 EA                MOV     A,R2
01E1 3E                ADDC    A,R6
01E2 FE                MOV     R6,A
01E3 E9                MOV     A,R1
01E4 3D                ADDC    A,R5
01E5 FD                MOV     R5,A
01E6 E8                MOV     A,R0
01E7 3C                ADDC    A,R4
01E8 FC                MOV     R4,A
01E9 900000      R     MOV     DPTR,#calc
01EC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 510
01EF 900000      R     MOV     DPTR,#calc
01F2 E0                MOVX    A,@DPTR
01F3 FC                MOV     R4,A
01F4 A3                INC     DPTR
01F5 E0                MOVX    A,@DPTR
01F6 FD                MOV     R5,A
01F7 A3                INC     DPTR
01F8 E0                MOVX    A,@DPTR
01F9 FE                MOV     R6,A
01FA A3                INC     DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 48  

01FB E0                MOVX    A,@DPTR
01FC FF                MOV     R7,A
01FD C004              PUSH    AR4
01FF C005              PUSH    AR5
0201 C006              PUSH    AR6
0203 C007              PUSH    AR7
0205 900000      R     MOV     DPTR,#sensor
0208 E0                MOVX    A,@DPTR
0209 FF                MOV     R7,A
020A EF                MOV     A,R7
020B 25E0              ADD     A,ACC
020D 2400        R     ADD     A,#LOW CapSense_SensorBaseline
020F F582              MOV     DPL,A
0211 E4                CLR     A
0212 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
0214 F583              MOV     DPH,A
0216 E0                MOVX    A,@DPTR
0217 FE                MOV     R6,A
0218 A3                INC     DPTR
0219 E0                MOVX    A,@DPTR
021A FF                MOV     R7,A
021B AB07              MOV     R3,AR7
021D AA06              MOV     R2,AR6
021F E4                CLR     A
0220 F9                MOV     R1,A
0221 F8                MOV     R0,A
0222 D007              POP     AR7
0224 D006              POP     AR6
0226 D005              POP     AR5
0228 D004              POP     AR4
022A C3                CLR     C
022B EF                MOV     A,R7
022C 9B                SUBB    A,R3
022D FF                MOV     R7,A
022E EE                MOV     A,R6
022F 9A                SUBB    A,R2
0230 FE                MOV     R6,A
0231 ED                MOV     A,R5
0232 99                SUBB    A,R1
0233 FD                MOV     R5,A
0234 EC                MOV     A,R4
0235 98                SUBB    A,R0
0236 FC                MOV     R4,A
0237 900000      R     MOV     DPTR,#calc
023A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 513
023D 900000      R     MOV     DPTR,#calc
0240 E0                MOVX    A,@DPTR
0241 FC                MOV     R4,A
0242 A3                INC     DPTR
0243 E0                MOVX    A,@DPTR
0244 FD                MOV     R5,A
0245 A3                INC     DPTR
0246 E0                MOVX    A,@DPTR
0247 FE                MOV     R6,A
0248 A3                INC     DPTR
0249 E0                MOVX    A,@DPTR
024A FF                MOV     R7,A
024B 7808              MOV     R0,#08H
024D 120000      E     LCALL   ?C?ULSHR
0250 900000      R     MOV     DPTR,#sensor
0253 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 49  

0254 FD                MOV     R5,A
0255 ED                MOV     A,R5
0256 25E0              ADD     A,ACC
0258 2400        R     ADD     A,#LOW CapSense_SensorBaseline
025A F582              MOV     DPL,A
025C E4                CLR     A
025D 3400        R     ADDC    A,#HIGH CapSense_SensorBaseline
025F F583              MOV     DPH,A
0261 EE                MOV     A,R6
0262 F0                MOVX    @DPTR,A
0263 A3                INC     DPTR
0264 EF                MOV     A,R7
0265 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
0266 900000      R     MOV     DPTR,#calc
0269 E0                MOVX    A,@DPTR
026A FC                MOV     R4,A
026B A3                INC     DPTR
026C E0                MOVX    A,@DPTR
026D FD                MOV     R5,A
026E A3                INC     DPTR
026F E0                MOVX    A,@DPTR
0270 FE                MOV     R6,A
0271 A3                INC     DPTR
0272 E0                MOVX    A,@DPTR
0273 FF                MOV     R7,A
0274 900000      R     MOV     DPTR,#sensor
0277 E0                MOVX    A,@DPTR
0278 FE                MOV     R6,A
0279 7400        R     MOV     A,#LOW CapSense_SensorBaselineLow
027B 2E                ADD     A,R6
027C F582              MOV     DPL,A
027E E4                CLR     A
027F 3400        R     ADDC    A,#HIGH CapSense_SensorBaselineLow
0281 F583              MOV     DPH,A
0283 EF                MOV     A,R7
0284 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
0285 900000      R     MOV     DPTR,#sensor
0288 E0                MOVX    A,@DPTR
0289 FF                MOV     R7,A
028A 7400        R     MOV     A,#LOW CapSense_LowBaselineResetCnt
028C 2F                ADD     A,R7
028D F582              MOV     DPL,A
028F E4                CLR     A
0290 3400        R     ADDC    A,#HIGH CapSense_LowBaselineResetCnt
0292 F583              MOV     DPH,A
0294 E4                CLR     A
0295 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 518
0296         ?C0023:
                                           ; SOURCE LINE # 520
0296         ?C0022:
                                           ; SOURCE LINE # 523
0296 900000      R     MOV     DPTR,#noiseThreshold
0299 E0                MOVX    A,@DPTR
029A FF                MOV     R7,A
029B 7E00              MOV     R6,#00H
029D 900000      R     MOV     DPTR,#tempRaw
02A0 E0                MOVX    A,@DPTR
02A1 FC                MOV     R4,A
02A2 A3                INC     DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 50  

02A3 E0                MOVX    A,@DPTR
02A4 FD                MOV     R5,A
02A5 D3                SETB    C
02A6 ED                MOV     A,R5
02A7 9F                SUBB    A,R7
02A8 EC                MOV     A,R4
02A9 9E                SUBB    A,R6
02AA 4046              JC      ?C0025
02AC 900000      R     MOV     DPTR,#widget
02AF E0                MOVX    A,@DPTR
02B0 FF                MOV     R7,A
02B1 EF                MOV     A,R7
02B2 603E              JZ      ?C0025
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 527
02B4 900000      R     MOV     DPTR,#tempRaw
02B7 E0                MOVX    A,@DPTR
02B8 FE                MOV     R6,A
02B9 A3                INC     DPTR
02BA E0                MOVX    A,@DPTR
02BB FF                MOV     R7,A
02BC D3                SETB    C
02BD EF                MOV     A,R7
02BE 94FF              SUBB    A,#0FFH
02C0 EE                MOV     A,R6
02C1 9400              SUBB    A,#00H
02C3 4013              JC      ?C0026
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
02C5 900000      R     MOV     DPTR,#sensor
02C8 E0                MOVX    A,@DPTR
02C9 FF                MOV     R7,A
02CA 7400        R     MOV     A,#LOW CapSense_SensorSignal
02CC 2F                ADD     A,R7
02CD F582              MOV     DPL,A
02CF E4                CLR     A
02D0 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
02D2 F583              MOV     DPH,A
02D4 74FF              MOV     A,#0FFH
02D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
02D7 22                RET     
02D8         ?C0026:
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
02D8 900000      R     MOV     DPTR,#tempRaw
02DB E0                MOVX    A,@DPTR
02DC FE                MOV     R6,A
02DD A3                INC     DPTR
02DE E0                MOVX    A,@DPTR
02DF FF                MOV     R7,A
02E0 900000      R     MOV     DPTR,#sensor
02E3 E0                MOVX    A,@DPTR
02E4 FE                MOV     R6,A
02E5 7400        R     MOV     A,#LOW CapSense_SensorSignal
02E7 2E                ADD     A,R6
02E8 F582              MOV     DPL,A
02EA E4                CLR     A
02EB 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
02ED F583              MOV     DPH,A
02EF EF                MOV     A,R7
02F0 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 51  

                                           ; SOURCE LINE # 534
02F1         ?C0027:
                                           ; SOURCE LINE # 538
02F1 22                RET     
02F2         ?C0025:
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 542
02F2 900000      R     MOV     DPTR,#sensor
02F5 E0                MOVX    A,@DPTR
02F6 FF                MOV     R7,A
02F7 7400        R     MOV     A,#LOW CapSense_SensorSignal
02F9 2F                ADD     A,R7
02FA F582              MOV     DPL,A
02FC E4                CLR     A
02FD 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
02FF F583              MOV     DPH,A
0301 E4                CLR     A
0302 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
0303         ?C0028:
                                           ; SOURCE LINE # 549
0303         ?C0029:
0303 22                RET     
             ; FUNCTION _CapSense_UpdateSensorBaseline (END)

             ; FUNCTION CapSense_UpdateEnabledBaselines (BEGIN)
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 588
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005         ?C0030:
0005 900000      R     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9407              SUBB    A,#07H
000E 5057              JNC     ?C0034
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
0010 900000      R     MOV     DPTR,#i
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 13                RRC     A
0017 13                RRC     A
0018 13                RRC     A
0019 541F              ANL     A,#01FH
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#pos
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
0021 900000      R     MOV     DPTR,#i
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 5407              ANL     A,#07H
0029 FF                MOV     R7,A
002A 7401              MOV     A,#01H
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 52  

002C A807              MOV     R0,AR7
002E 08                INC     R0
002F 8002              SJMP    ?C0085
0031         ?C0084:
0031 C3                CLR     C
0032 33                RLC     A
0033         ?C0085:
0033 D8FC              DJNZ    R0,?C0084
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#enMask
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
003B 900000      R     MOV     DPTR,#pos
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
0042 2F                ADD     A,R7
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0048 F583              MOV     DPH,A
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 900000      R     MOV     DPTR,#enMask
004F E0                MOVX    A,@DPTR
0050 FE                MOV     R6,A
0051 EF                MOV     A,R7
0052 5E                ANL     A,R6
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 6008              JZ      ?C0032
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
0057 900000      R     MOV     DPTR,#i
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 120000      R     LCALL   _CapSense_UpdateSensorBaseline
                                           ; SOURCE LINE # 595
005F         ?C0033:
                                           ; SOURCE LINE # 596
005F         ?C0032:
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 809E              SJMP    ?C0030
0067         ?C0031:
                                           ; SOURCE LINE # 597
0067         ?C0034:
0067 22                RET     
             ; FUNCTION CapSense_UpdateEnabledBaselines (END)

             ; FUNCTION _CapSense_CheckIsSensorActive (BEGIN)
                                           ; SOURCE LINE # 639
0000 900000      R     MOV     DPTR,#sensor
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 644
0005 900000      R     MOV     DPTR,#sensor
0008 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 53  

0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 13                RRC     A
000C 13                RRC     A
000D 13                RRC     A
000E 541F              ANL     A,#01FH
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#pos
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 645
0016 900000      R     MOV     DPTR,#sensor
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F 7401              MOV     A,#01H
0021 A807              MOV     R0,AR7
0023 08                INC     R0
0024 8002              SJMP    ?C0087
0026         ?C0086:
0026 C3                CLR     C
0027 33                RLC     A
0028         ?C0087:
0028 D8FC              DJNZ    R0,?C0086
002A FF                MOV     R7,A
002B 900000      R     MOV     DPTR,#onMask
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
0030 900000      R     MOV     DPTR,#sensor
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 900000      E     MOV     DPTR,#CapSense_widgetNumber
0039 93                MOVC    A,@A+DPTR
003A FF                MOV     R7,A
003B 900000      R     MOV     DPTR,#widget
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 648
0040 900000      R     MOV     DPTR,#widget
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 7400        R     MOV     A,#LOW CapSense_fingerThreshold
0047 2F                ADD     A,R7
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        R     ADDC    A,#HIGH CapSense_fingerThreshold
004D F583              MOV     DPH,A
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#fingerThreshold
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 649
0056 900000      R     MOV     DPTR,#widget
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 7400        R     MOV     A,#LOW CapSense_hysteresis
005D 2F                ADD     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 54  

005E F582              MOV     DPL,A
0060 E4                CLR     A
0061 3400        R     ADDC    A,#HIGH CapSense_hysteresis
0063 F583              MOV     DPH,A
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#hysteresis
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 650
006C 900000      R     MOV     DPTR,#widget
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 7400        R     MOV     A,#LOW CapSense_debounce
0073 2F                ADD     A,R7
0074 F582              MOV     DPL,A
0076 E4                CLR     A
0077 3400        R     ADDC    A,#HIGH CapSense_debounce
0079 F583              MOV     DPH,A
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D 900000      R     MOV     DPTR,#debounce
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 652
0082 900000      R     MOV     DPTR,#widget
0085 E0                MOVX    A,@DPTR
0086 FF                MOV     R7,A
0087 EF                MOV     A,R7
0088 C3                CLR     C
0089 9401              SUBB    A,#01H
008B 501A              JNC     ?C0035
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
008D 900000      R     MOV     DPTR,#debounceIndex
0090 7402              MOV     A,#02H
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 655
0093 900000      R     MOV     DPTR,#debounceIndex
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 7400        R     MOV     A,#LOW CapSense_debounceCounter
009A 2F                ADD     A,R7
009B F582              MOV     DPL,A
009D E4                CLR     A
009E 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
00A0 F583              MOV     DPH,A
00A2 7401              MOV     A,#01H
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 656
00A5 800D              SJMP    ?C0036
00A7         ?C0035:
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
00A7 900000      R     MOV     DPTR,#widget
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC EF                MOV     A,R7
00AD 14                DEC     A
00AE FF                MOV     R7,A
00AF 900000      R     MOV     DPTR,#debounceIndex
00B2 EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 55  

00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
00B4         ?C0036:
                                           ; SOURCE LINE # 664
00B4 900000      R     MOV     DPTR,#pos
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 7400        R     MOV     A,#LOW CapSense_SensorOnMask
00BB 2F                ADD     A,R7
00BC F582              MOV     DPL,A
00BE E4                CLR     A
00BF 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
00C1 F583              MOV     DPH,A
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 900000      R     MOV     DPTR,#onMask
00C8 E0                MOVX    A,@DPTR
00C9 FE                MOV     R6,A
00CA EF                MOV     A,R7
00CB 5E                ANL     A,R6
00CC FF                MOV     R7,A
00CD EF                MOV     A,R7
00CE 6065              JZ      ?C0037
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 667
00D0 900000      R     MOV     DPTR,#hysteresis
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 900000      R     MOV     DPTR,#fingerThreshold
00D8 E0                MOVX    A,@DPTR
00D9 FE                MOV     R6,A
00DA C3                CLR     C
00DB EE                MOV     A,R6
00DC 9F                SUBB    A,R7
00DD FF                MOV     R7,A
00DE 900000      R     MOV     DPTR,#sensor
00E1 E0                MOVX    A,@DPTR
00E2 FE                MOV     R6,A
00E3 7400        R     MOV     A,#LOW CapSense_SensorSignal
00E5 2E                ADD     A,R6
00E6 F582              MOV     DPL,A
00E8 E4                CLR     A
00E9 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
00EB F583              MOV     DPH,A
00ED E0                MOVX    A,@DPTR
00EE FE                MOV     R6,A
00EF EE                MOV     A,R6
00F0 C3                CLR     C
00F1 9F                SUBB    A,R7
00F2 4003              JC      $ + 5H
00F4 020000      R     LJMP    ?C0039
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
00F7 900000      R     MOV     DPTR,#pos
00FA E0                MOVX    A,@DPTR
00FB FF                MOV     R7,A
00FC 7400        R     MOV     A,#LOW CapSense_SensorOnMask
00FE 2F                ADD     A,R7
00FF F582              MOV     DPL,A
0101 E4                CLR     A
0102 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
0104 F583              MOV     DPH,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 56  

0106 C083              PUSH    DPH
0108 C082              PUSH    DPL
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 900000      R     MOV     DPTR,#onMask
010F E0                MOVX    A,@DPTR
0110 FE                MOV     R6,A
0111 EE                MOV     A,R6
0112 F4                CPL     A
0113 FE                MOV     R6,A
0114 EF                MOV     A,R7
0115 5E                ANL     A,R6
0116 FF                MOV     R7,A
0117 D082              POP     DPL
0119 D083              POP     DPH
011B EF                MOV     A,R7
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 670
011D 900000      R     MOV     DPTR,#debounce
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 900000      R     MOV     DPTR,#debounceIndex
0125 E0                MOVX    A,@DPTR
0126 FE                MOV     R6,A
0127 7400        R     MOV     A,#LOW CapSense_debounceCounter
0129 2E                ADD     A,R6
012A F582              MOV     DPL,A
012C E4                CLR     A
012D 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
012F F583              MOV     DPH,A
0131 EF                MOV     A,R7
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
0133         ?C0038:
                                           ; SOURCE LINE # 672
0133 8077              SJMP    ?C0039
0135         ?C0037:
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 676
0135 900000      R     MOV     DPTR,#hysteresis
0138 E0                MOVX    A,@DPTR
0139 FF                MOV     R7,A
013A 900000      R     MOV     DPTR,#fingerThreshold
013D E0                MOVX    A,@DPTR
013E FE                MOV     R6,A
013F EE                MOV     A,R6
0140 2F                ADD     A,R7
0141 FF                MOV     R7,A
0142 900000      R     MOV     DPTR,#sensor
0145 E0                MOVX    A,@DPTR
0146 FE                MOV     R6,A
0147 7400        R     MOV     A,#LOW CapSense_SensorSignal
0149 2E                ADD     A,R6
014A F582              MOV     DPL,A
014C E4                CLR     A
014D 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
014F F583              MOV     DPH,A
0151 E0                MOVX    A,@DPTR
0152 FE                MOV     R6,A
0153 EE                MOV     A,R6
0154 D3                SETB    C
0155 9F                SUBB    A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 57  

0156 403E              JC      ?C0040
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 679
0158 900000      R     MOV     DPTR,#debounceIndex
015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
015D 7400        R     MOV     A,#LOW CapSense_debounceCounter
015F 2F                ADD     A,R7
0160 F582              MOV     DPL,A
0162 E4                CLR     A
0163 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
0165 F583              MOV     DPH,A
0167 E0                MOVX    A,@DPTR
0168 FF                MOV     R7,A
0169 14                DEC     A
016A F0                MOVX    @DPTR,A
016B EF                MOV     A,R7
016C D3                SETB    C
016D 9401              SUBB    A,#01H
016F 503B              JNC     ?C0039
                                           ; SOURCE LINE # 680
                                           ; SOURCE LINE # 681
0171 900000      R     MOV     DPTR,#pos
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
0176 7400        R     MOV     A,#LOW CapSense_SensorOnMask
0178 2F                ADD     A,R7
0179 F582              MOV     DPL,A
017B E4                CLR     A
017C 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
017E F583              MOV     DPH,A
0180 C083              PUSH    DPH
0182 C082              PUSH    DPL
0184 E0                MOVX    A,@DPTR
0185 FF                MOV     R7,A
0186 900000      R     MOV     DPTR,#onMask
0189 E0                MOVX    A,@DPTR
018A FE                MOV     R6,A
018B EF                MOV     A,R7
018C 4E                ORL     A,R6
018D FF                MOV     R7,A
018E D082              POP     DPL
0190 D083              POP     DPH
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
0194         ?C0041:
                                           ; SOURCE LINE # 683
0194 8016              SJMP    ?C0039
0196         ?C0040:
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 687
0196 900000      R     MOV     DPTR,#debounce
0199 E0                MOVX    A,@DPTR
019A FF                MOV     R7,A
019B 900000      R     MOV     DPTR,#debounceIndex
019E E0                MOVX    A,@DPTR
019F FE                MOV     R6,A
01A0 7400        R     MOV     A,#LOW CapSense_debounceCounter
01A2 2E                ADD     A,R6
01A3 F582              MOV     DPL,A
01A5 E4                CLR     A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 58  

01A6 3400        R     ADDC    A,#HIGH CapSense_debounceCounter
01A8 F583              MOV     DPH,A
01AA EF                MOV     A,R7
01AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 688
01AC         ?C0042:
                                           ; SOURCE LINE # 689
01AC         ?C0039:
                                           ; SOURCE LINE # 691
01AC 900000      R     MOV     DPTR,#pos
01AF E0                MOVX    A,@DPTR
01B0 FF                MOV     R7,A
01B1 7400        R     MOV     A,#LOW CapSense_SensorOnMask
01B3 2F                ADD     A,R7
01B4 F582              MOV     DPL,A
01B6 E4                CLR     A
01B7 3400        R     ADDC    A,#HIGH CapSense_SensorOnMask
01B9 F583              MOV     DPH,A
01BB E0                MOVX    A,@DPTR
01BC FF                MOV     R7,A
01BD 900000      R     MOV     DPTR,#onMask
01C0 E0                MOVX    A,@DPTR
01C1 FE                MOV     R6,A
01C2 EF                MOV     A,R7
01C3 5E                ANL     A,R6
01C4 FF                MOV     R7,A
01C5 EF                MOV     A,R7
01C6 6004              JZ      ?C0043
01C8 7F01              MOV     R7,#01H
01CA 8002              SJMP    ?C0044
01CC         ?C0043:
01CC 7F00              MOV     R7,#00H
01CE         ?C0044:
                                           ; SOURCE LINE # 692
01CE         ?C0045:
01CE 22                RET     
             ; FUNCTION _CapSense_CheckIsSensorActive (END)

             ; FUNCTION _CapSense_CheckIsWidgetActive (BEGIN)
                                           ; SOURCE LINE # 718
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 721
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 722
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 59  

001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
002D 900000      R     MOV     DPTR,#state
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
0032         ?C0048:
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
0032 900000      R     MOV     DPTR,#rawIndex
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 120000      R     LCALL   _CapSense_CheckIsSensorActive
003A EF                MOV     A,R7
003B 6006              JZ      ?C0049
                                           ; SOURCE LINE # 729
                                           ; SOURCE LINE # 730
003D 900000      R     MOV     DPTR,#state
0040 7401              MOV     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 731
0043         ?C0049:
                                           ; SOURCE LINE # 732
0043 900000      R     MOV     DPTR,#rawIndex
0046 E0                MOVX    A,@DPTR
0047 04                INC     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
0049         ?C0046:
                                           ; SOURCE LINE # 734
0049 900000      R     MOV     DPTR,#numberOfSensors
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#rawIndex
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 EE                MOV     A,R6
0054 C3                CLR     C
0055 9F                SUBB    A,R7
0056 40DA              JC      ?C0048
0058         ?C0047:
                                           ; SOURCE LINE # 738
0058 900000      R     MOV     DPTR,#state
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 739
005D         ?C0050:
005D 22                RET     
             ; FUNCTION _CapSense_CheckIsWidgetActive (END)

             ; FUNCTION CapSense_CheckIsAnyWidgetActive (BEGIN)
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 766
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 60  

0000 900000      R     MOV     DPTR,#state
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
0005 900000      R     MOV     DPTR,#i
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
000A         ?C0051:
000A 900000      R     MOV     DPTR,#i
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 C3                CLR     C
0011 9403              SUBB    A,#03H
0013 5019              JNC     ?C0052
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 770
0015 900000      R     MOV     DPTR,#i
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _CapSense_CheckIsWidgetActive
001D EF                MOV     A,R7
001E 6006              JZ      ?C0053
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0020 900000      R     MOV     DPTR,#state
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
0026         ?C0054:
                                           ; SOURCE LINE # 774
0026         ?C0053:
0026 900000      R     MOV     DPTR,#i
0029 E0                MOVX    A,@DPTR
002A 04                INC     A
002B F0                MOVX    @DPTR,A
002C 80DC              SJMP    ?C0051
002E         ?C0052:
                                           ; SOURCE LINE # 777
002E 900000      R     MOV     DPTR,#state
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
                                           ; SOURCE LINE # 778
0033         ?C0055:
0033 22                RET     
             ; FUNCTION CapSense_CheckIsAnyWidgetActive (END)

             ; FUNCTION _CapSense_EnableWidget (BEGIN)
                                           ; SOURCE LINE # 808
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 813
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 61  

0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 814
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0058:
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8002              SJMP    ?C0089
004E         ?C0088:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0089:
0050 D8FC              DJNZ    R0,?C0088
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 62  

0063 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EF                MOV     A,R7
0073 4E                ORL     A,R6
0074 FF                MOV     R7,A
0075 D082              POP     DPL
0077 D083              POP     DPH
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 823
007B 900000      R     MOV     DPTR,#rawIndex
007E E0                MOVX    A,@DPTR
007F 04                INC     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 824
0081         ?C0056:
                                           ; SOURCE LINE # 825
0081 900000      R     MOV     DPTR,#numberOfSensors
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#rawIndex
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B EE                MOV     A,R6
008C C3                CLR     C
008D 9F                SUBB    A,R7
008E 409D              JC      ?C0058
0090         ?C0057:
                                           ; SOURCE LINE # 828
0090         ?C0059:
0090 22                RET     
             ; FUNCTION _CapSense_EnableWidget (END)

             ; FUNCTION _CapSense_DisableWidget (BEGIN)
                                           ; SOURCE LINE # 858
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 863
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rawIndex
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 864
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 63  

001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rawIndex
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 2E                ADD     A,R6
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#numberOfSensors
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
002D         ?C0062:
                                           ; SOURCE LINE # 868
                                           ; SOURCE LINE # 869
002D 900000      R     MOV     DPTR,#rawIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 13                RRC     A
0034 13                RRC     A
0035 13                RRC     A
0036 541F              ANL     A,#01FH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#pos
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 870
003E 900000      R     MOV     DPTR,#rawIndex
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 5407              ANL     A,#07H
0046 FF                MOV     R7,A
0047 7401              MOV     A,#01H
0049 A807              MOV     R0,AR7
004B 08                INC     R0
004C 8002              SJMP    ?C0091
004E         ?C0090:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0091:
0050 D8FC              DJNZ    R0,?C0090
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#enMask
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
0058 900000      R     MOV     DPTR,#pos
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW CapSense_SensorEnableMask
005F 2F                ADD     A,R7
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH CapSense_SensorEnableMask
0065 F583              MOV     DPH,A
0067 C083              PUSH    DPH
0069 C082              PUSH    DPL
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#enMask
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 64  

0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 EE                MOV     A,R6
0073 F4                CPL     A
0074 FE                MOV     R6,A
0075 EF                MOV     A,R7
0076 5E                ANL     A,R6
0077 FF                MOV     R7,A
0078 D082              POP     DPL
007A D083              POP     DPH
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
007E 900000      R     MOV     DPTR,#rawIndex
0081 E0                MOVX    A,@DPTR
0082 04                INC     A
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
0084         ?C0060:
                                           ; SOURCE LINE # 875
0084 900000      R     MOV     DPTR,#numberOfSensors
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#rawIndex
008C E0                MOVX    A,@DPTR
008D FE                MOV     R6,A
008E EE                MOV     A,R6
008F C3                CLR     C
0090 9F                SUBB    A,R7
0091 409A              JC      ?C0062
0093         ?C0061:
                                           ; SOURCE LINE # 878
0093         ?C0063:
0093 22                RET     
             ; FUNCTION _CapSense_DisableWidget (END)

             ; FUNCTION _CapSense_FindMaximum (BEGIN)
                                           ; SOURCE LINE # 908
0000 900000      R     MOV     DPTR,#offset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#count
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#fingerThreshold
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 911
                                           ; SOURCE LINE # 922
000F 900000      R     MOV     DPTR,#maximum
0012 74FF              MOV     A,#0FFH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 923
0015 900000      R     MOV     DPTR,#temp
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 924
001A 900000      R     MOV     DPTR,#offset
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 7400        R     MOV     A,#LOW CapSense_SensorSignal
0021 2F                ADD     A,R7
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 65  

0022 F9                MOV     R1,A
0023 E4                CLR     A
0024 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
0026 FA                MOV     R2,A
0027 7B01              MOV     R3,#01H
0029 900000      R     MOV     DPTR,#startOfSlider
002C EB                MOV     A,R3
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F EA                MOV     A,R2
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 E9                MOV     A,R1
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0034 900000      R     MOV     DPTR,#i
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
0039         ?C0064:
0039 900000      R     MOV     DPTR,#count
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E 900000      R     MOV     DPTR,#i
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 EE                MOV     A,R6
0044 C3                CLR     C
0045 9F                SUBB    A,R7
0046 507A              JNC     ?C0065
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1024
0048 900000      R     MOV     DPTR,#startOfSlider
004B E0                MOVX    A,@DPTR
004C FB                MOV     R3,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FA                MOV     R2,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 F9                MOV     R1,A
0053 900000      R     MOV     DPTR,#i
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 E9                MOV     A,R1
0059 2F                ADD     A,R7
005A F9                MOV     R1,A
005B E4                CLR     A
005C 3A                ADDC    A,R2
005D FA                MOV     R2,A
005E 120000      E     LCALL   ?C?CLDPTR
0061 FF                MOV     R7,A
0062 900000      R     MOV     DPTR,#fingerThreshold
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 EF                MOV     A,R7
0068 D3                SETB    C
0069 9E                SUBB    A,R6
006A 404D              JC      ?C0066
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1026
006C 900000      R     MOV     DPTR,#startOfSlider
006F E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 66  

0070 FB                MOV     R3,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FA                MOV     R2,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 F9                MOV     R1,A
0077 900000      R     MOV     DPTR,#i
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C E9                MOV     A,R1
007D 2F                ADD     A,R7
007E F9                MOV     R1,A
007F E4                CLR     A
0080 3A                ADDC    A,R2
0081 FA                MOV     R2,A
0082 120000      E     LCALL   ?C?CLDPTR
0085 FF                MOV     R7,A
0086 900000      R     MOV     DPTR,#temp
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B EF                MOV     A,R7
008C D3                SETB    C
008D 9E                SUBB    A,R6
008E 4029              JC      ?C0066
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
0090 900000      R     MOV     DPTR,#i
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 900000      R     MOV     DPTR,#maximum
0098 EF                MOV     A,R7
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1029
009A 900000      R     MOV     DPTR,#startOfSlider
009D E0                MOVX    A,@DPTR
009E FB                MOV     R3,A
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 FA                MOV     R2,A
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 F9                MOV     R1,A
00A5 900000      R     MOV     DPTR,#i
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA E9                MOV     A,R1
00AB 2F                ADD     A,R7
00AC F9                MOV     R1,A
00AD E4                CLR     A
00AE 3A                ADDC    A,R2
00AF FA                MOV     R2,A
00B0 120000      E     LCALL   ?C?CLDPTR
00B3 FF                MOV     R7,A
00B4 900000      R     MOV     DPTR,#temp
00B7 EF                MOV     A,R7
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1030
00B9         ?C0068:
                                           ; SOURCE LINE # 1031
00B9         ?C0067:
                                           ; SOURCE LINE # 1032
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 67  

00B9         ?C0066:
00B9 900000      R     MOV     DPTR,#i
00BC E0                MOVX    A,@DPTR
00BD 04                INC     A
00BE F0                MOVX    @DPTR,A
00BF 020000      R     LJMP    ?C0064
00C2         ?C0065:
                                           ; SOURCE LINE # 1034
00C2 900000      R     MOV     DPTR,#maximum
00C5 E0                MOVX    A,@DPTR
00C6 FF                MOV     R7,A
                                           ; SOURCE LINE # 1035
00C7         ?C0069:
00C7 22                RET     
             ; FUNCTION _CapSense_FindMaximum (END)

             ; FUNCTION _CapSense_CalcCentroid (BEGIN)
                                           ; SOURCE LINE # 1064
0000 900000      R     MOV     DPTR,#maximum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#offset
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#count
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1080
000F 900000      R     MOV     DPTR,#offset
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 7400        R     MOV     A,#LOW CapSense_SensorSignal
0016 2F                ADD     A,R7
0017 F9                MOV     R1,A
0018 E4                CLR     A
0019 3400        R     ADDC    A,#HIGH CapSense_SensorSignal
001B FA                MOV     R2,A
001C 7B01              MOV     R3,#01H
001E 900000      R     MOV     DPTR,#startOfSlider
0021 EB                MOV     A,R3
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EA                MOV     A,R2
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 E9                MOV     A,R1
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1139
0029 900000      R     MOV     DPTR,#maximum
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 14                DEC     A
0030 FF                MOV     R7,A
0031 900000      R     MOV     DPTR,#posPrev
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1140
0036 900000      R     MOV     DPTR,#maximum
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 68  

003B EF                MOV     A,R7
003C 04                INC     A
003D FF                MOV     R7,A
003E 900000      R     MOV     DPTR,#posNext
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1147
0043 900000      R     MOV     DPTR,#startOfSlider
0046 E0                MOVX    A,@DPTR
0047 FB                MOV     R3,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FA                MOV     R2,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D F9                MOV     R1,A
004E 900000      R     MOV     DPTR,#maximum
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 E9                MOV     A,R1
0054 2F                ADD     A,R7
0055 F9                MOV     R1,A
0056 E4                CLR     A
0057 3A                ADDC    A,R2
0058 FA                MOV     R2,A
0059 120000      E     LCALL   ?C?CLDPTR
005C FF                MOV     R7,A
005D 900000      R     MOV     DPTR,#CapSense_centroid+01H
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1151
0062 900000      R     MOV     DPTR,#maximum
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 7027              JNZ     ?C0070
                                           ; SOURCE LINE # 1152
                                           ; SOURCE LINE # 1153
006A 900000      R     MOV     DPTR,#CapSense_centroid
006D E4                CLR     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1154
006F 900000      R     MOV     DPTR,#startOfSlider
0072 E0                MOVX    A,@DPTR
0073 FB                MOV     R3,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FA                MOV     R2,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 F9                MOV     R1,A
007A 900000      R     MOV     DPTR,#posNext
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F E9                MOV     A,R1
0080 2F                ADD     A,R7
0081 F9                MOV     R1,A
0082 E4                CLR     A
0083 3A                ADDC    A,R2
0084 FA                MOV     R2,A
0085 120000      E     LCALL   ?C?CLDPTR
0088 FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 69  

0089 900000      R     MOV     DPTR,#CapSense_centroid+02H
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1155
008E 020000      R     LJMP    ?C0071
0091         ?C0070:
                                           ; SOURCE LINE # 1156
0091 900000      R     MOV     DPTR,#count
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 7E00              MOV     R6,#00H
0098 EF                MOV     A,R7
0099 24FF              ADD     A,#0FFH
009B FF                MOV     R7,A
009C EE                MOV     A,R6
009D 34FF              ADDC    A,#0FFH
009F FE                MOV     R6,A
00A0 900000      R     MOV     DPTR,#maximum
00A3 E0                MOVX    A,@DPTR
00A4 FD                MOV     R5,A
00A5 7C00              MOV     R4,#00H
00A7 EF                MOV     A,R7
00A8 B5052A            CJNE    A,AR5,?C0072
00AB EE                MOV     A,R6
00AC B50426            CJNE    A,AR4,?C0072
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1158
00AF 900000      R     MOV     DPTR,#startOfSlider
00B2 E0                MOVX    A,@DPTR
00B3 FB                MOV     R3,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 FA                MOV     R2,A
00B7 A3                INC     DPTR
00B8 E0                MOVX    A,@DPTR
00B9 F9                MOV     R1,A
00BA 900000      R     MOV     DPTR,#posPrev
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
00BF E9                MOV     A,R1
00C0 2F                ADD     A,R7
00C1 F9                MOV     R1,A
00C2 E4                CLR     A
00C3 3A                ADDC    A,R2
00C4 FA                MOV     R2,A
00C5 120000      E     LCALL   ?C?CLDPTR
00C8 FF                MOV     R7,A
00C9 900000      R     MOV     DPTR,#CapSense_centroid
00CC EF                MOV     A,R7
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1159
00CE 900000      R     MOV     DPTR,#CapSense_centroid+02H
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1160
00D3 803E              SJMP    ?C0071
00D5         ?C0072:
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
00D5 900000      R     MOV     DPTR,#startOfSlider
00D8 E0                MOVX    A,@DPTR
00D9 FB                MOV     R3,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 70  

00DA A3                INC     DPTR
00DB E0                MOVX    A,@DPTR
00DC FA                MOV     R2,A
00DD A3                INC     DPTR
00DE E0                MOVX    A,@DPTR
00DF F9                MOV     R1,A
00E0 900000      R     MOV     DPTR,#posPrev
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
00E5 E9                MOV     A,R1
00E6 2F                ADD     A,R7
00E7 F9                MOV     R1,A
00E8 E4                CLR     A
00E9 3A                ADDC    A,R2
00EA FA                MOV     R2,A
00EB 120000      E     LCALL   ?C?CLDPTR
00EE FF                MOV     R7,A
00EF 900000      R     MOV     DPTR,#CapSense_centroid
00F2 EF                MOV     A,R7
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1164
00F4 900000      R     MOV     DPTR,#startOfSlider
00F7 E0                MOVX    A,@DPTR
00F8 FB                MOV     R3,A
00F9 A3                INC     DPTR
00FA E0                MOVX    A,@DPTR
00FB FA                MOV     R2,A
00FC A3                INC     DPTR
00FD E0                MOVX    A,@DPTR
00FE F9                MOV     R1,A
00FF 900000      R     MOV     DPTR,#posNext
0102 E0                MOVX    A,@DPTR
0103 FF                MOV     R7,A
0104 E9                MOV     A,R1
0105 2F                ADD     A,R7
0106 F9                MOV     R1,A
0107 E4                CLR     A
0108 3A                ADDC    A,R2
0109 FA                MOV     R2,A
010A 120000      E     LCALL   ?C?CLDPTR
010D FF                MOV     R7,A
010E 900000      R     MOV     DPTR,#CapSense_centroid+02H
0111 EF                MOV     A,R7
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1165
0113         ?C0073:
0113         ?C0071:
                                           ; SOURCE LINE # 1173
0113 900000      R     MOV     DPTR,#noiseThreshold
0116 E0                MOVX    A,@DPTR
0117 FF                MOV     R7,A
0118 900000      R     MOV     DPTR,#CapSense_centroid
011B E0                MOVX    A,@DPTR
011C FE                MOV     R6,A
011D EE                MOV     A,R6
011E D3                SETB    C
011F 9F                SUBB    A,R7
0120 4015              JC      ?C0074
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1175
0122 900000      R     MOV     DPTR,#CapSense_centroid
0125 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 71  

0126 FF                MOV     R7,A
0127 900000      R     MOV     DPTR,#noiseThreshold
012A E0                MOVX    A,@DPTR
012B FE                MOV     R6,A
012C C3                CLR     C
012D EF                MOV     A,R7
012E 9E                SUBB    A,R6
012F FF                MOV     R7,A
0130 900000      R     MOV     DPTR,#CapSense_centroid
0133 EF                MOV     A,R7
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1176
0135 8005              SJMP    ?C0075
0137         ?C0074:
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1179
0137 900000      R     MOV     DPTR,#CapSense_centroid
013A E4                CLR     A
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1180
013C         ?C0075:
                                           ; SOURCE LINE # 1183
013C 900000      R     MOV     DPTR,#CapSense_centroid+01H
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 900000      R     MOV     DPTR,#noiseThreshold
0144 E0                MOVX    A,@DPTR
0145 FE                MOV     R6,A
0146 C3                CLR     C
0147 EF                MOV     A,R7
0148 9E                SUBB    A,R6
0149 FF                MOV     R7,A
014A 900000      R     MOV     DPTR,#CapSense_centroid+01H
014D EF                MOV     A,R7
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1186
014F 900000      R     MOV     DPTR,#noiseThreshold
0152 E0                MOVX    A,@DPTR
0153 FF                MOV     R7,A
0154 900000      R     MOV     DPTR,#CapSense_centroid+02H
0157 E0                MOVX    A,@DPTR
0158 FE                MOV     R6,A
0159 EE                MOV     A,R6
015A D3                SETB    C
015B 9F                SUBB    A,R7
015C 4015              JC      ?C0076
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
015E 900000      R     MOV     DPTR,#CapSense_centroid+02H
0161 E0                MOVX    A,@DPTR
0162 FF                MOV     R7,A
0163 900000      R     MOV     DPTR,#noiseThreshold
0166 E0                MOVX    A,@DPTR
0167 FE                MOV     R6,A
0168 C3                CLR     C
0169 EF                MOV     A,R7
016A 9E                SUBB    A,R6
016B FF                MOV     R7,A
016C 900000      R     MOV     DPTR,#CapSense_centroid+02H
016F EF                MOV     A,R7
0170 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1189
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 72  

0171 8005              SJMP    ?C0077
0173         ?C0076:
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1192
0173 900000      R     MOV     DPTR,#CapSense_centroid+02H
0176 E4                CLR     A
0177 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1193
0178         ?C0077:
                                           ; SOURCE LINE # 1198
0178 900000      R     MOV     DPTR,#CapSense_centroid
017B E0                MOVX    A,@DPTR
017C FF                MOV     R7,A
017D AB07              MOV     R3,AR7
017F E4                CLR     A
0180 FA                MOV     R2,A
0181 F9                MOV     R1,A
0182 F8                MOV     R0,A
0183 900000      R     MOV     DPTR,#CapSense_centroid+02H
0186 E0                MOVX    A,@DPTR
0187 FF                MOV     R7,A
0188 E4                CLR     A
0189 FC                MOV     R4,A
018A FD                MOV     R5,A
018B FE                MOV     R6,A
018C C3                CLR     C
018D EF                MOV     A,R7
018E 9B                SUBB    A,R3
018F FF                MOV     R7,A
0190 EE                MOV     A,R6
0191 9A                SUBB    A,R2
0192 FE                MOV     R6,A
0193 ED                MOV     A,R5
0194 99                SUBB    A,R1
0195 FD                MOV     R5,A
0196 EC                MOV     A,R4
0197 98                SUBB    A,R0
0198 FC                MOV     R4,A
0199 900000      R     MOV     DPTR,#numerator
019C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1203
019F 900000      R     MOV     DPTR,#CapSense_centroid+01H
01A2 E0                MOVX    A,@DPTR
01A3 FF                MOV     R7,A
01A4 AB07              MOV     R3,AR7
01A6 E4                CLR     A
01A7 FA                MOV     R2,A
01A8 F9                MOV     R1,A
01A9 F8                MOV     R0,A
01AA 900000      R     MOV     DPTR,#CapSense_centroid
01AD E0                MOVX    A,@DPTR
01AE FF                MOV     R7,A
01AF E4                CLR     A
01B0 FC                MOV     R4,A
01B1 FD                MOV     R5,A
01B2 FE                MOV     R6,A
01B3 EF                MOV     A,R7
01B4 2B                ADD     A,R3
01B5 FB                MOV     R3,A
01B6 EE                MOV     A,R6
01B7 3A                ADDC    A,R2
01B8 FA                MOV     R2,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 73  

01B9 ED                MOV     A,R5
01BA 39                ADDC    A,R1
01BB F9                MOV     R1,A
01BC EC                MOV     A,R4
01BD 38                ADDC    A,R0
01BE F8                MOV     R0,A
01BF 900000      R     MOV     DPTR,#CapSense_centroid+02H
01C2 E0                MOVX    A,@DPTR
01C3 FF                MOV     R7,A
01C4 E4                CLR     A
01C5 FC                MOV     R4,A
01C6 FD                MOV     R5,A
01C7 FE                MOV     R6,A
01C8 EB                MOV     A,R3
01C9 2F                ADD     A,R7
01CA FF                MOV     R7,A
01CB EA                MOV     A,R2
01CC 3E                ADDC    A,R6
01CD FE                MOV     R6,A
01CE E9                MOV     A,R1
01CF 3D                ADDC    A,R5
01D0 FD                MOV     R5,A
01D1 E8                MOV     A,R0
01D2 3C                ADDC    A,R4
01D3 FC                MOV     R4,A
01D4 900000      R     MOV     DPTR,#denominator
01D7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1206
01DA 900000      R     MOV     DPTR,#numerator
01DD E0                MOVX    A,@DPTR
01DE FC                MOV     R4,A
01DF A3                INC     DPTR
01E0 E0                MOVX    A,@DPTR
01E1 FD                MOV     R5,A
01E2 A3                INC     DPTR
01E3 E0                MOVX    A,@DPTR
01E4 FE                MOV     R6,A
01E5 A3                INC     DPTR
01E6 E0                MOVX    A,@DPTR
01E7 FF                MOV     R7,A
01E8 7808              MOV     R0,#08H
01EA 120000      E     LCALL   ?C?LSHL
01ED 900000      R     MOV     DPTR,#denominator
01F0 E0                MOVX    A,@DPTR
01F1 F8                MOV     R0,A
01F2 A3                INC     DPTR
01F3 E0                MOVX    A,@DPTR
01F4 F9                MOV     R1,A
01F5 A3                INC     DPTR
01F6 E0                MOVX    A,@DPTR
01F7 FA                MOV     R2,A
01F8 A3                INC     DPTR
01F9 E0                MOVX    A,@DPTR
01FA FB                MOV     R3,A
01FB 120000      E     LCALL   ?C?SLDIV
01FE C004              PUSH    AR4
0200 C005              PUSH    AR5
0202 C006              PUSH    AR6
0204 C007              PUSH    AR7
0206 900000      R     MOV     DPTR,#maximum
0209 E0                MOVX    A,@DPTR
020A FF                MOV     R7,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 74  

020B 7E00              MOV     R6,#00H
020D EF                MOV     A,R7
020E 7F00              MOV     R7,#00H
0210 FE                MOV     R6,A
0211 AB07              MOV     R3,AR7
0213 AA06              MOV     R2,AR6
0215 E4                CLR     A
0216 F9                MOV     R1,A
0217 F8                MOV     R0,A
0218 D007              POP     AR7
021A D006              POP     AR6
021C D005              POP     AR5
021E D004              POP     AR4
0220 EF                MOV     A,R7
0221 2B                ADD     A,R3
0222 FF                MOV     R7,A
0223 EE                MOV     A,R6
0224 3A                ADDC    A,R2
0225 FE                MOV     R6,A
0226 ED                MOV     A,R5
0227 39                ADDC    A,R1
0228 FD                MOV     R5,A
0229 EC                MOV     A,R4
022A 38                ADDC    A,R0
022B FC                MOV     R4,A
022C 900000      R     MOV     DPTR,#denominator
022F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1216
0232 900000      R     MOV     DPTR,#denominator
0235 E0                MOVX    A,@DPTR
0236 F8                MOV     R0,A
0237 A3                INC     DPTR
0238 E0                MOVX    A,@DPTR
0239 F9                MOV     R1,A
023A A3                INC     DPTR
023B E0                MOVX    A,@DPTR
023C FA                MOV     R2,A
023D A3                INC     DPTR
023E E0                MOVX    A,@DPTR
023F FB                MOV     R3,A
0240 900000      R     MOV     DPTR,#resolution
0243 E0                MOVX    A,@DPTR
0244 FE                MOV     R6,A
0245 A3                INC     DPTR
0246 E0                MOVX    A,@DPTR
0247 FF                MOV     R7,A
0248 E4                CLR     A
0249 FC                MOV     R4,A
024A FD                MOV     R5,A
024B 120000      E     LCALL   ?C?LMUL
024E 900000      R     MOV     DPTR,#denominator
0251 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1219
0254 900000      R     MOV     DPTR,#denominator
0257 E0                MOVX    A,@DPTR
0258 FC                MOV     R4,A
0259 A3                INC     DPTR
025A E0                MOVX    A,@DPTR
025B FD                MOV     R5,A
025C A3                INC     DPTR
025D E0                MOVX    A,@DPTR
025E FE                MOV     R6,A
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 75  

025F A3                INC     DPTR
0260 E0                MOVX    A,@DPTR
0261 FF                MOV     R7,A
0262 EF                MOV     A,R7
0263 2400              ADD     A,#00H
0265 FF                MOV     R7,A
0266 EE                MOV     A,R6
0267 347F              ADDC    A,#07FH
0269 FE                MOV     R6,A
026A ED                MOV     A,R5
026B 3400              ADDC    A,#00H
026D FD                MOV     R5,A
026E EC                MOV     A,R4
026F 3400              ADDC    A,#00H
0271 FC                MOV     R4,A
0272 7810              MOV     R0,#010H
0274 120000      E     LCALL   ?C?ULSHR
0277 900000      R     MOV     DPTR,#position
027A EF                MOV     A,R7
027B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
027C 900000      R     MOV     DPTR,#position
027F E0                MOVX    A,@DPTR
0280 FF                MOV     R7,A
                                           ; SOURCE LINE # 1222
0281         ?C0078:
0281 22                RET     
             ; FUNCTION _CapSense_CalcCentroid (END)

             ; FUNCTION _CapSense_GetCentroidPos (BEGIN)
                                           ; SOURCE LINE # 1263
0000 900000      R     MOV     DPTR,#widget
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1264
                                           ; SOURCE LINE # 1284
0005 900000      R     MOV     DPTR,#widget
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 900000      R     MOV     DPTR,#CapSense_rawDataIndex
000E 93                MOVC    A,@A+DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#offset
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
0015 900000      R     MOV     DPTR,#widget
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 900000      R     MOV     DPTR,#CapSense_numberOfSensors
001E 93                MOVC    A,@A+DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#count
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1303
0025 900000      R     MOV     DPTR,#offset
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#count
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 76  

002D E0                MOVX    A,@DPTR
002E FD                MOV     R5,A
002F 900000      R     MOV     DPTR,#widget
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 7400        R     MOV     A,#LOW CapSense_fingerThreshold
0036 2E                ADD     A,R6
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH CapSense_fingerThreshold
003C F583              MOV     DPH,A
003E E0                MOVX    A,@DPTR
003F FB                MOV     R3,A
0040 120000      R     LCALL   _CapSense_FindMaximum
0043 900000      R     MOV     DPTR,#maximum
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1306
0048 900000      R     MOV     DPTR,#maximum
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 64FF              XRL     A,#0FFH
0050 6054              JZ      ?C0079
                                           ; SOURCE LINE # 1307
                                           ; SOURCE LINE # 1309
0052 900000      R     MOV     DPTR,#widget
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 25E0              ADD     A,ACC
005A 2400        R     ADD     A,#LOW CapSense_centroidMult
005C F582              MOV     DPL,A
005E E4                CLR     A
005F 3400        R     ADDC    A,#HIGH CapSense_centroidMult
0061 F583              MOV     DPH,A
0063 E4                CLR     A
0064 93                MOVC    A,@A+DPTR
0065 FE                MOV     R6,A
0066 7401              MOV     A,#01H
0068 93                MOVC    A,@A+DPTR
0069 FF                MOV     R7,A
006A 900000      R     MOV     DPTR,#?_CapSense_CalcCentroid?BYTE+03H
006D EE                MOV     A,R6
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
0072 900000      R     MOV     DPTR,#maximum
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 900000      R     MOV     DPTR,#offset
007A E0                MOVX    A,@DPTR
007B FD                MOV     R5,A
007C 900000      R     MOV     DPTR,#count
007F E0                MOVX    A,@DPTR
0080 FB                MOV     R3,A
0081 900000      R     MOV     DPTR,#widget
0084 E0                MOVX    A,@DPTR
0085 FE                MOV     R6,A
0086 7400        R     MOV     A,#LOW CapSense_noiseThreshold
0088 2E                ADD     A,R6
C51 COMPILER V9.03   CAPSENSE_CSHL                                                         04/04/2015 14:09:07 PAGE 77  

0089 F582              MOV     DPL,A
008B E4                CLR     A
008C 3400        R     ADDC    A,#HIGH CapSense_noiseThreshold
008E F583              MOV     DPH,A
0090 E0                MOVX    A,@DPTR
0091 FE                MOV     R6,A
0092 900000      R     MOV     DPTR,#?_CapSense_CalcCentroid?BYTE+05H
0095 EE                MOV     A,R6
0096 F0                MOVX    @DPTR,A
0097 120000      R     LCALL   _CapSense_CalcCentroid
009A 7E00              MOV     R6,#00H
009C 900000      R     MOV     DPTR,#position
009F EE                MOV     A,R6
00A0 F0                MOVX    @DPTR,A
00A1 A3                INC     DPTR
00A2 EF                MOV     A,R7
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1409
00A4 800A              SJMP    ?C0080
00A6         ?C0079:
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1413
00A6 900000      R     MOV     DPTR,#position
00A9 74FF              MOV     A,#0FFH
00AB F0                MOVX    @DPTR,A
00AC A3                INC     DPTR
00AD 74FF              MOV     A,#0FFH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1422
00B0         ?C0080:
                                           ; SOURCE LINE # 1425
00B0 900000      R     MOV     DPTR,#position
00B3 E0                MOVX    A,@DPTR
00B4 FE                MOV     R6,A
00B5 A3                INC     DPTR
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
                                           ; SOURCE LINE # 1426
00B8         ?C0081:
00B8 22                RET     
             ; FUNCTION _CapSense_GetCentroidPos (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3146    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =    134    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
