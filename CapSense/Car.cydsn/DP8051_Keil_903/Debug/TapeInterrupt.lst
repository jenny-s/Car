C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE TAPEINTERRUPT
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\TapeInterrupt.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\TapeInterrupt.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\TapeInterrupt.lst) CD DB NOIP
                    - OT(0) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\TapeInterrupt.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: TapeInterrupt.c  
   3          * Version 1.60
   4          *
   5          *  Description:
   6          *   API for controlling the state of an interrupt.
   7          *
   8          *
   9          *  Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          
  19          #include <CYDEVICE.H>
  20          #include <CYDEVICE_TRM.H>
  21          #include <CYLIB.H>
  22          #include <TapeInterrupt.H>
  23          
  24          
  25          /*******************************************************************************
  26          *  Place your includes, defines and code here 
  27          ********************************************************************************/
  28          /* `#START TapeInterrupt_intc` */
  29          
  30          /* `#END` */
  31          
  32          
  33          /*******************************************************************************
  34          * Function Name: TapeInterrupt_Start
  35          ********************************************************************************
  36          * Summary:
  37          *  Set up the interrupt and enable it.
  38          *
  39          * Parameters:  
  40          *   void.
  41          *
  42          *
  43          * Return:
  44          *   void.
  45          *
  46          *******************************************************************************/
  47          void TapeInterrupt_Start(void)
  48          {
  49   1          /* For all we know the interrupt is active. */
  50   1          TapeInterrupt_Disable();
  51   1      
  52   1          /* Set the ISR to point to the TapeInterrupt Interrupt. */
  53   1          TapeInterrupt_SetVector(TapeInterrupt_Interrupt);
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 2   

  54   1      
  55   1          /* Set the priority. */
  56   1          TapeInterrupt_SetPriority(TapeInterrupt_INTC_PRIOR_NUMBER);
  57   1      
  58   1          /* Enable it. */
  59   1          TapeInterrupt_Enable();
  60   1      }
  61          
  62          /*******************************************************************************
  63          * Function Name: TapeInterrupt_StartEx
  64          ********************************************************************************
  65          * Summary:
  66          *  Set up the interrupt and enable it.
  67          *
  68          * Parameters:  
  69          *   address: Address of the ISR to set in the interrupt vector table.
  70          *
  71          *
  72          * Return:
  73          *   void.
  74          *
  75          *******************************************************************************/
  76          void TapeInterrupt_StartEx(cyisraddress address)
  77          {
  78   1          /* For all we know the interrupt is active. */
  79   1          TapeInterrupt_Disable();
  80   1      
  81   1          /* Set the ISR to point to the TapeInterrupt Interrupt. */
  82   1          TapeInterrupt_SetVector(address);
  83   1      
  84   1          /* Set the priority. */
  85   1          TapeInterrupt_SetPriority(TapeInterrupt_INTC_PRIOR_NUMBER);
  86   1      
  87   1          /* Enable it. */
  88   1          TapeInterrupt_Enable();
  89   1      }
  90          
  91          /*******************************************************************************
  92          * Function Name: TapeInterrupt_Stop
  93          ********************************************************************************
  94          * Summary:
  95          *   Disables and removes the interrupt.
  96          *
  97          * Parameters:  
  98          *
  99          *
 100          * Return:
 101          *   void.
 102          *
 103          *******************************************************************************/
 104          void TapeInterrupt_Stop(void) 
 105          {
 106   1          /* Disable this interrupt. */
 107   1          TapeInterrupt_Disable();
 108   1      }
 109          
 110          /*******************************************************************************
 111          * Function Name: TapeInterrupt_Interrupt
 112          ********************************************************************************
 113          * Summary:
 114          *   The default Interrupt Service Routine for TapeInterrupt.
 115          *
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 3   

 116          *   Add custom code between the coments to keep the next version of this file
 117          *   from over writting your code.
 118          *
 119          *
 120          *
 121          * Parameters:  
 122          *
 123          *
 124          * Return:
 125          *   void.
 126          *
 127          *******************************************************************************/
 128          CY_ISR(TapeInterrupt_Interrupt)
 129          {
 130   1          /*  Place your Interrupt code here. */
 131   1          /* `#START TapeInterrupt_Interrupt` */
 132   1      
 133   1          /* `#END` */
 134   1      
 135   1          /* PSoC3 ES1, ES2 RTC ISR PATCH  */ 
 136   1          #if(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3)
 137   1              #if((CYDEV_CHIP_REVISION_USED <= CYDEV_CHIP_REVISION_3A_ES2) && (TapeInterrupt__ES2_PATCH ))      
                          TapeInterrupt_ISR_PATCH();
                      #endif
 140   1          #endif
 141   1      }
 142          
 143          /*******************************************************************************
 144          * Function Name: TapeInterrupt_SetVector
 145          ********************************************************************************
 146          * Summary:
 147          *   Change the ISR vector for the Interrupt. Note calling TapeInterrupt_Start
 148          *   will override any effect this method would have had. To set the vector before
 149          *   the component has been started use TapeInterrupt_StartEx instead.
 150          *
 151          *
 152          * Parameters:
 153          *   address: Address of the ISR to set in the interrupt vector table.
 154          *
 155          *
 156          * Return:
 157          *   void.
 158          *
 159          *
 160          *******************************************************************************/
 161          void TapeInterrupt_SetVector(cyisraddress address) 
 162          {
 163   1          CY_SET_REG16(TapeInterrupt_INTC_VECTOR, (uint16) address);
 164   1      }
 165          
 166          /*******************************************************************************
 167          * Function Name: TapeInterrupt_GetVector
 168          ********************************************************************************
 169          * Summary:
 170          *   Gets the "address" of the current ISR vector for the Interrupt.
 171          *
 172          *
 173          * Parameters:
 174          *   void.
 175          *
 176          *
 177          * Return:
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 4   

 178          *   Address of the ISR in the interrupt vector table.
 179          *
 180          *
 181          *******************************************************************************/
 182          cyisraddress TapeInterrupt_GetVector(void) 
 183          {
 184   1          return (cyisraddress) CY_GET_REG16(TapeInterrupt_INTC_VECTOR);
 185   1      }
 186          
 187          /*******************************************************************************
 188          * Function Name: TapeInterrupt_SetPriority
 189          ********************************************************************************
 190          * Summary:
 191          *   Sets the Priority of the Interrupt. Note calling TapeInterrupt_Start
 192          *   or TapeInterrupt_StartEx will override any effect this method would have had. 
 193          *       This method should only be called after TapeInterrupt_Start or 
 194          *       TapeInterrupt_StartEx has been called. To set the initial
 195          *       priority for the component use the cydwr file in the tool.
 196          *
 197          *
 198          * Parameters:
 199          *   priority: Priority of the interrupt. 0 - 7, 0 being the highest.
 200          *
 201          *
 202          * Return:
 203          *   void.
 204          *
 205          *
 206          *******************************************************************************/
 207          void TapeInterrupt_SetPriority(uint8 priority) 
 208          {
 209   1          *TapeInterrupt_INTC_PRIOR = priority << 5;
 210   1      }
 211          
 212          /*******************************************************************************
 213          * Function Name: TapeInterrupt_GetPriority
 214          ********************************************************************************
 215          * Summary:
 216          *   Gets the Priority of the Interrupt.
 217          *
 218          *
 219          * Parameters:
 220          *   void.
 221          *
 222          *
 223          * Return:
 224          *   Priority of the interrupt. 0 - 7, 0 being the highest.
 225          *
 226          *
 227          *******************************************************************************/
 228          uint8 TapeInterrupt_GetPriority(void) 
 229          {
 230   1          uint8 priority;
 231   1      
 232   1      
 233   1          priority = *TapeInterrupt_INTC_PRIOR >> 5;
 234   1      
 235   1          return priority;
 236   1      }
 237          
 238          /*******************************************************************************
 239          * Function Name: TapeInterrupt_Enable
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 5   

 240          ********************************************************************************
 241          * Summary:
 242          *   Enables the interrupt.
 243          *
 244          *
 245          * Parameters:
 246          *   void.
 247          *
 248          *
 249          * Return:
 250          *   void.
 251          *
 252          *
 253          *******************************************************************************/
 254          void TapeInterrupt_Enable(void) 
 255          {
 256   1          /* Enable the general interrupt. */
 257   1          *TapeInterrupt_INTC_SET_EN = TapeInterrupt__INTC_MASK;
 258   1      }
 259          
 260          /*******************************************************************************
 261          * Function Name: TapeInterrupt_GetState
 262          ********************************************************************************
 263          * Summary:
 264          *   Gets the state (enabled, disabled) of the Interrupt.
 265          *
 266          *
 267          * Parameters:
 268          *   void.
 269          *
 270          *
 271          * Return:
 272          *   1 if enabled, 0 if disabled.
 273          *
 274          *
 275          *******************************************************************************/
 276          uint8 TapeInterrupt_GetState(void) 
 277          {
 278   1          /* Get the state of the general interrupt. */
 279   1          return (*TapeInterrupt_INTC_SET_EN & TapeInterrupt__INTC_MASK) ? 1:0;
 280   1      }
 281          
 282          /*******************************************************************************
 283          * Function Name: TapeInterrupt_Disable
 284          ********************************************************************************
 285          * Summary:
 286          *   Disables the Interrupt.
 287          *
 288          *
 289          * Parameters:
 290          *   void.
 291          *
 292          *
 293          * Return:
 294          *   void.
 295          *
 296          *
 297          *******************************************************************************/
 298          void TapeInterrupt_Disable(void) 
 299          {
 300   1          /* Disable the general interrupt. */
 301   1          *TapeInterrupt_INTC_CLR_EN = TapeInterrupt__INTC_MASK;
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 6   

 302   1      }
 303          
 304          /*******************************************************************************
 305          * Function Name: TapeInterrupt_SetPending
 306          ********************************************************************************
 307          * Summary:
 308          *   Causes the Interrupt to enter the pending state, a software method of
 309          *   generating the interrupt.
 310          *
 311          *
 312          * Parameters:
 313          *   void.
 314          *
 315          *
 316          * Return:
 317          *   void.
 318          *
 319          *
 320          *******************************************************************************/
 321          void TapeInterrupt_SetPending(void) 
 322          {
 323   1          *TapeInterrupt_INTC_SET_PD = TapeInterrupt__INTC_MASK;
 324   1      }
 325          
 326          /*******************************************************************************
 327          * Function Name: TapeInterrupt_ClearPending
 328          ********************************************************************************
 329          * Summary:
 330          *   Clears a pending interrupt.
 331          *
 332          * Parameters:
 333          *   void.
 334          *
 335          *
 336          * Return:
 337          *   void.
 338          *
 339          *
 340          *******************************************************************************/
 341          void TapeInterrupt_ClearPending(void) 
 342          {
 343   1          *TapeInterrupt_INTC_CLR_PD = TapeInterrupt__INTC_MASK;
 344   1      }
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION TapeInterrupt_Start (BEGIN)
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 50
0000 120000      R     LCALL   TapeInterrupt_Disable
                                           ; SOURCE LINE # 53
0003 7E00        R     MOV     R6,#HIGH TapeInterrupt_Interrupt
0005 7F00        R     MOV     R7,#LOW TapeInterrupt_Interrupt
0007 120000      R     LCALL   _TapeInterrupt_SetVector
                                           ; SOURCE LINE # 56
000A 7F07              MOV     R7,#07H
000C 120000      R     LCALL   _TapeInterrupt_SetPriority
                                           ; SOURCE LINE # 59
000F 120000      R     LCALL   TapeInterrupt_Enable
                                           ; SOURCE LINE # 60
0012         ?C0001:
0012 22                RET     
             ; FUNCTION TapeInterrupt_Start (END)

             ; FUNCTION _TapeInterrupt_StartEx (BEGIN)
                                           ; SOURCE LINE # 76
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 79
0008 120000      R     LCALL   TapeInterrupt_Disable
                                           ; SOURCE LINE # 82
000B 900000      R     MOV     DPTR,#address
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _TapeInterrupt_SetVector
                                           ; SOURCE LINE # 85
0016 7F07              MOV     R7,#07H
0018 120000      R     LCALL   _TapeInterrupt_SetPriority
                                           ; SOURCE LINE # 88
001B 120000      R     LCALL   TapeInterrupt_Enable
                                           ; SOURCE LINE # 89
001E         ?C0002:
001E 22                RET     
             ; FUNCTION _TapeInterrupt_StartEx (END)

             ; FUNCTION TapeInterrupt_Stop (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
0000 120000      R     LCALL   TapeInterrupt_Disable
                                           ; SOURCE LINE # 108
0003         ?C0003:
0003 22                RET     
             ; FUNCTION TapeInterrupt_Stop (END)

             ; FUNCTION TapeInterrupt_Interrupt (BEGIN)
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 8   

                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 141
0000         ?C0004:
0000 32                RETI    
             ; FUNCTION TapeInterrupt_Interrupt (END)

             ; FUNCTION _TapeInterrupt_SetVector (BEGIN)
                                           ; SOURCE LINE # 161
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0008 7B02              MOV     R3,#02H
000A 7A44              MOV     R2,#044H
000C 7908              MOV     R1,#08H
000E 900000      R     MOV     DPTR,#address
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 AD07              MOV     R5,AR7
0018 AC06              MOV     R4,AR6
001A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 164
001D         ?C0005:
001D 22                RET     
             ; FUNCTION _TapeInterrupt_SetVector (END)

             ; FUNCTION TapeInterrupt_GetVector (BEGIN)
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 7908              MOV     R1,#08H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 185
0009         ?C0006:
0009 22                RET     
             ; FUNCTION TapeInterrupt_GetVector (END)

             ; FUNCTION _TapeInterrupt_SetPriority (BEGIN)
                                           ; SOURCE LINE # 207
0000 900000      R     MOV     DPTR,#priority
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
0005 900000      R     MOV     DPTR,#priority
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 33                RLC     A
000D 54E0              ANL     A,#0E0H
000F FF                MOV     R7,A
0010 904484            MOV     DPTR,#04484H
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 9   

0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0015         ?C0007:
0015 22                RET     
             ; FUNCTION _TapeInterrupt_SetPriority (END)

             ; FUNCTION TapeInterrupt_GetPriority (BEGIN)
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 233
0000 904484            MOV     DPTR,#04484H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 C4                SWAP    A
0007 13                RRC     A
0008 5407              ANL     A,#07H
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#priority
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
0010 900000      R     MOV     DPTR,#priority
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 236
0015         ?C0008:
0015 22                RET     
             ; FUNCTION TapeInterrupt_GetPriority (END)

             ; FUNCTION TapeInterrupt_Enable (BEGIN)
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 257
0000 9044C0            MOV     DPTR,#044C0H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0006         ?C0009:
0006 22                RET     
             ; FUNCTION TapeInterrupt_Enable (END)

             ; FUNCTION TapeInterrupt_GetState (BEGIN)
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 279
0000 9044C0            MOV     DPTR,#044C0H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5410              ANL     A,#010H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6004              JZ      ?C0010
000F 7F01              MOV     R7,#01H
0011 8002              SJMP    ?C0011
0013         ?C0010:
0013 7F00              MOV     R7,#00H
0015         ?C0011:
C51 COMPILER V9.03   TAPEINTERRUPT                                                         04/04/2015 14:09:20 PAGE 10  

                                           ; SOURCE LINE # 280
0015         ?C0012:
0015 22                RET     
             ; FUNCTION TapeInterrupt_GetState (END)

             ; FUNCTION TapeInterrupt_Disable (BEGIN)
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 301
0000 9044C8            MOV     DPTR,#044C8H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
0006         ?C0013:
0006 22                RET     
             ; FUNCTION TapeInterrupt_Disable (END)

             ; FUNCTION TapeInterrupt_SetPending (BEGIN)
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
0000 9044D0            MOV     DPTR,#044D0H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0006         ?C0014:
0006 22                RET     
             ; FUNCTION TapeInterrupt_SetPending (END)

             ; FUNCTION TapeInterrupt_ClearPending (BEGIN)
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
0000 9044D8            MOV     DPTR,#044D8H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 344
0006         ?C0015:
0006 22                RET     
             ; FUNCTION TapeInterrupt_ClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    189    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
