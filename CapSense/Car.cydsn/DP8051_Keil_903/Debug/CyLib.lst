C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYLIB
OBJECT MODULE PLACED IN .\DP8051_Keil_903\Debug\CyLib.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\CyLib.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_903\Debug\CyLib.lst) CD DB NOIP OT(0) INCDIR(Ge
                    -nerated_Source\PSoC3) OJ(.\DP8051_Keil_903\Debug\CyLib.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyLib.c
   3          * Version 3.10
   4          *
   5          *  Description:
   6          *   Provides system API for the clocking, interrupts and watchdog timer.
   7          *
   8          *  Note:
   9          *   Documentation of the API's in this file is located in the
  10          *   System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "CyLib.h"
  20          
  21          uint8 CYXDATA CyResetStatus;
  22          
  23          uint32 cydelay_freq_hz  = BCLK__BUS_CLK__HZ;
  24          uint32 cydelay_freq_khz = (BCLK__BUS_CLK__HZ + 999u) / 1000u;
  25          uint8  cydelay_freq_mhz = (uint8)((BCLK__BUS_CLK__HZ + 999999u) / 1000000u);
  26          uint32 cydelay_32k_ms   = 32768 * ((BCLK__BUS_CLK__HZ + 999u) / 1000u);
  27          
  28          /* Function Prototypes */
  29          uint8 CyUSB_PowerOnCheck(void)  ;
  30          void CyIMO_SetTrimValue(uint8 freq) ;
  31          void CyBusClk_Internal_SetDivider(uint16 divider);
  32          
  33          
  34          /*******************************************************************************
  35          * Function Name: CyPLL_OUT_Start
  36          ********************************************************************************
  37          *
  38          * Summary:
  39          *   Enables the PLL.  Optionally waits for it to become stable.
  40          *   Waits at least 250 us or until it is detected that the PLL is stable.
  41          *
  42          * Parameters:
  43          *   wait:
  44          *    0: Return immediately after configuration
  45          *    1: Wait for PLL lock or timeout.
  46          *
  47          * Return:
  48          *   Status
  49          *    CYRET_SUCCESS - Completed successfully
  50          *    CYRET_TIMEOUT - Timeout occurred without detecting a stable clock.
  51          *     If the input source of the clock is jittery, then the lock indication
  52          *     may not occur.  However, after the timeout has expired the generated PLL
  53          *     clock can still be used.
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 2   

  54          *
  55          * Side Effects:
  56          *  If wait is enabled: This function wses the Fast Time Wheel to time the wait.
  57          *  Any other use of the Fast Time Wheel will be stopped during the period of
  58          *  this function and then restored. This function also uses the 100 KHz ILO.
  59          *  If not enabled, this function will enable the 100 KHz ILO for the period of
  60          *  this function.
  61          *
  62          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
  63          *  Once Per Second interrupt may be made by interrupt routines during the period
  64          *  of this function execution. The current operation of the ILO, Central Time
  65          *  Wheel and Once Per Second interrupt are maintained during the operation of
  66          *  this function provided the reading of the Power Manager Interrupt Status
  67          *  Register is only done using the CyPmReadStatus() function.
  68          *
  69          *******************************************************************************/
  70          cystatus CyPLL_OUT_Start(uint8 wait) 
  71          {
  72   1          cystatus status = CYRET_SUCCESS;
  73   1      
  74   1          uint8 iloEnableState;
  75   1          uint8 pmTwCfg0;
  76   1          uint8 pmTwCfg2;
  77   1      
  78   1      
  79   1          /* Enables the PLL circuit  */
  80   1          CY_CLK_PLL_CFG0_REG |= CY_CLK_PLL_ENABLE;
  81   1      
  82   1          if(wait != 0)
  83   1          {
  84   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
  85   2              iloEnableState = SLOWCLK_ILO_CR0;
  86   2              pmTwCfg0 = CY_PM_TW_CFG0_REG;
  87   2              pmTwCfg2 = CY_PM_TW_CFG2_REG;
  88   2      
  89   2              CyPmFtwSetInterval(CY_CLK_PLL_FTW_INTERVAL);
  90   2      
  91   2              status = CYRET_TIMEOUT;
  92   2      
  93   2      
  94   2              while(CyPmReadStatus(CY_PM_FTW_INT) != CY_PM_FTW_INT)
  95   2              {
  96   3                  /* Wait for the interrupt status */
  97   3                  if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
  98   3                  {
  99   4                      if(0u != (CY_CLK_PLL_SR_REG & CY_CLK_PLL_LOCK_STATUS))
 100   4                      {
 101   5                          status = CYRET_SUCCESS;
 102   5                          break;
 103   5                      }
 104   4                  }
 105   3              }
 106   2      
 107   2      
 108   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
 109   2              if(0u == (iloEnableState & ILO_CONTROL_100KHZ_ON))
 110   2              {
 111   3                  CyILO_Stop100K();
 112   3              }
 113   2              CY_PM_TW_CFG0_REG = pmTwCfg0;
 114   2              CY_PM_TW_CFG2_REG = pmTwCfg2;
 115   2          }
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 3   

 116   1      
 117   1          return(status);
 118   1      }
 119          
 120          
 121          /*******************************************************************************
 122          * Function Name: CyPLL_OUT_Stop
 123          ********************************************************************************
 124          *
 125          * Summary:
 126          *  Disables the PLL.
 127          *
 128          * Parameters:
 129          *  None
 130          *
 131          * Return:
 132          *  None
 133          *
 134          *******************************************************************************/
 135          void CyPLL_OUT_Stop(void) 
 136          {
 137   1          CY_CLK_PLL_CFG0_REG &= ~CY_CLK_PLL_ENABLE;
 138   1      }
 139          
 140          
 141          /*******************************************************************************
 142          * Function Name: CyPLL_OUT_SetPQ
 143          ********************************************************************************
 144          *
 145          * Summary:
 146          *  Sets the P and Q dividers and the charge pump current.
 147          *  The Frequency Out will be P/Q * Frequency In.
 148          *  The PLL must be disabled before calling this function.
 149          *
 150          * Parameters:
 151          *  uint8 P:
 152          *   Valid range [8 - 255].
 153          *
 154          *  uint8 Q:
 155          *   Valid range [1 - 16]. Input Frequency / Q must be in range of 1 to 3 MHz.
 156          
 157          *  uint8 current:
 158          *   Valid range [1 - 7]. Charge pump current in uA. Refer to the device TRM and
 159          *   datasheet for more information.
 160          *
 161          * Return:
 162          *  None
 163          *
 164          * Side Effects:
 165          *  If as result of this function execution the CPU clock frequency is increased
 166          *  then the number of clock cycles the cache will wait before it samples data
 167          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 168          *  with appropriate parameter. It can be optionally called if CPU clock
 169          *  frequency is lowered in order to improve CPU performance.
 170          *  See CyFlash_SetWaitCycles() description for more information.
 171          *
 172          *******************************************************************************/
 173          void CyPLL_OUT_SetPQ(uint8 P, uint8 Q, uint8 current) 
 174          {
 175   1          /* Halt CPU in debug mode if PLL is enabled */
 176   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 177   1      
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 4   

 178   1          /* Halt CPU in debug mode if P divider is less than required */
 179   1          CYASSERT(P >= CY_CLK_PLL_MIN_P_VALUE);
 180   1      
 181   1          /* Halt CPU in debug mode if Q divider is out of range */
 182   1          CYASSERT((Q <= CY_CLK_PLL_MAX_Q_VALUE) && (Q >= CY_CLK_PLL_MIN_Q_VALUE));
 183   1      
 184   1          /* Halt CPU in debug mode if pump current is out of range */
 185   1          CYASSERT((current >= CY_CLK_PLL_MIN_CUR_VALUE) && (current <= CY_CLK_PLL_MAX_CUR_VALUE));
 186   1      
 187   1      
 188   1          /* Set new values */
 189   1          CY_CLK_PLL_P_REG = P;
 190   1          CY_CLK_PLL_Q_REG = Q - 1;
 191   1          CY_CLK_PLL_CFG1_REG = (CY_CLK_PLL_CFG1_REG & CY_CLK_PLL_CURRENT_MASK) |
 192   1                                  ((current - 1) << CY_CLK_PLL_CURRENT_POSITION);
 193   1      }
 194          
 195          
 196          /*******************************************************************************
 197          * Function Name: CyPLL_OUT_SetSource
 198          ********************************************************************************
 199          *
 200          * Summary:
 201          *  Sets the input clock source to the PLL. The PLL must be disabled before
 202          *  calling this function.
 203          *
 204          * Parameters:
 205          *   source: One of the three available PLL clock sources
 206          *            0 :        IMO
 207          *            1 :        MHz Crystal
 208          *            2 :        DSI
 209          *
 210          * Return:
 211          *  None
 212          *
 213          * Side Effects:
 214          *  If as result of this function execution the CPU clock frequency is increased
 215          *  then the number of clock cycles the cache will wait before it samples data
 216          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 217          *  with appropriate parameter. It can be optionally called if CPU clock
 218          *  frequency is lowered in order to improve CPU performance.
 219          *  See CyFlash_SetWaitCycles() description for more information.
 220          *
 221          *******************************************************************************/
 222          void CyPLL_OUT_SetSource(uint8 source) 
 223          {
 224   1          /* Halt CPU in debug mode if PLL is enabled */
 225   1          CYASSERT(0u == (CY_CLK_PLL_CFG0_REG & CY_CLK_PLL_ENABLE));
 226   1      
 227   1          switch(source)
 228   1          {
 229   2              case CY_PLL_SOURCE_IMO:
 230   2              case CY_PLL_SOURCE_XTAL:
 231   2              case CY_PLL_SOURCE_DSI:
 232   2                  CLKDIST_CR = ((CLKDIST_CR & CLOCK_CONTROL_DIST_MASK) | source);
 233   2              break;
 234   2      
 235   2              default:
 236   2                  CYASSERT(0);
 237   2              break;
 238   2          }
 239   1      }
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 5   

 240          
 241          
 242          /*******************************************************************************
 243          * Function Name: CyIMO_Start
 244          ********************************************************************************
 245          *
 246          * Summary:
 247          *  Enables the IMO. Optionally waits at least 6 us for it to settle.
 248          *
 249          * Parameters:
 250          *  uint8 wait:
 251          *   0: Return immediately after configuration
 252          *   1: Wait for at least 6us for the IMO to settle.
 253          *
 254          * Return:
 255          *  None
 256          *
 257          * Side Effects:
 258          *  If wait is enabled: This function wses the Fast Time Wheel to time the wait.
 259          *  Any other use of the Fast Time Wheel will be stopped during the period of
 260          *  this function and then restored. This function also uses the 100 KHz ILO.
 261          *  If not enabled, this function will enable the 100 KHz ILO for the period of
 262          *  this function.
 263          *
 264          *  No changes to the setup of the ILO, Fast Time Wheel, Central Time Wheel or
 265          *  Once Per Second interrupt may be made by interrupt routines during the period
 266          *  of this function execution. The current operation of the ILO, Central Time
 267          *  Wheel and Once Per Second interrupt are maintained during the operation of
 268          *  this function provided the reading of the Power Manager Interrupt Status
 269          *  Register is only done using the CyPmReadStatus() function.
 270          *
 271          *******************************************************************************/
 272          void CyIMO_Start(uint8 wait) 
 273          {
 274   1          uint8 pm_tw_cfg2_state;
 275   1          uint8 pm_tw_cfg0_state;
 276   1          uint8 ilo_clock_state;
 277   1      
 278   1          /* Set the bit to enable the clock. */
 279   1          PM_ACT_CFG0 |= IMO_PM_ENABLE;
 280   1      
 281   1          /* Wait for 6 us */
 282   1          if(wait)
 283   1          {
 284   2              /* Need to turn on the 100KHz ILO if it happens to not already be running.*/
 285   2              ilo_clock_state = SLOWCLK_ILO_CR0;
 286   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
 287   2              {
 288   3                  CyILO_Start100K();
 289   3              }
 290   2      
 291   2              /* Use ILO 100 KHz */
 292   2              pm_tw_cfg2_state = PM_TW_CFG2;
 293   2              pm_tw_cfg0_state = PM_TW_CFG0;
 294   2      
 295   2              /* FTW_EN (bit 0) must be clear to change the period*/
 296   2              PM_TW_CFG2 &= FTW_CLEAR_FTW_BITS;
 297   2      
 298   2              /* Set the FTW interval of 1 100KHz ILO clocks
 299   2              Should result in status getting set at a (100/1)KHz rate*/
 300   2              PM_TW_CFG0 = 1-1;
 301   2              /* Enable FTW, but not the interrupt*/
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 6   

 302   2              PM_TW_CFG2 = FTW_ENABLE;
 303   2      
 304   2              /* Read FTW value */
 305   2              while (CyPmReadStatus(1) == 0)
 306   2              {
 307   3                  /* Wait for the interrupt status*/
 308   3              }
 309   2      
 310   2              /* Reset the clock */
 311   2              if(!(ilo_clock_state & ILO_CONTROL_100KHZ_ON))
 312   2              {
 313   3                  CyILO_Stop100K();
 314   3              }
 315   2      
 316   2              /* Restore the FTW */
 317   2              PM_TW_CFG0 = pm_tw_cfg0_state;
 318   2              PM_TW_CFG2 = pm_tw_cfg2_state;
 319   2          }
 320   1      }
 321          
 322          
 323          /*******************************************************************************
 324          * Function Name: CyIMO_Stop
 325          ********************************************************************************
 326          *
 327          * Summary:
 328          *   Disables the IMO.
 329          *
 330          * Parameters:
 331          *  None
 332          *
 333          * Return:
 334          *  None
 335          *
 336          *******************************************************************************/
 337          void CyIMO_Stop(void) 
 338          {
 339   1          /* Clear the bit to disable the clock. */
 340   1          PM_ACT_CFG0 &= ~IMO_PM_ENABLE;
 341   1      }
 342          
 343          
 344          /*******************************************************************************
 345          * Function Name: CyUSB_PowerOnCheck
 346          ********************************************************************************
 347          *
 348          * Summary:
 349          *  Returns the USB power status value. A private function to cy_boot.
 350          *
 351          * Parameters:
 352          *   None
 353          *
 354          * Return:
 355          *   uint8: one if the USB is enabled, 0 if not enabled.
 356          *
 357          *******************************************************************************/
 358          uint8 CyUSB_PowerOnCheck(void)  
 359          {
 360   1          uint8 powered_on = 0u;
 361   1      
 362   1          /* Check whether device is in Active or AltActiv and if USB is powered on */
 363   1          if((((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ACTIVE) &&
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 7   

 364   1               (CY_PM_ACT_CFG5_REG & CY_ACT_USB_ENABLED)) ||
 365   1            (((CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_MASK) == CY_PM_MODE_CSR_ALT_ACT) &&
 366   1              (CY_PM_STBY_CFG5_REG & CY_ALT_ACT_USB_ENABLED)))
 367   1          {
 368   2              powered_on = 1;
 369   2          }
 370   1      
 371   1          return (powered_on);
 372   1      }
 373          
 374          
 375          /*******************************************************************************
 376          * Function Name: CyIMO_SetTrimValue
 377          ********************************************************************************
 378          *
 379          * Summary:
 380          *  Sets the IMO factory trim values.
 381          *
 382          * Parameters:
 383          *  uint8 freq - frequency for which trims must be set
 384          *
 385          * Return:
 386          *  None
 387          *
 388          *******************************************************************************/
 389          void CyIMO_SetTrimValue(uint8 freq) 
 390          {
 391   1          uint8 usb_power_on = CyUSB_PowerOnCheck();
 392   1      
 393   1          /* If USB is powered */
 394   1          if(usb_power_on == 1)
 395   1          {
 396   2              /* Unlock USB write */
 397   2              CY_USB_CR1 &= ~CLOCK_USB_ENABLE;
 398   2          }
 399   1          switch(freq)
 400   1          {
 401   2          case CY_IMO_FREQ_3MHZ:
 402   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_3MHZ_PTR);
 403   2              break;
 404   2      
 405   2          case CY_IMO_FREQ_6MHZ:
 406   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_6MHZ_PTR);
 407   2              break;
 408   2      
 409   2          case CY_IMO_FREQ_12MHZ:
 410   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_12MHZ_PTR);
 411   2              break;
 412   2      
 413   2          case CY_IMO_FREQ_24MHZ:
 414   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_24MHZ_PTR);
 415   2              break;
 416   2      
 417   2          case CY_IMO_FREQ_48MHZ:
 418   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_MFG_CFG_IMO_TR1_PTR);
 419   2              break;
 420   2      
 421   2          /* The IMO frequencies above 48 MHz are not supported by PSoC5 */
 422   2          #if(!CY_PSOC5A)
 423   2      
 424   2              case CY_IMO_FREQ_62MHZ:
 425   2                  IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_67MHZ_PTR);
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 8   

 426   2                  break;
 427   2      
 428   2          #endif  /* (!CY_PSOC5A) */
 429   2      
 430   2          case CY_IMO_FREQ_USB:
 431   2              IMO_TR1 = CY_GET_XTND_REG8(FLSHID_CUST_TABLES_IMO_USB_PTR);
 432   2      
 433   2              /* If USB is powered */
 434   2              if(usb_power_on == 1)
 435   2              {
 436   3                  /* Lock the USB Oscillator */
 437   3                  CY_USB_CR1 |= CLOCK_USB_ENABLE;
 438   3              }
 439   2              break;
 440   2      
 441   2          default:
 442   2                  CYASSERT(0);
 443   2              break;
 444   2          }
 445   1      
 446   1      }
 447          
 448          
 449          /*******************************************************************************
 450          * Function Name: CyIMO_SetFreq
 451          ********************************************************************************
 452          *
 453          * Summary:
 454          *  Sets the frequency of the IMO. Changes may be made while the IMO is running.
 455          *
 456          * Parameters:
 457          *  freq: Frequency of IMO operation
 458          *       CY_IMO_FREQ_3MHZ  to set  3   MHz
 459          *       CY_IMO_FREQ_6MHZ  to set  6   MHz
 460          *       CY_IMO_FREQ_12MHZ to set 12   MHz
 461          *       CY_IMO_FREQ_24MHZ to set 24   MHz
 462          *       CY_IMO_FREQ_48MHZ to set 48   MHz
 463          *       CY_IMO_FREQ_62MHZ to set 62.6 MHz (unsupported by PSoC 5)
 464          *       CY_IMO_FREQ_USB   to set 24   MHz (Trimmed for USB operation)
 465          *
 466          * Return:
 467          *  None
 468          *
 469          * Side Effects:
 470          *  If as result of this function execution the CPU clock frequency is increased
 471          *  then the number of clock cycles the cache will wait before it samples data
 472          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 473          *  with appropriate parameter. It can be optionally called if CPU clock
 474          *  frequency is lowered in order to improve CPU performance.
 475          *  See CyFlash_SetWaitCycles() description for more information.
 476          *
 477          *  When the USB setting is chosen, the USB clock locking circuit is enabled.
 478          *  Otherwise this circuit is disabled. The USB block must be powered before
 479          *  selecting the USB setting.
 480          *
 481          *******************************************************************************/
 482          void CyIMO_SetFreq(uint8 freq) 
 483          {
 484   1          uint8 current_freq;
 485   1          uint8 next_freq;
 486   1      
 487   1          /***************************************************************************
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 9   

 488   1          * When changing the IMO frequency the Trim values must also be set
 489   1          * accordingly.This requires reading the current frequency. If the new
 490   1          * frequency is faster, then set the new trim and then change the frequency,
 491   1          * otherwise change the frequency and then set the new trim values.
 492   1          ***************************************************************************/
 493   1      
 494   1          current_freq = FASTCLK_IMO_CR & ~CLOCK_IMO_RANGE_CLEAR;
 495   1      
 496   1          /* Check if the requested frequency is USB. */
 497   1          next_freq = (freq == CY_IMO_FREQ_USB) ? CY_IMO_FREQ_24MHZ : freq;
 498   1      
 499   1          switch (current_freq)
 500   1          {
 501   2          case 0:
 502   2              current_freq = CY_IMO_FREQ_12MHZ;
 503   2              break;
 504   2      
 505   2          case 1:
 506   2              current_freq = CY_IMO_FREQ_6MHZ;
 507   2              break;
 508   2      
 509   2          case 2:
 510   2              current_freq = CY_IMO_FREQ_24MHZ;
 511   2              break;
 512   2      
 513   2          case 3:
 514   2              current_freq = CY_IMO_FREQ_3MHZ;
 515   2              break;
 516   2      
 517   2          case 4:
 518   2              current_freq = CY_IMO_FREQ_48MHZ;
 519   2              break;
 520   2      
 521   2          /* The IMO frequencies above 48 MHz are not supported by PSoC5 */
 522   2          #if(!CY_PSOC5A)
 523   2      
 524   2              case 5:
 525   2                  current_freq = CY_IMO_FREQ_62MHZ;
 526   2                  break;
 527   2      
 528   2          #endif  /* (!CY_PSOC5A) */
 529   2      
 530   2          default:
 531   2              CYASSERT((uint32) 0);
 532   2              break;
 533   2          }
 534   1      
 535   1          if (next_freq >= current_freq)
 536   1          {
 537   2              /* Set the new trim first */
 538   2              CyIMO_SetTrimValue(freq);
 539   2          }
 540   1      
 541   1          /* Set the usbclk_on bit when using CY_IMO_FREQ_USB, if not clear it */
 542   1          switch(freq)
 543   1          {
 544   2          case CY_IMO_FREQ_3MHZ:
 545   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) |
 546   2                  CLOCK_IMO_3MHZ_VALUE) & ~FASTCLK_IMO_USBCLK_ON_SET;
 547   2              break;
 548   2      
 549   2          case CY_IMO_FREQ_6MHZ:
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 10  

 550   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) |
 551   2                  CLOCK_IMO_6MHZ_VALUE) & ~FASTCLK_IMO_USBCLK_ON_SET;
 552   2              break;
 553   2      
 554   2          case CY_IMO_FREQ_12MHZ:
 555   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) |
 556   2                  CLOCK_IMO_12MHZ_VALUE) & ~FASTCLK_IMO_USBCLK_ON_SET;
 557   2              break;
 558   2      
 559   2          case CY_IMO_FREQ_24MHZ:
 560   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) |
 561   2                  CLOCK_IMO_24MHZ_VALUE) & ~FASTCLK_IMO_USBCLK_ON_SET;
 562   2              break;
 563   2      
 564   2          case CY_IMO_FREQ_48MHZ:
 565   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) |
 566   2                  CLOCK_IMO_48MHZ_VALUE) & ~FASTCLK_IMO_USBCLK_ON_SET;
 567   2              break;
 568   2      
 569   2          /* The IMO frequencies above 48 MHz are not supported by PSoC5 */
 570   2          #if(!CY_PSOC5A)
 571   2      
 572   2          case CY_IMO_FREQ_62MHZ:
 573   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) |
 574   2                  CLOCK_IMO_62MHZ_VALUE) & ~FASTCLK_IMO_USBCLK_ON_SET;
 575   2              break;
 576   2      
 577   2          #endif  /* (!CY_PSOC5A) */
 578   2      
 579   2          case CY_IMO_FREQ_USB:
 580   2              FASTCLK_IMO_CR = ((FASTCLK_IMO_CR & CLOCK_IMO_RANGE_CLEAR) |
 581   2                  CLOCK_IMO_24MHZ_VALUE) | FASTCLK_IMO_USBCLK_ON_SET;
 582   2              break;
 583   2      
 584   2          default:
 585   2              CYASSERT((uint32) 0);
 586   2              break;
 587   2          }
 588   1      
 589   1          /* Turn on the IMO Doubler, if switching to CY_IMO_FREQ_USB */
 590   1          if (freq == CY_IMO_FREQ_USB)
 591   1          {
 592   2              CyIMO_EnableDoubler();
 593   2          }
 594   1          else
 595   1          {
 596   2              CyIMO_DisableDoubler();
 597   2          }
 598   1      
 599   1          if (next_freq < current_freq)
 600   1          {
 601   2              /* Set the new trim after setting the frequency */
 602   2              CyIMO_SetTrimValue(freq);
 603   2          }
 604   1      }
 605          
 606          
 607          /*******************************************************************************
 608          * Function Name: CyIMO_SetSource
 609          ********************************************************************************
 610          *
 611          * Summary:
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 11  

 612          *  Sets the source of the clock output from the IMO block.
 613          *
 614          *  The output from the IMO is by default the IMO itself. Optionally the MHz
 615          *  Crystal or a DSI input can be the source of the IMO output instead.
 616          *
 617          * Parameters:
 618          *   source, CY_IMO_SOURCE_DSI to set the DSI as source.
 619          *           CY_IMO_SOURCE_XTAL to set the MHz as source.
 620          *           CY_IMO_SOURCE_IMO to set the IMO itself.
 621          *
 622          * Return:
 623          *  None
 624          *
 625          * Side Effects:
 626          *  If as result of this function execution the CPU clock frequency is increased
 627          *  then the number of clock cycles the cache will wait before it samples data
 628          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 629          *  with appropriate parameter. It can be optionally called if CPU clock
 630          *  frequency is lowered in order to improve CPU performance.
 631          *  See CyFlash_SetWaitCycles() description for more information.
 632          *
 633          *******************************************************************************/
 634          void CyIMO_SetSource(uint8 source) 
 635          {
 636   1          /* Set the xclken bit of FASTCLK_IMO_CR regigster */
 637   1          switch(source)
 638   1          {
 639   2          case CY_IMO_SOURCE_DSI:
 640   2              CLKDIST_CR &= ~CLOCK_IMO2X_XTAL;
 641   2              FASTCLK_IMO_CR |= CLOCK_IMO_IMO;
 642   2              break;
 643   2      
 644   2          case CY_IMO_SOURCE_XTAL:
 645   2              CLKDIST_CR |= CLOCK_IMO2X_XTAL;
 646   2              FASTCLK_IMO_CR |= CLOCK_IMO_IMO;
 647   2              break;
 648   2      
 649   2          case CY_IMO_SOURCE_IMO:
 650   2              FASTCLK_IMO_CR &= ~CLOCK_IMO_IMO;
 651   2              break;
 652   2      
 653   2          default:
 654   2              /* Incorrect source value */
 655   2              CYASSERT((uint32) 0);
 656   2              break;
 657   2          }
 658   1      }
 659          
 660          
 661          /*******************************************************************************
 662          * Function Name: CyIMO_EnableDoubler
 663          ********************************************************************************
 664          *
 665          * Summary:
 666          *  Enables the IMO doubler.  The 2x frequency clock is used to convert a 24 MHz
 667          *  input to a 48 MHz output for use by the USB block.
 668          *
 669          * Parameters:
 670          *  None
 671          *
 672          * Return:
 673          *  None
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 12  

 674          *
 675          *******************************************************************************/
 676          void CyIMO_EnableDoubler(void) 
 677          {
 678   1          /* Set the FASTCLK_IMO_CR_PTR regigster's 4th bit */
 679   1          FASTCLK_IMO_CR |= IMO_DOUBLER_ENABLE;
 680   1      }
 681          
 682          
 683          /*******************************************************************************
 684          * Function Name: CyIMO_DisableDoubler
 685          ********************************************************************************
 686          *
 687          * Summary:
 688          *   Disables the IMO doubler.
 689          *
 690          * Parameters:
 691          *  None
 692          *
 693          * Return:
 694          *  None
 695          *
 696          *******************************************************************************/
 697          void CyIMO_DisableDoubler(void) 
 698          {
 699   1          FASTCLK_IMO_CR &= ~IMO_DOUBLER_ENABLE;
 700   1      }
 701          
 702          
 703          /*******************************************************************************
 704          * Function Name: CyMasterClk_SetSource
 705          ********************************************************************************
 706          *
 707          * Summary:
 708          *  Sets the source of the master clock.
 709          *
 710          * Parameters:
 711          *   source: One of the four available Master clock sources.
 712          *     CY_MASTER_SOURCE_IMO
 713          *     CY_MASTER_SOURCE_PLL
 714          *     CY_MASTER_SOURCE_XTAL
 715          *     CY_MASTER_SOURCE_DSI
 716          *
 717          * Return:
 718          *  None
 719          *
 720          * Side Effects:
 721          *  The current source and the new source must both be running and stable before
 722          *  calling this function.
 723          *
 724          *  If as result of this function execution the CPU clock frequency is increased
 725          *  then the number of clock cycles the cache will wait before it samples data
 726          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 727          *  with appropriate parameter. It can be optionally called if CPU clock
 728          *  frequency is lowered in order to improve CPU performance.
 729          *  See CyFlash_SetWaitCycles() description for more information.
 730          *
 731          *******************************************************************************/
 732          void CyMasterClk_SetSource(uint8 source) 
 733          {
 734   1          uint8 master_reg_1;
 735   1      
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 13  

 736   1          #if(CY_PSOC5A)
              
                      uint8 master_reg_0;
              
                      /* Read the current setting */
                      master_reg_0 = CLKDIST_MSTR0;
              
                      /* Write a non-zero period to the master mux clock divider */
                      if (master_reg_0 == 0x00u)
                      {
                          CLKDIST_MSTR0 = 3;
                      }
              
                  #endif  /* (CY_PSOC5A) */
 750   1      
 751   1          /* Read the current setting */
 752   1          master_reg_1 = CLKDIST_MSTR1;
 753   1          CLKDIST_MSTR1 = (master_reg_1 & MASTER_CLK_SRC_CLEAR) | (source & ~MASTER_CLK_SRC_CLEAR);
 754   1      
 755   1          #if(CY_PSOC5A)
              
                      /* Restore zero period (if desired) to the master mux clock divider */
                      if (master_reg_0 == 0x00u)
                      {
                          CLKDIST_MSTR0 = 0;
                      }
              
                  #endif  /* (CY_PSOC5A) */
 764   1      }
 765          
 766          
 767          /*******************************************************************************
 768          * Function Name: CyMasterClk_SetDivider
 769          ********************************************************************************
 770          *
 771          * Summary:
 772          *  Sets the divider value used to generate Master Clock.
 773          *
 774          * Parameters:
 775          *  uint8 divider:
 776          *   Valid range [0-255]. The clock will be divided by this value + 1.
 777          *   For example to divide by 2 this parameter should be set to 1.
 778          *
 779          * Return:
 780          *  None
 781          *
 782          * Side Effects:
 783          *  If as result of this function execution the CPU clock frequency is increased
 784          *  then the number of clock cycles the cache will wait before it samples data
 785          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 786          *  with appropriate parameter. It can be optionally called if CPU clock
 787          *  frequency is lowered in order to improve CPU performance.
 788          *  See CyFlash_SetWaitCycles() description for more information.
 789          *
 790          *  When changing the Master or Bus clock divider value from div-by-n to div-by-1
 791          *  the first clock cycle output after the div-by-1 can be up to 4 ns shorter
 792          *  than the final/expected div-by-1 period.
 793          *
 794          *******************************************************************************/
 795          void CyMasterClk_SetDivider(uint8 divider) 
 796          {
 797   1          CLKDIST_MSTR0 = divider;
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 14  

 798   1      }
 799          
 800          
 801          /*******************************************************************************
 802          * Function Name: CyBusClk_Internal_SetDivider
 803          ********************************************************************************
 804          *
 805          * Summary:
 806          *  Function used by CyBusClk_SetDivider(). For internal use only.
 807          *
 808          * Parameters:
 809          *   divider: Valid range [0-65535].
 810          *   The clock will be divided by this value + 1.
 811          *   For example to divide by 2 this parameter should be set to 1.
 812          *
 813          * Return:
 814          *  None
 815          *
 816          *******************************************************************************/
 817          void CyBusClk_Internal_SetDivider(uint16 divider)
 818          {
 819   1          /* Clear all the masks (CLKDIST_AMASK, CLKDIST_DMASK) */
 820   1          CLKDIST_AMASK &= BUS_AMASK_CLEAR;
 821   1          CLKDIST_DMASK = BUS_DMASK_CLEAR;
 822   1      
 823   1          CLKDIST_BCFG2 |= CLKDIST_WRK0_MASK_SET;
 824   1      
 825   1          /* Change both bytes before we enable/start the clock. */
 826   1          CY_SET_REG16(CLKDIST_WRK0_PTR, divider);
 827   1      
 828   1          /* Load the value, set the CLKDIST_LD LOAD bit*/
 829   1          CLKDIST_LD |= CLKDIST_LD_LOAD_SET;
 830   1      }
 831          
 832          
 833          /*******************************************************************************
 834          * Function Name: CyBusClk_SetDivider
 835          ********************************************************************************
 836          *
 837          * Summary:
 838          *  Sets the divider value used to generate Bus Clock.
 839          *
 840          * Parameters:
 841          *  divider: Valid range [0-65535]. The clock will be divided by this value + 1.
 842          *  For example to divide by 2 this parameter should be set to 1.
 843          *
 844          * Return:
 845          *  None
 846          *
 847          * Side Effects:
 848          *  If as result of this function execution the CPU clock frequency is increased
 849          *  then the number of clock cycles the cache will wait before it samples data
 850          *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 851          *  with appropriate parameter. It can be optionally called if CPU clock
 852          *  frequency is lowered in order to improve CPU performance.
 853          *  See CyFlash_SetWaitCycles() description for more information.
 854          *
 855          *******************************************************************************/
 856          void CyBusClk_SetDivider(uint16 divider) 
 857          {
 858   1          uint16 current_busclk_divider;
 859   1          uint8 current_masterclk_divider;
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 15  

 860   1      
 861   1          /* Bus clock divider value */
 862   1          current_busclk_divider = CY_GET_REG16(CLKDIST_BCFG0_PTR);
 863   1      
 864   1          /* Work around to set the bus clock divider value */
 865   1          if ((divider == 0) || (current_busclk_divider == 0))
 866   1          {
 867   2              /* Save away the master clock divider value */
 868   2              current_masterclk_divider = CY_GET_REG8(CLKDIST_MSTR0_PTR);
 869   2              if (current_masterclk_divider < MASTERCLK_DIVIDER_VALUE)
 870   2              {
 871   3                  /* Set master clock divider to 7 */
 872   3                  CyMasterClk_SetDivider(MASTERCLK_DIVIDER_VALUE);
 873   3              }
 874   2      
 875   2              if (divider == 0)
 876   2              {
 877   3                  /* Set the SSS bit and the divider register desired value */
 878   3                  CLKDIST_BCFG2 |= CLKDIST_BCFG2_SSS_SET;
 879   3                  CyBusClk_Internal_SetDivider(divider);
 880   3              }
 881   2              else
 882   2              {
 883   3                  CyBusClk_Internal_SetDivider(divider);
 884   3                  CLKDIST_BCFG2 &= ~CLKDIST_BCFG2_SSS_SET;
 885   3              }
 886   2      
 887   2              /* Restore the master clock */
 888   2              CyMasterClk_SetDivider(current_masterclk_divider);
 889   2          }
 890   1          else
 891   1          {
 892   2              CyBusClk_Internal_SetDivider(divider);
 893   2          }
 894   1      }
 895          
 896          
 897          #if(CY_PSOC3)
 898          
 899              /*******************************************************************************
 900              * Function Name: CyCpuClk_SetDivider
 901              ********************************************************************************
 902              *
 903              * Summary:
 904              *  Sets the divider value used to generate the CPU Clock. Only applicable for
 905              *  PSoC 3 parts.
 906              *
 907              * Parameters:
 908              *  divider: Valid range [0-15]. The clock will be divided by this value + 1.
 909              *  For example to divide by 2 this parameter should be set to 1.
 910              *
 911              * Return:
 912              *  None
 913              *
 914              * Side Effects:
 915              *  If as result of this function execution the CPU clock frequency is increased
 916              *  then the number of clock cycles the cache will wait before it samples data
 917              *  coming back from Flash must be adjusted by calling CyFlash_SetWaitCycles()
 918              *  with appropriate parameter. It can be optionally called if CPU clock
 919              *  frequency is lowered in order to improve CPU performance.
 920              *  See CyFlash_SetWaitCycles() description for more information.
 921              *
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 16  

 922              *******************************************************************************/
 923              void CyCpuClk_SetDivider(uint8 divider) 
 924              {
 925   1                  CLKDIST_MSTR1 = (CLKDIST_MSTR1 & CLKDIST_MSTR1_DIV_CLEAR) |
 926   1                                      (divider << CLKDIST_DIV_POSITION);
 927   1          }
 928          
 929          #endif /* (CY_PSOC3) */
 930          
 931          
 932          /*******************************************************************************
 933          * Function Name: CyUsbClk_SetSource
 934          ********************************************************************************
 935          *
 936          * Summary:
 937          *  Sets the source of the USB clock.
 938          *
 939          * Parameters:
 940          *  source: One of the four available USB clock sources
 941          *             USB_CLK_IMO2X     - IMO 2x
 942          *             USB_CLK_IMO       - IMO
 943          *             USB_CLK_PLL       - PLL
 944          *             USB_CLK_DSI       - DSI
 945          *
 946          * Return:
 947          *  None
 948          *
 949          *******************************************************************************/
 950          void CyUsbClk_SetSource(uint8 source) 
 951          {
 952   1          CLKDIST_UCFG = (CLKDIST_UCFG & ~USB_CLKDIST_CONFIG_MASK) |
 953   1                              (USB_CLKDIST_CONFIG_MASK & source);
 954   1      }
 955          
 956          
 957          /*******************************************************************************
 958          * Function Name: CyILO_Start1K
 959          ********************************************************************************
 960          *
 961          * Summary:
 962          *  Enables the ILO 1 KHz oscillator.
 963          *
 964          *  Note The ILO 1 KHz oscillator is always enabled by default, regardless of the
 965          *  selection in the Clock Editor. Therefore, this API is only needed if the
 966          *  oscillator was turned off manually.
 967          *
 968          * Parameters:
 969          *  None
 970          *
 971          * Return:
 972          *  None
 973          *
 974          *******************************************************************************/
 975          void CyILO_Start1K(void) 
 976          {
 977   1          /* Set the bit 1 of ILO RS */
 978   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_1KHZ_ON;
 979   1      }
 980          
 981          
 982          /*******************************************************************************
 983          * Function Name: CyILO_Stop1K
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 17  

 984          ********************************************************************************
 985          *
 986          * Summary:
 987          *  Disables the ILO 1 KHz oscillator.
 988          *
 989          *  Note The ILO 1 KHz oscillator must be enabled if Sleep or Hibernate low power
 990          *  mode APIs are expected to be used. For more information, refer to the Power
 991          *  Management section of this document.
 992          *
 993          * Parameters:
 994          *  None
 995          *
 996          * Return:
 997          *  None
 998          *
 999          * Side Effects:
1000          *  PSoC5: Stopping the ILO 1 kHz could break the active WDT functionality.
1001          *
1002          *******************************************************************************/
1003          void CyILO_Stop1K(void) 
1004          {
1005   1          /* Clear the bit 1 of ILO RS */
1006   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_1KHZ_ON;
1007   1      }
1008          
1009          
1010          /*******************************************************************************
1011          * Function Name: CyILO_Start100K
1012          ********************************************************************************
1013          *
1014          * Summary:
1015          *  Enables the ILO 100 KHz oscillator.
1016          *
1017          * Parameters:
1018          *  None
1019          *
1020          * Return:
1021          *  None
1022          *
1023          *******************************************************************************/
1024          void CyILO_Start100K(void) 
1025          {
1026   1          /* Set the bit 2 of ILO RS */
1027   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_100KHZ_ON;
1028   1      }
1029          
1030          
1031          /*******************************************************************************
1032          * Function Name: CyILO_Stop100K
1033          ********************************************************************************
1034          *
1035          * Summary:
1036          *  Disables the ILO 100 KHz oscillator.
1037          *
1038          * Parameters:
1039          *  None
1040          *
1041          * Return:
1042          *  None
1043          *
1044          *******************************************************************************/
1045          void CyILO_Stop100K(void) 
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 18  

1046          {
1047   1          /* Clear the bit 2 of ILO RS */
1048   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_100KHZ_ON;
1049   1      }
1050          
1051          
1052          /*******************************************************************************
1053          * Function Name: CyILO_Enable33K
1054          ********************************************************************************
1055          *
1056          * Summary:
1057          *  Enables the ILO 33 KHz divider.
1058          *
1059          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator,
1060          *  so it must also be running in order to generate the 33 KHz output.
1061          *
1062          * Parameters:
1063          *  None
1064          *
1065          * Return:
1066          *  None
1067          *
1068          *******************************************************************************/
1069          void CyILO_Enable33K(void) 
1070          {
1071   1          /* Set the bit 5 of ILO RS */
1072   1          SLOWCLK_ILO_CR0 |= ILO_CONTROL_33KHZ_ON;
1073   1      }
1074          
1075          
1076          /*******************************************************************************
1077          * Function Name: CyILO_Disable33K
1078          ********************************************************************************
1079          *
1080          * Summary:
1081          *  Disables the ILO 33 KHz divider.
1082          *
1083          *  Note that the 33 KHz clock is generated from the 100 KHz oscillator, but this
1084          *  API does not disable the 100 KHz clock.
1085          *
1086          * Parameters:
1087          *  None
1088          *
1089          * Return:
1090          *  None
1091          *
1092          *******************************************************************************/
1093          void CyILO_Disable33K(void) 
1094          {
1095   1          /* Clear the bit 5 of ILO RS */
1096   1          SLOWCLK_ILO_CR0 &= ~ILO_CONTROL_33KHZ_ON;
1097   1      }
1098          
1099          
1100          /*******************************************************************************
1101          * Function Name: CyILO_SetSource
1102          ********************************************************************************
1103          *
1104          * Summary:
1105          *  Sets the source of the clock output from the ILO block.
1106          *
1107          * Parameters:
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 19  

1108          *  source: One of the three available ILO output sources
1109          *       Value        Define                Source
1110          *       0            CY_ILO_SOURCE_100K    ILO 100 KHz
1111          *       1            CY_ILO_SOURCE_33K     ILO 33 KHz
1112          *       2            CY_ILO_SOURCE_1K      ILO 1 KHz
1113          *
1114          * Return:
1115          *  None
1116          *
1117          *******************************************************************************/
1118          void CyILO_SetSource(uint8 source) 
1119          {
1120   1          CLKDIST_CR = (CLKDIST_CR & CY_ILO_SOURCE_BITS_CLEAR) |
1121   1                          ((source << 2) & ~CY_ILO_SOURCE_BITS_CLEAR);
1122   1      }
1123          
1124          
1125          /*******************************************************************************
1126          * Function Name: CyILO_SetPowerMode
1127          ********************************************************************************
1128          *
1129          * Summary:
1130          *  Sets the power mode used by the ILO during power down. Allows for lower power
1131          *  down power usage resulting in a slower startup time.
1132          *
1133          * Parameters:
1134          *  uint8 mode
1135          *   CY_ILO_FAST_START - Faster start-up, internal bias left on when powered down
1136          *   CY_ILO_SLOW_START - Slower start-up, internal bias off when powered down
1137          *
1138          * Return:
1139          *   Prevous power mode state.
1140          *
1141          *******************************************************************************/
1142          uint8 CyILO_SetPowerMode(uint8 mode) 
1143          {
1144   1          uint8 state;
1145   1      
1146   1          /* Get current state. */
1147   1          state = SLOWCLK_ILO_CR0;
1148   1      
1149   1          /* Set the the oscillator power mode. */
1150   1          if(mode != CY_ILO_FAST_START)
1151   1          {
1152   2              SLOWCLK_ILO_CR0 = (state | ILO_CONTROL_PD_MODE);
1153   2          }
1154   1          else
1155   1          {
1156   2              SLOWCLK_ILO_CR0 = (state & ~ILO_CONTROL_PD_MODE);
1157   2          }
1158   1      
1159   1          /* Return the old mode. */
1160   1          return ((state & ILO_CONTROL_PD_MODE) >> ILO_CONTROL_PD_POSITION);
1161   1      }
1162          
1163          
1164          /*******************************************************************************
1165          * Function Name: CyXTAL_32KHZ_Start
1166          ********************************************************************************
1167          *
1168          * Summary:
1169          *  Enables the 32 KHz Crystal Oscillator.
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 20  

1170          *
1171          * Parameters:
1172          *  None
1173          *
1174          * Return:
1175          *  None
1176          *
1177          *******************************************************************************/
1178          void CyXTAL_32KHZ_Start(void) 
1179          {
1180   1          volatile uint32 i;
1181   1      
1182   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1183   1          CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_STARTUP;
1184   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ~CY_CLK_XTAL32_CFG_LP_MASK) | CY_CLK_XTAL32_CFG_LP_DE
             -FAULT;
1185   1      
1186   1          #if(CY_PSOC3)
1187   1              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_PDBEN;
1188   1          #endif  /* (CY_PSOC3) */
1189   1      
1190   1          /* Enable operation of the 32K Crystal Oscillator */
1191   1          CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_EN;
1192   1      
1193   1          for (i = 1000u; i > 0u; i--)
1194   1          {
1195   2              if(0u != (CyXTAL_32KHZ_ReadStatus() & CY_XTAL32K_ANA_STAT))
1196   2              {
1197   3                  /* Ready - switch to the hign power mode */
1198   3                  (void) CyXTAL_32KHZ_SetPowerMode(0u);
1199   3      
1200   3                  break;
1201   3              }
1202   2              CyDelayUs(1u);
1203   2          }
1204   1      }
1205          
1206          
1207          /*******************************************************************************
1208          * Function Name: CyXTAL_32KHZ_Stop
1209          ********************************************************************************
1210          *
1211          * Summary:
1212          *  Disables the 32KHz Crystal Oscillator.
1213          *
1214          * Parameters:
1215          *  None
1216          *
1217          * Return:
1218          *  None
1219          *
1220          *******************************************************************************/
1221          void CyXTAL_32KHZ_Stop(void) 
1222          {
1223   1          CY_CLK_XTAL32_TST_REG  = CY_CLK_XTAL32_TST_DEFAULT;
1224   1          CY_CLK_XTAL32_TR_REG   = CY_CLK_XTAL32_TR_POWERDOWN;
1225   1          CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ~CY_CLK_XTAL32_CFG_LP_MASK) | CY_CLK_XTAL32_CFG_LP_DE
             -FAULT;
1226   1          CY_CLK_XTAL32_CR_REG &= ~(CY_CLK_XTAL32_CR_EN | CY_CLK_XTAL32_CR_LPM);
1227   1      
1228   1          #if(CY_PSOC3)
1229   1              CY_CLK_XTAL32_CR_REG &= ~CY_CLK_XTAL32_CR_PDBEN;
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 21  

1230   1          #endif  /* (CY_PSOC3) */
1231   1      }
1232          
1233          
1234          /*******************************************************************************
1235          * Function Name: CyXTAL_32KHZ_ReadStatus
1236          ********************************************************************************
1237          *
1238          * Summary:
1239          *  Returns status of the 32 KHz oscillator.
1240          *
1241          * Parameters:
1242          *  None
1243          *
1244          * Return:
1245          *  Value     Define                    Source
1246          *  20        CY_XTAL32K_ANA_STAT       Analog measurement
1247          *                                       1: Stable
1248          *                                       0: Not stable
1249          *
1250          *******************************************************************************/
1251          uint8 CyXTAL_32KHZ_ReadStatus(void) 
1252          {
1253   1          return(CY_CLK_XTAL32_CR_REG & CY_XTAL32K_ANA_STAT);
1254   1      }
1255          
1256          
1257          /*******************************************************************************
1258          * Function Name: CyXTAL_32KHZ_SetPowerMode
1259          ********************************************************************************
1260          *
1261          * Summary:
1262          *  Sets the power mode for the 32 KHz oscillator used during sleep mode.
1263          *  Allows for lower power during sleep when there are fewer sources of noise.
1264          *  During active mode the oscillator is always run in high power mode.
1265          *
1266          * Parameters:
1267          *  uint8 mode
1268          *       0: High power mode
1269          *       1: Low power mode during sleep
1270          *
1271          * Return:
1272          *  Previous power mode.
1273          *
1274          *******************************************************************************/
1275          uint8 CyXTAL_32KHZ_SetPowerMode(uint8 mode) 
1276          {
1277   1          uint8 state = (0u != (CY_CLK_XTAL32_CR_REG & CY_CLK_XTAL32_CR_LPM)) ? 1u : 0u;
1278   1      
1279   1          CY_CLK_XTAL32_TST_REG = CY_CLK_XTAL32_TST_DEFAULT;
1280   1      
1281   1          if(1u == mode)
1282   1          {
1283   2              /* Low power mode during Sleep */
1284   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_LOW_POWER;
1285   2              CyDelayUs(10u);
1286   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ~CY_CLK_XTAL32_CFG_LP_MASK) | CY_CLK_XTAL32_CFG_L
             -P_LOWPOWER;
1287   2              CyDelayUs(20u);
1288   2              CY_CLK_XTAL32_CR_REG |= CY_CLK_XTAL32_CR_LPM;
1289   2          }
1290   1          else
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 22  

1291   1          {
1292   2              /* High power mode */
1293   2              CY_CLK_XTAL32_TR_REG  = CY_CLK_XTAL32_TR_HIGH_POWER;
1294   2              CyDelayUs(10u);
1295   2              CY_CLK_XTAL32_CFG_REG = (CY_CLK_XTAL32_CFG_REG & ~CY_CLK_XTAL32_CFG_LP_MASK) | CY_CLK_XTAL32_CFG_L
             -P_DEFAULT;
1296   2              CY_CLK_XTAL32_CR_REG &= ~CY_CLK_XTAL32_CR_LPM;
1297   2          }
1298   1      
1299   1          return(state);
1300   1      }
1301          
1302          
1303          /*******************************************************************************
1304          * Function Name: CyXTAL_Start
1305          ********************************************************************************
1306          *
1307          * Summary:
1308          *  Enables the megahertz crystal.
1309          *
1310          *  PSoC3:
1311          *  Waits until the XERR bit is low (no error) for a millisecond or until the
1312          *  number of milliseconds specified by the wait parameter has expired.
1313          *
1314          *  PSoC5:
1315          *  Waits for CY_CLK_XMHZ_MIN_TIMEOUT milliseconds (or number of milliseconds
1316          *  specified by parameter if it is greater than CY_CLK_XMHZ_MIN_TIMEOUT. The
1317          *  XERR bit status is not checked.
1318          *
1319          * Parameters:
1320          *   wait: Valid range [0-255].
1321          *   This is the timeout value in milliseconds.
1322          *   The appropriate value is crystal specific.
1323          *
1324          * Return:
1325          *   CYRET_SUCCESS - Completed successfully
1326          *   CYRET_TIMEOUT - Timeout occurred without detecting a low value on XERR.
1327          *
1328          * Side Effects and Restrictions:
1329          *  If wait is enabled (non-zero wait). Uses the Fast Timewheel to time the wait.
1330          *  Any other use of the Fast Timewheel (FTW) will be stopped during the period
1331          *  of this function and then restored.
1332          *
1333          *  Uses the 100KHz ILO.  If not enabled, this function will enable the 100KHz
1334          *  ILO for the period of this function. No changes to the setup of the ILO,
1335          *  Fast Timewheel, Central Timewheel or Once Per Second interrupt may be made
1336          *  by interrupt routines during the period of this function.
1337          *
1338          *  The current operation of the ILO, Central Timewheel and Once Per Second
1339          *  interrupt are maintained during the operation of this function provided the
1340          *  reading of the Power Manager Interrupt Status Register is only done using the
1341          *  CyPmReadStatus() function.
1342          *
1343          *******************************************************************************/
1344          cystatus CyXTAL_Start(uint8 wait) 
1345          {
1346   1          cystatus status = CYRET_SUCCESS;
1347   1      
1348   1          #if(CY_PSOC5A)
                      volatile uint8  timeout = (wait < CY_CLK_XMHZ_MIN_TIMEOUT) ? CY_CLK_XMHZ_MIN_TIMEOUT : wait;
                  #else
1351   1              volatile uint8  timeout = wait;
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 23  

1352   1          #endif  /* (CY_PSOC5A) */
1353   1      
1354   1          volatile uint8 count;
1355   1          uint8 iloEnableState;
1356   1          uint8 pmTwCfg0;
1357   1          uint8 pmTwCfg2;
1358   1      
1359   1      
1360   1          /* Enables the MHz crystal oscillator circuit  */
1361   1          CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_ENABLE;
1362   1      
1363   1      
1364   1          if(wait > 0)
1365   1          {
1366   2              /* Save 100 KHz ILO, FTW interval, enable and interrupt enable */
1367   2              iloEnableState = SLOWCLK_ILO_CR0;
1368   2              pmTwCfg0 = CY_PM_TW_CFG0_REG;
1369   2              pmTwCfg2 = CY_PM_TW_CFG2_REG;
1370   2      
1371   2              /* Set 250 us interval */
1372   2              CyPmFtwSetInterval(CY_CLK_XMHZ_FTW_INTERVAL);
1373   2              status = CYRET_TIMEOUT;
1374   2      
1375   2      
1376   2              for( ; timeout > 0; timeout--)
1377   2              {
1378   3                  #if(!CY_PSOC5A)
1379   3      
1380   3                      /* Read XERR bit to clear it */
1381   3                      (void) CY_CLK_XMHZ_CSR_REG;
1382   3      
1383   3                  #endif  /* (!CY_PSOC5A) */
1384   3      
1385   3      
1386   3                  /* Wait for a millisecond - 4 x 250 us */
1387   3                  for(count = 4u; count > 0u; count--)
1388   3                  {
1389   4                      while(!(CY_PM_FTW_INT == CyPmReadStatus(CY_PM_FTW_INT)))
1390   4                      {
1391   5                          /* Wait for the FTW interrupt event */
1392   5                      }
1393   4                  }
1394   3      
1395   3      
1396   3                  #if(!CY_PSOC5A)
1397   3      
1398   3                      /*******************************************************************
1399   3                      * High output indicates oscillator failure.
1400   3                      * Only can be used after start-up interval (1 ms) is completed.
1401   3                      *******************************************************************/
1402   3                      if(0u == (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR))
1403   3                      {
1404   4                          status = CYRET_SUCCESS;
1405   4                          break;
1406   4                      }
1407   3      
1408   3                  #endif  /* (!CY_PSOC5A) */
1409   3              }
1410   2      
1411   2      
1412   2              /* Restore 100 KHz ILO, FTW interval, enable and interrupt enable */
1413   2              if(0u == (iloEnableState & ILO_CONTROL_100KHZ_ON))
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 24  

1414   2              {
1415   3                  CyILO_Stop100K();
1416   3              }
1417   2              CY_PM_TW_CFG0_REG = pmTwCfg0;
1418   2              CY_PM_TW_CFG2_REG = pmTwCfg2;
1419   2          }
1420   1      
1421   1          return(status);
1422   1      }
1423          
1424          
1425          /*******************************************************************************
1426          * Function Name: CyXTAL_Stop
1427          ********************************************************************************
1428          *
1429          * Summary:
1430          *  Disables the megahertz crystal oscillator.
1431          *
1432          * Parameters:
1433          *  None
1434          *
1435          * Return:
1436          *  None
1437          *
1438          *******************************************************************************/
1439          void CyXTAL_Stop(void) 
1440          {
1441   1          /* Disable the the oscillator. */
1442   1          FASTCLK_XMHZ_CSR &= ~XMHZ_CONTROL_ENABLE;
1443   1      }
1444          
1445          
1446          #if(!CY_PSOC5A)
1447          
1448              /*******************************************************************************
1449              * Function Name: CyXTAL_EnableErrStatus
1450              ********************************************************************************
1451              *
1452              * Summary:
1453              *  Enables the generation of the XERR status bit for the megahertz crystal.
1454              *  This function is not available for PSoC5.
1455              *
1456              * Parameters:
1457              *  None
1458              *
1459              * Return:
1460              *  None
1461              *
1462              *******************************************************************************/
1463              void CyXTAL_EnableErrStatus(void) 
1464              {
1465   1              /* If oscillator has insufficient amplitude, XERR bit will be high. */
1466   1              CY_CLK_XMHZ_CSR_REG &= ~CY_CLK_XMHZ_CSR_XFB;
1467   1          }
1468          
1469          
1470              /*******************************************************************************
1471              * Function Name: CyXTAL_DisableErrStatus
1472              ********************************************************************************
1473              *
1474              * Summary:
1475              *  Disables the generation of the XERR status bit for the megahertz crystal.
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 25  

1476              *  This function is not available for PSoC5.
1477              *
1478              * Parameters:
1479              *  None
1480              *
1481              * Return:
1482              *  None
1483              *
1484              *******************************************************************************/
1485              void CyXTAL_DisableErrStatus(void) 
1486              {
1487   1              /* If oscillator has insufficient amplitude, XERR bit will be high. */
1488   1              CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XFB;
1489   1          }
1490          
1491          
1492              /*******************************************************************************
1493              * Function Name: CyXTAL_ReadStatus
1494              ********************************************************************************
1495              *
1496              * Summary:
1497              *  Reads the XERR status bit for the megahertz crystal. This status bit is a
1498              *  sticky clear on read value. This function is not available for PSoC5.
1499              *
1500              * Parameters:
1501              *  None
1502              *
1503              * Return:
1504              *   Status
1505              *    0: No error
1506              *    1: Error
1507              *
1508              *******************************************************************************/
1509              uint8 CyXTAL_ReadStatus(void) 
1510              {
1511   1              /***************************************************************************
1512   1              * High output indicates oscillator failure. Only use this after start-up
1513   1              * interval is completed. This can be used for status and failure recovery.
1514   1              ***************************************************************************/
1515   1              return((0u != (CY_CLK_XMHZ_CSR_REG & CY_CLK_XMHZ_CSR_XERR)) ? 1u : 0u);
1516   1          }
1517          
1518          
1519              /*******************************************************************************
1520              * Function Name: CyXTAL_EnableFaultRecovery
1521              ********************************************************************************
1522              *
1523              * Summary:
1524              *  Enables the fault recovery circuit which will switch to the IMO in the case
1525              *  of a fault in the megahertz crystal circuit. The crystal must be up and
1526              *  running with the XERR bit at 0, before calling this function to prevent
1527              *  immediate fault switchover. This function is not available for PSoC5.
1528              *
1529              * Parameters:
1530              *  None
1531              *
1532              * Return:
1533              *  None
1534              *
1535              *******************************************************************************/
1536              void CyXTAL_EnableFaultRecovery(void) 
1537              {
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 26  

1538   1              CY_CLK_XMHZ_CSR_REG |= CY_CLK_XMHZ_CSR_XPROT;
1539   1          }
1540          
1541          
1542              /*******************************************************************************
1543              * Function Name: CyXTAL_DisableFaultRecovery
1544              ********************************************************************************
1545              *
1546              * Summary:
1547              *  Disables the fault recovery circuit which will switch to the IMO in the case
1548              *  of a fault in the megahertz crystal circuit. This function is not available
1549              *  for PSoC5.
1550              *
1551              * Parameters:
1552              *  None
1553              *
1554              * Return:
1555              *  None
1556              *
1557              *******************************************************************************/
1558              void CyXTAL_DisableFaultRecovery(void) 
1559              {
1560   1              CY_CLK_XMHZ_CSR_REG &= ~CY_CLK_XMHZ_CSR_XPROT;
1561   1          }
1562          
1563          #endif  /* (!CY_PSOC5A) */
1564          
1565          /*******************************************************************************
1566          * Function Name: CyXTAL_SetStartup
1567          ********************************************************************************
1568          *
1569          * Summary:
1570          *  Sets the startup settings for the crystal. Logic model outputs a frequency
1571          *  (setting + 4) MHz when enabled.
1572          *
1573          *  This is artificial as the actual frequency is determined by an attached
1574          *  external crystal.
1575          *
1576          * Parameters:
1577          *  setting: Valid range [0-31].
1578          *   Value is dependent on the frequency and quality of the crystal being used.
1579          *   Refer to the device TRM and datasheet for more information.
1580          *
1581          * Return:
1582          *  None
1583          *
1584          *******************************************************************************/
1585          void CyXTAL_SetStartup(uint8 setting) 
1586          {
1587   1          CY_CLK_XMHZ_CFG0_REG = (CY_CLK_XMHZ_CFG0_REG & ~CY_CLK_XMHZ_CFG0_XCFG_MASK) |
1588   1                                 (setting & CY_CLK_XMHZ_CFG0_XCFG_MASK);
1589   1      }
1590          
1591          
1592          #if(CY_PSOC3 || CY_PSOC5LP)
1593              /*******************************************************************************
1594              * Function Name: CyXTAL_SetFbVoltage
1595              ********************************************************************************
1596              *
1597              * Summary:
1598              *  Sets the feedback reference voltage to use for the crystal circuit.
1599              *  This function is only available for PSoC3 and PSoC 5LP.
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 27  

1600              *
1601              * Parameters:
1602              *  setting: Valid range [0-15].
1603              *  Refer to the device TRM and datasheet for more information.
1604              *
1605              * Return:
1606              *  None
1607              *
1608              *******************************************************************************/
1609              void CyXTAL_SetFbVoltage(uint8 setting) 
1610              {
1611   1              CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ~CY_CLK_XMHZ_CFG1_VREF_FB_MASK) |
1612   1                                      (setting & CY_CLK_XMHZ_CFG1_VREF_FB_MASK));
1613   1          }
1614          
1615          
1616              /*******************************************************************************
1617              * Function Name: CyXTAL_SetWdVoltage
1618              ********************************************************************************
1619              *
1620              * Summary:
1621              *  Sets the reference voltage used by the watchdog to detect a failure in the
1622              *  crystal circuit. This function is only available for PSoC3 and PSoC 5LP.
1623              *
1624              * Parameters:
1625              *  setting: Valid range [0-7].
1626              *  Refer to the device TRM and datasheet for more information.
1627              *
1628              * Return:
1629              *  None
1630              *
1631              *******************************************************************************/
1632              void CyXTAL_SetWdVoltage(uint8 setting) 
1633              {
1634   1              CY_CLK_XMHZ_CFG1_REG = ((CY_CLK_XMHZ_CFG1_REG & ~CY_CLK_XMHZ_CFG1_VREF_WD_MASK) |
1635   1                                      ((setting << 4) & CY_CLK_XMHZ_CFG1_VREF_WD_MASK));
1636   1          }
1637          
1638          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
1639          
1640          
1641          /*******************************************************************************
1642          * Function Name: CyHalt
1643          ********************************************************************************
1644          *
1645          * Summary:
1646          *  Halts the CPU.
1647          *
1648          * Parameters:
1649          *  uint8 reason: Value to be used during debugging.
1650          *
1651          * Return:
1652          *  None
1653          *
1654          *******************************************************************************/
1655          void CyHalt(uint8 reason) CYREENTRANT
1656          {
1657   1          reason = reason;
1658   1      
1659   1          #if defined (__ARMCC_VERSION)
                      __breakpoint(0x0);
                  #elif defined(__GNUC__)
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 28  

                      __asm("    bkpt    1");
                  #elif defined(__C51__)
1664   1              CYDEV_HALT_CPU;
1665   1          #endif  /* (__ARMCC_VERSION) */
1666   1      }
1667          
1668          
1669          /*******************************************************************************
1670          * Function Name: CySoftwareReset
1671          ********************************************************************************
1672          *
1673          * Summary:
1674          *  Forces a software reset of the device.
1675          *
1676          * Parameters:
1677          *  None
1678          *
1679          * Return:
1680          *  None
1681          *
1682          *******************************************************************************/
1683          void CySoftwareReset(void) 
1684          {
1685   1          /* Perform software reset */
1686   1          *RESET_CR2 = 0x1;
1687   1      }
1688          
1689          
1690          /*******************************************************************************
1691          * Function Name: CyDelay
1692          ********************************************************************************
1693          *
1694          * Summary:
1695          *  Blocks for milliseconds.
1696          *
1697          *  Note:
1698          *  CyDelay has been implemented with the instruction cache assumed enabled. When
1699          *  instruction cache is disabled on PSoC5, CyDelay will be two times larger. For
1700          *  example, with instruction cache disabled CyDelay(100) would result in about
1701          *  200 ms delay instead of 100 ms.
1702          *
1703          * Parameters:
1704          *  milliseconds: number of milliseconds to delay.
1705          *
1706          * Return:
1707          *   None
1708          *
1709          *******************************************************************************/
1710          void CyDelay(uint32 milliseconds) CYREENTRANT
1711          {
1712   1          while (milliseconds > 32768)
1713   1          {
1714   2              /***********************************************************************
1715   2              * This loop prevents overflow.At 100MHz, milliseconds * delay_freq_khz
1716   2              * overflows at about 42 seconds.
1717   2              ***********************************************************************/
1718   2              CyDelayCycles(cydelay_32k_ms);
1719   2              milliseconds -= 32768;
1720   2          }
1721   1      
1722   1          CyDelayCycles(milliseconds * cydelay_freq_khz);
1723   1      }
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 29  

1724          
1725          
1726          #if(!CY_PSOC3)
              
                  /* For PSoC3 devices function is defined in CyBootAsmKeil.a51 file */
              
                  /*******************************************************************************
                  * Function Name: CyDelayUs
                  ********************************************************************************
                  *
                  * Summary:
                  *  Blocks for microseconds.
                  *
                  *  Note:
                  *   CyDelay has been implemented with the instruction cache assumed enabled.
                  *   When instruction cache is disabled on PSoC5, CyDelayUs will be two times
                  *   larger. Ex: With instruction cache disabled CyDelayUs(100) would result
                  *   in about 200us delay instead of 100us.
                  *
                  * Parameters:
                  *  uint16 microseconds: number of microseconds to delay.
                  *
                  * Return:
                  *  None
                  *
                  * Side Effects:
                  *  CyDelayUS has been implemented with the instruction cache assumed enabled.
                  *  When instruction cache is disabled on PSoC 5, CyDelayUs will be two times
                  *  larger. For example, with instruction cache disabled CyDelayUs(100) would
                  *  result in about 200 us delay instead of 100 us.
                  *
                  *  If the bus clock frequency is a small non-integer number, the actual delay
                  *  can be up to twice as long as the nominal value. The actual delay cannot be
                  *  shorter than the nominal one.
                  *******************************************************************************/
                  void CyDelayUs(uint16 microseconds) CYREENTRANT
                  {
                      CyDelayCycles((uint32)microseconds * cydelay_freq_mhz);
                  }
              
              #endif  /* (!CY_PSOC3) */
1765          
1766          
1767          /*******************************************************************************
1768          * Function Name: CyDelayFreq
1769          ********************************************************************************
1770          *
1771          * Summary:
1772          *  Sets clock frequency for CyDelay.
1773          *
1774          * Parameters:
1775          *  freq: Frequency of bus clock in Hertz.
1776          *
1777          * Return:
1778          *  None
1779          *
1780          *******************************************************************************/
1781          void CyDelayFreq(uint32 freq) CYREENTRANT
1782          {
1783   1          if (freq != 0u)
1784   1          {
1785   2              cydelay_freq_hz = freq;
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 30  

1786   2          }
1787   1          else
1788   1          {
1789   2              cydelay_freq_hz = BCLK__BUS_CLK__HZ;
1790   2          }
1791   1      
1792   1          cydelay_freq_mhz = (uint8)((cydelay_freq_hz + 999999u) / 1000000u);
1793   1          cydelay_freq_khz = (cydelay_freq_hz + 999u) / 1000u;
1794   1          cydelay_32k_ms   = 32768 * cydelay_freq_khz;
1795   1      }
1796          
1797          
1798          /*******************************************************************************
1799          * Function Name: CyWdtStart
1800          ********************************************************************************
1801          *
1802          * Summary:
1803          *  Enables the watchdog timer.
1804          *
1805          *  The timer is configured for the specified count interval, the central
1806          *  timewheel is cleared, the setting for low power mode is configured and the
1807          *  watchdog timer is enabled.
1808          *
1809          *  Once enabled the watchdog cannot be disabled. The watchdog counts each time
1810          *  the Central Time Wheel (CTW) reaches the period specified. The watchdog must
1811          *  be cleared using the CyWdtClear() function before three ticks of the watchdog
1812          *  timer occur. The CTW is free running, so this will occur after between 2 and
1813          *  3 timer periods elapse.
1814          *
1815          *  PSoC5: The watchdog timer should not be used during sleep modes. Since the
1816          *  WDT cannot be disabled after it is enabled, the WDT timeout period can be
1817          *  set to be greater than the sleep wakeup period, then feed the dog on each
1818          *  wakeup from Sleep.
1819          *
1820          * Parameters:
1821          *  ticks: One of the four available timer periods. Once WDT enabled, the
1822             interval cannot be changed.
1823          *         CYWDT_2_TICKS     -     4 - 6     ms
1824          *         CYWDT_16_TICKS    -    32 - 48    ms
1825          *         CYWDT_128_TICKS   -   256 - 384   ms
1826          *         CYWDT_1024_TICKS  - 2.048 - 3.072 s
1827          *
1828          *  lpMode: Low power mode configuration. This parameter is ignored for PSoC 5.
1829          *          The WDT always acts as if CYWDT_LPMODE_NOCHANGE is passed.
1830          *
1831          *          CYWDT_LPMODE_NOCHANGE - No Change
1832          *          CYWDT_LPMODE_MAXINTER - Switch to longest timer mode during low power
1833          *                                 mode
1834          *          CYWDT_LPMODE_DISABLED - Disable WDT during low power mode
1835          *
1836          * Return:
1837          *  None
1838          *
1839          * Side Effects:
1840          *  PSoC5: The ILO 1 KHz must be enabled for proper WDT operation. Stopping the
1841          *  ILO 1 kHz could break the active WDT functionality.
1842          *
1843          *******************************************************************************/
1844          void CyWdtStart(uint8 ticks, uint8 lpMode) 
1845          {
1846   1          #if(CY_PSOC5A)
                      CyILO_Start1K();
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 31  

                  #endif  /* (CY_PSOC5A) */
1849   1      
1850   1          /* Set WDT interval */
1851   1          CY_WDT_CFG_REG = (CY_WDT_CFG_REG & ~CY_WDT_CFG_INTERVAL_MASK) | (ticks & CY_WDT_CFG_INTERVAL_MASK);
1852   1      
1853   1          /* Reset CTW to ensure that first watchdog period is full */
1854   1          CY_WDT_CFG_REG |= CY_WDT_CFG_CTW_RESET;
1855   1          CY_WDT_CFG_REG &= ~CY_WDT_CFG_CTW_RESET;
1856   1      
1857   1          #if(!CY_PSOC5A)
1858   1      
1859   1              /* Setting the low power mode */
1860   1              CY_WDT_CFG_REG = ((lpMode << CY_WDT_CFG_LPMODE_SHIFT) & CY_WDT_CFG_LPMODE_MASK) |
1861   1                                (CY_WDT_CFG_REG & ~CY_WDT_CFG_LPMODE_MASK);
1862   1          #else
              
                      /* To avoid warning of lpmode being unreferenced. */
                      lpMode = lpMode;
              
                  #endif  /* (!CY_PSOC5A) */
1868   1      
1869   1          /* Enables the watchdog reset */
1870   1          CY_WDT_CFG_REG |= CY_WDT_CFG_WDR_EN;
1871   1      }
1872          
1873          
1874          /*******************************************************************************
1875          * Function Name: CyWdtClear
1876          ********************************************************************************
1877          *
1878          * Summary:
1879          *  Clears (feeds) the watchdog timer.
1880          *
1881          * Parameters:
1882          *  None
1883          *
1884          * Return:
1885          *  None
1886          *
1887          *******************************************************************************/
1888          void CyWdtClear(void) 
1889          {
1890   1          #if(CY_PSOC5A)
              
                      /* PSoC5 ES1 watchdog time clear requires workaround */
                      uint8 wdtCfg = CY_WDT_CFG_REG;
                      CY_WDT_CR_REG  = CY_WDT_CR_FEED;
                      CY_WDT_CFG_REG = CY_WDT_CFG_CLEAR_ALL;
                      CY_WDT_CFG_REG = wdtCfg;
              
                  #else
1899   1      
1900   1              CY_WDT_CR_REG = CY_WDT_CR_FEED;
1901   1      
1902   1          #endif  /* (CY_PSOC5A) */
1903   1      }
1904          
1905          
1906          
1907          /*******************************************************************************
1908          * Function Name: CyVdLvDigitEnable
1909          ********************************************************************************
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 32  

1910          *
1911          * Summary:
1912          *  Enables the digital low voltage monitors to generate interrupt on Vddd
1913          *   archives specified threshold and optionally resets device.
1914          *
1915          * Parameters:
1916          *  reset: Option to reset device at a specified Vddd threshold:
1917          *           0 - Device is not reset.
1918          *           1 - Device is reset.
1919          *         This option is applicable for PSoC 3/PSoC 5LP devices only.
1920          *
1921          *  threshold: Sets the trip level for the voltage monitor.
1922          *  Values from 1.70 V to 5.45 V(for PSoC 3/PSoC 5LP) and from 2.45 V to 5.45 V
1923          *  (for PSoC 5TM) are accepted with the approximately 250 mV interval.
1924          *
1925          * Return:
1926          *  None
1927          *
1928          *******************************************************************************/
1929          void CyVdLvDigitEnable(uint8 reset, uint8 threshold) 
1930          {
1931   1          *CYINT_CLEAR |= 0x01u;
1932   1      
1933   1          #if(CY_PSOC3 || CY_PSOC5LP)
1934   1              CY_VD_PRES_CONTROL_REG &= (~CY_VD_PRESD_EN);
1935   1          #endif /*(CY_PSOC3 || CY_PSOC5LP)*/
1936   1      
1937   1          CY_VD_LVI_TRIP_REG = (threshold & CY_VD_LVI_TRIP_LVID_MASK) | (CY_VD_LVI_TRIP_REG & ~CY_VD_LVI_TRIP_LV
             -ID_MASK);
1938   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVID_EN;
1939   1      
1940   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling */
1941   1          CyDelayUs(1u);
1942   1              
1943   1              (void)CY_VD_PERSISTENT_STATUS_REG;
1944   1      
1945   1          #if(CY_PSOC3 || CY_PSOC5LP)
1946   1              if(0u != reset)
1947   1              {
1948   2                  CY_VD_PRES_CONTROL_REG |= CY_VD_PRESD_EN;
1949   2              }
1950   1              else
1951   1              {
1952   2                  CY_VD_PRES_CONTROL_REG &= (~CY_VD_PRESD_EN);
1953   2              }
1954   1          #else
                      reset = reset;
                  #endif /*(CY_PSOC3 || CY_PSOC5LP)*/
1957   1      
1958   1          *CYINT_CLR_PEND |= 0x01u;
1959   1          *CYINT_ENABLE   |= 0x01u;
1960   1      }
1961          
1962          
1963          /*******************************************************************************
1964          * Function Name: CyVdLvAnalogEnable
1965          ********************************************************************************
1966          *
1967          * Summary:
1968          *  Enables the analog low voltage monitors to generate interrupt on Vdda
1969          *   archives specified threshold and optionally resets device.
1970          *
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 33  

1971          * Parameters:
1972          *  reset: Option to reset device at a specified Vdda threshold:
1973          *           0 - Device is not reset.
1974          *           1 - Device is reset.
1975          *         This option is applicable for PSoC 3/PSoC 5LP devices only.
1976          *
1977          *  threshold: Sets the trip level for the voltage monitor.
1978          *  Values from 1.70 V to 5.45 V(for PSoC 3/PSoC 5LP) and from 2.45 V to 5.45 V
1979          *  (for PSoC 5TM) are accepted with the approximately 250 mV interval.
1980          *
1981          * Return:
1982          *  None
1983          *
1984          *******************************************************************************/
1985          void CyVdLvAnalogEnable(uint8 reset, uint8 threshold) 
1986          {
1987   1          *CYINT_CLEAR |= 0x01u;
1988   1      
1989   1          #if(CY_PSOC3 || CY_PSOC5LP)
1990   1              CY_VD_PRES_CONTROL_REG &= (~CY_VD_PRESA_EN);
1991   1          #endif /*(CY_PSOC3 || CY_PSOC5LP)*/
1992   1      
1993   1          CY_VD_LVI_TRIP_REG = (threshold << 4) | (CY_VD_LVI_TRIP_REG & 0x0F);
1994   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_LVIA_EN;
1995   1      
1996   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling */
1997   1          CyDelayUs(1u);
1998   1              
1999   1              (void)CY_VD_PERSISTENT_STATUS_REG;
2000   1      
2001   1          #if(CY_PSOC3 || CY_PSOC5LP)
2002   1              if(0u != reset)
2003   1              {
2004   2                  CY_VD_PRES_CONTROL_REG |= CY_VD_PRESA_EN;
2005   2              }
2006   1              else
2007   1              {
2008   2                  CY_VD_PRES_CONTROL_REG &= (~CY_VD_PRESA_EN);
2009   2              }
2010   1          #else
                      reset = reset;
                  #endif /*(CY_PSOC3 || CY_PSOC5LP)*/
2013   1      
2014   1          *CYINT_CLR_PEND |= 0x01u;
2015   1          *CYINT_ENABLE   |= 0x01u;
2016   1      }
2017          
2018          
2019          /*******************************************************************************
2020          * Function Name: CyVdLvDigitDisable
2021          ********************************************************************************
2022          *
2023          * Summary:
2024          *  Disables the digital low voltage monitor (interrupt and device reset are
2025          *  disabled).
2026          *
2027          * Parameters:
2028          *  None
2029          *
2030          * Return:
2031          *  None
2032          *
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 34  

2033          *******************************************************************************/
2034          void CyVdLvDigitDisable(void) 
2035          {
2036   1          CY_VD_LVI_HVI_CONTROL_REG &= (~CY_VD_LVID_EN);
2037   1      
2038   1          #if(CY_PSOC3 || CY_PSOC5LP)
2039   1              CY_VD_PRES_CONTROL_REG &= (~CY_VD_PRESD_EN);
2040   1          #endif /*(CY_PSOC3 || CY_PSOC5LP)*/
2041   1      
2042   1          while(CY_VD_PERSISTENT_STATUS_REG & 0x07u);
2043   1      
2044   1      }
2045          
2046          
2047          /*******************************************************************************
2048          * Function Name: CyVdLvAnalogDisable
2049          ********************************************************************************
2050          *
2051          * Summary:
2052          *  Disables the analog low voltage monitor
2053          *  (interrupt and device reset are disabled).
2054          *
2055          * Parameters:
2056          *  None
2057          *
2058          * Return:
2059          *  None
2060          *
2061          *******************************************************************************/
2062          void CyVdLvAnalogDisable(void) 
2063          {
2064   1          CY_VD_LVI_HVI_CONTROL_REG &= (~CY_VD_LVIA_EN);
2065   1      
2066   1          #if(CY_PSOC3 || CY_PSOC5LP)
2067   1              CY_VD_PRES_CONTROL_REG &= (~CY_VD_PRESA_EN);
2068   1          #endif /*(CY_PSOC3 || CY_PSOC5LP)*/
2069   1      
2070   1          while(CY_VD_PERSISTENT_STATUS_REG & 0x07u);
2071   1      }
2072          
2073          
2074          /*******************************************************************************
2075          * Function Name: CyVdHvAnalogEnable
2076          ********************************************************************************
2077          *
2078          * Summary:
2079          *  Enables the analog high voltage monitors to generate interrupt on
2080          *  Vdda archives 5.75 V threshold and optionally resets device.
2081          *
2082          * Parameters:
2083          *  None
2084          *
2085          * Return:
2086          *  None
2087          *
2088          *******************************************************************************/
2089          void CyVdHvAnalogEnable(void) 
2090          {
2091   1          *CYINT_CLEAR |= 0x01u;
2092   1      
2093   1          #if(CY_PSOC3 || CY_PSOC5LP)
2094   1              CY_VD_PRES_CONTROL_REG &= (~CY_VD_PRESA_EN);
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 35  

2095   1          #endif /*(CY_PSOC3 || CY_PSOC5LP)*/
2096   1      
2097   1          CY_VD_LVI_HVI_CONTROL_REG |= CY_VD_HVIA_EN;
2098   1      
2099   1          /* Timeout to eliminate glitches on the LVI/HVI when enabling */
2100   1          CyDelayUs(1u);
2101   1              
2102   1              (void)CY_VD_PERSISTENT_STATUS_REG;
2103   1      
2104   1          *CYINT_CLR_PEND |= 0x01u;
2105   1          *CYINT_ENABLE   |= 0x01u;
2106   1      }
2107          
2108          
2109          /*******************************************************************************
2110          * Function Name: CyVdHvAnalogDisable
2111          ********************************************************************************
2112          *
2113          * Summary:
2114          *  Disables the analog low voltage monitor
2115          *  (interrupt and device reset are disabled).
2116          *
2117          * Parameters:
2118          *  None
2119          *
2120          * Return:
2121          *  None
2122          *
2123          *******************************************************************************/
2124          void CyVdHvAnalogDisable(void) 
2125          {
2126   1          CY_VD_LVI_HVI_CONTROL_REG &= (~CY_VD_HVIA_EN);
2127   1      }
2128          
2129          
2130          /*******************************************************************************
2131          * Function Name: CyVdStickyStatus
2132          ********************************************************************************
2133          *
2134          * Summary:
2135          *  Manages the Reset and Voltage Detection Status Register 0.
2136          *  This register has the interrupt status for the HVIA, LVID and LVIA.
2137          *  This hardware register clears on read.
2138          *
2139          * Parameters:
2140          *  mask: Bits in the shadow register to clear.
2141          *       Value        Define                Bit To Clear
2142          *       0x01         CY_VD_LVID            LVID
2143          *       0x02         CY_VD_LVIA            LVIA
2144          *       0x04         CY_VD_HVIA            HVIA
2145          *
2146          * Return:
2147          *  Status.  Same enumerated bit values as used for the mask parameter.
2148          *
2149          *******************************************************************************/
2150          uint8 CyVdStickyStatus(uint8 mask) 
2151          {
2152   1          uint8 status;
2153   1      
2154   1          status = CY_VD_PERSISTENT_STATUS_REG;
2155   1          CY_VD_PERSISTENT_STATUS_REG &= (~mask);
2156   1      
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 36  

2157   1          return(status);
2158   1      }
2159          
2160          
2161          /*******************************************************************************
2162          * Function Name: CyVdRealTimeStatus
2163          ********************************************************************************
2164          *
2165          * Summary:
2166          *  Returns the real time voltage detection status.
2167          *
2168          * Parameters:
2169          *  None
2170          *
2171          * Return:
2172          *  Status. Same enumerated bit values as used for the mask parameter.
2173          *
2174          *******************************************************************************/
2175          uint8 CyVdRealTimeStatus(void) 
2176          {
2177   1          uint8 interruptState;
2178   1          uint8 VdFlagsState;
2179   1      
2180   1          interruptState = CyEnterCriticalSection();
2181   1          VdFlagsState = CY_VD_RT_STATUS_REG;
2182   1          CyExitCriticalSection(interruptState);
2183   1      
2184   1          return(VdFlagsState);
2185   1      }
2186          
2187          
2188          /*******************************************************************************
2189          * Function Name: CyDisableInts
2190          ********************************************************************************
2191          *
2192          * Summary:
2193          *  Disables the interrupt enable for each interrupt.
2194          *
2195          * Parameters:
2196          *  None
2197          *
2198          * Return:
2199          *  32 bit mask of previously enabled interrupts.
2200          *
2201          *******************************************************************************/
2202          uint32 CyDisableInts(void) 
2203          {
2204   1          uint32 intState;
2205   1      
2206   1          /* Get the curreent interrutp state. */
2207   1          intState = CY_GET_REG32(CYINT_CLEAR);
2208   1      
2209   1          /* Disable all of the interrupts. */
2210   1          CY_SET_REG32(CYINT_CLEAR, 0xFFFFFFFF);
2211   1      
2212   1          return (intState);
2213   1      }
2214          
2215          
2216          /*******************************************************************************
2217          * Function Name: CyEnableInts
2218          ********************************************************************************
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 37  

2219          *
2220          * Summary:
2221          *  Enables interrupts to a given state.
2222          *
2223          * Parameters:
2224          *  uint32 mask: 32 bit mask of interrupts to enable.
2225          *
2226          * Return:
2227          *  None
2228          *
2229          *******************************************************************************/
2230          void CyEnableInts(uint32 mask) 
2231          {
2232   1          /* Set interrupts as enabled. */
2233   1          CY_SET_REG32(CYINT_ENABLE, mask);
2234   1      }
2235          
2236          #if(CY_PSOC5)
              
                  /*******************************************************************************
                  * Function Name: CyFlushCache
                  ********************************************************************************
                  * Summary:
                  *  Flushes the PSoC 5 cache by invalidating all entries.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyFlushCache() CYREENTRANT
                  {
                      /* read the register, set the flush bit, write back */
                      uint16 ctrlreg = *CACHE_CC_CTL;
                      ctrlreg |= 0x4;
                      *CACHE_CC_CTL = ctrlreg;
              
                      /* Cache is invalidated on next cycle */
              
                      /***************************************************************************
                      * Execute a few NOPs to fill the ARM CM3 pipeline with instructions so that
                      * instructions about to execute won't depend on data in the cache, and will
                      * maintain data integrity.
                      ***************************************************************************/
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                      CY_NOP;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetSysVector
                  ********************************************************************************
                  * Summary:
                  *  Sets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  * Parameters:
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 38  

                  *  number: Interrupt number, valid range [0-15].
                     address: Pointer to an interrupt service routine.
                  *
                  * Return:
                  *   The old ISR vector at this location.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address) CYREENTRANT
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CYINT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[number & CY_INT_SYS_NUMBER_MASK] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetSysVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the interrupt vector of the specified system interrupt number. System
                  *  interrupts are present only for the ARM platform. These interrupts are for
                  *  SysTick, PendSV and others.
                  *
                  * Parameters:
                  *   number: The interrupt number, valid range [0-15].
                  *
                  * Return:
                  *   Address of the ISR in the interrupt vector table.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetSysVector(uint8 number) CYREENTRANT
                  {
                      cyisraddress *ramVectorTable = *CYINT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_SYS_NUMBER_MAX);
              
                      return ramVectorTable[number & CY_INT_SYS_NUMBER_MASK];
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets the interrupt vector of the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number
                  *  address: Pointer to an interrupt service routine
                  *
                  * Return:
                  *   Previous interrupt vector value.
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 39  

                  *
                  *******************************************************************************/
                  cyisraddress CyIntSetVector(uint8 number, cyisraddress address) 
                  {
                      cyisraddress oldIsr;
                      cyisraddress *ramVectorTable = *CYINT_VECT_TABLE;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Save old Interrupt service routine. */
                      oldIsr = ramVectorTable[CYINT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)];
              
                      /* Set new Interrupt service routine. */
                      ramVectorTable[CYINT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)] = address;
              
                      return (oldIsr);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetVector
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the interrupt vector of the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number
                  *
                  * Return:
                  *  Address of the ISR in the interrupt vector table.
                  *
                  *******************************************************************************/
                  cyisraddress CyIntGetVector(uint8 number) 
                  {
                      cyisraddress *ramVectorTable = *CYINT_VECT_TABLE;
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      return ramVectorTable[CYINT_IRQ_BASE + (number & CY_INT_NUMBER_MASK)];
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetPriority
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets the Priority of the Interrupt.
                  *
                  * Parameters:
                  *  priority: Priority of the interrupt. 0 - 7, 0 being the highest.
                  *  number: The number of the interrupt, 0 - 31.
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyIntSetPriority(uint8 number, uint8 priority) 
                  {
                      CYASSERT(priority <= CY_INT_PRIORITY_MAX);
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
                      CYINT_PRIORITY[number & CY_INT_NUMBER_MASK] = (priority & CY_INT_PRIORITY_MASK)<< 5;
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 40  

                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetPriority
                  ********************************************************************************
                  *
                  * Summary:
                  *  Gets the Priority of the Interrupt.
                  *
                  * Parameters:
                  *  number: The number of the interrupt, 0 - 31.
                  *
                  * Return:
                  *  Priority of the interrupt. 0 - 7, 0 being the highest.
                  *
                  *******************************************************************************/
                  uint8 CyIntGetPriority(uint8 number) 
                  {
                      uint8 priority;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      priority = CYINT_PRIORITY[number & CY_INT_NUMBER_MASK] >> 5;
              
                      return (priority);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntEnable
                  ********************************************************************************
                  *
                  * Summary:
                  *  Enables the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyIntEnable(uint8 number) CYREENTRANT
                  {
                      reg32 * enableReg;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get a pointer to the Interrupt enable register. */
                      enableReg = CYINT_ENABLE;
              
                      /* Enable the interrupt. */
                      *enableReg = 1 << (0x1F & number);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntGetState
                  ********************************************************************************
                  *
                  * Summary:
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 41  

                  *   Gets the enable state of the specified interrupt number.
                  *
                  * Parameters:
                  *   number: Valid range [0-31].  Interrupt number.
                  *
                  * Return:
                  *   Enable status: 1 if enabled, 0 if disabled
                  *
                  *******************************************************************************/
                  uint8 CyIntGetState(uint8 number) 
                  {
                      reg32 * stateReg;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get a pointer to the Interrupt enable register. */
                      stateReg = CYINT_ENABLE;
              
                      /* Get the state of the interrupt. */
                      return (*stateReg & (1 << (0x1F & number))) ? 1:0;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntDisable
                  ********************************************************************************
                  *
                  * Summary:
                  *  Disables the specified interrupt number.
                  *
                  * Parameters:
                  *  number: Valid range [0-31].  Interrupt number.
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyIntDisable(uint8 number) CYREENTRANT
                  {
                      reg32 * clearReg;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get a pointer to the Interrupt enable register. */
                      clearReg = CYINT_CLEAR;
              
                      /* Enable the interrupt. */
                      *clearReg = 1 << (0x1F & number);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntSetPending
                  ********************************************************************************
                  *
                  * Summary:
                  *   Forces the specified interrupt number to be pending.
                  *
                  * Parameters:
                  *   number: Valid range [0-31].  Interrupt number.
                  *
                  * Return:
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 42  

                  *  None
                  *
                  *******************************************************************************/
                  void CyIntSetPending(uint8 number) 
                  {
                      reg32 * pendReg;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get a pointer to the Interrupt set pending register. */
                      pendReg = CYINT_SET_PEND;
              
                      /* Pending the interrupt. */
                      *pendReg = 1 << (0x1F & number);
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyIntClearPending
                  ********************************************************************************
                  *
                  * Summary:
                  *   Clears any pending interrupt for the specified interrupt number.
                  *
                  * Parameters:
                  *   number: Valid range [0-31].  Interrupt number.
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  void CyIntClearPending(uint8 number) 
                  {
                      reg32 * pendReg;
              
                      CYASSERT(number <= CY_INT_NUMBER_MAX);
              
                      /* Get a pointer to the Interrupt clear pending register. */
                      pendReg = CYINT_CLR_PEND;
              
                      /* Clear the pending interrupt. */
                      *pendReg = 1 << (0x1F & number);
                  }
              
              #else   /* PSoC3 */
2574          
2575              /*******************************************************************************
2576              * Function Name: CyIntSetVector
2577              ********************************************************************************
2578              *
2579              * Summary:
2580              *  Sets the interrupt vector of the specified interrupt number.
2581              *
2582              * Parameters:
2583              *  number:  Valid range [0-31].  Interrupt number
2584              *  address: Pointer to an interrupt service routine
2585              *
2586              * Return:
2587              *  Previous interrupt vector value.
2588              *
2589              *******************************************************************************/
2590              cyisraddress CyIntSetVector(uint8 number, cyisraddress address) 
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 43  

2591              {
2592   1              cyisraddress oldIsr;
2593   1      
2594   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2595   1      
2596   1              /* Save old Interrupt service routine. */
2597   1              oldIsr = (cyisraddress) \
2598   1                          CY_GET_REG16(&CYINT_VECT_TABLE[number & CY_INT_NUMBER_MASK]);
2599   1      
2600   1              /* Set new Interrupt service routine. */
2601   1              CY_SET_REG16(&CYINT_VECT_TABLE[number], (uint16) address);
2602   1      
2603   1              return (oldIsr);
2604   1          }
2605          
2606          
2607              /*******************************************************************************
2608              * Function Name: CyIntGetVector
2609              ********************************************************************************
2610              *
2611              * Summary:
2612              *  Gets the interrupt vector of the specified interrupt number.
2613              *
2614              * Parameters:
2615              *  number: Valid range [0-31].  Interrupt number
2616              *
2617              * Return:
2618              *  Address of the ISR in the interrupt vector table.
2619              *
2620              *******************************************************************************/
2621              cyisraddress CyIntGetVector(uint8 number) 
2622              {
2623   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2624   1      
2625   1              return ((cyisraddress) \
2626   1                      CY_GET_REG16(&CYINT_VECT_TABLE[number & CY_INT_NUMBER_MASK]));
2627   1          }
2628          
2629          
2630              /*******************************************************************************
2631              * Function Name: CyIntSetPriority
2632              ********************************************************************************
2633              *
2634              * Summary:
2635              *  Sets the Priority of the Interrupt.
2636              *
2637              * Parameters:
2638              *  priority: Priority of the interrupt. 0 - 7, 0 being the highest.
2639              *  number:   The number of the interrupt, 0 - 31.
2640              *
2641              * Return:
2642              *  None
2643              *
2644              *******************************************************************************/
2645              void CyIntSetPriority(uint8 number, uint8 priority) 
2646              {
2647   1              CYASSERT(priority <= CY_INT_PRIORITY_MAX);
2648   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2649   1              CYINT_PRIORITY[number & CY_INT_NUMBER_MASK] =
2650   1                          (priority & CY_INT_PRIORITY_MASK) << 5;
2651   1          }
2652          
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 44  

2653          
2654              /*******************************************************************************
2655              * Function Name: CyIntGetPriority
2656              ********************************************************************************
2657              *
2658              * Summary:
2659              *  Gets the Priority of the Interrupt.
2660              *
2661              * Parameters:
2662              *  number: The number of the interrupt, 0 - 31.
2663              *
2664              * Return:
2665              *  Priority of the interrupt. 0 - 7, 0 being the highest.
2666              *
2667              *******************************************************************************/
2668              uint8 CyIntGetPriority(uint8 number) 
2669              {
2670   1              uint8 priority;
2671   1      
2672   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2673   1      
2674   1              priority = CYINT_PRIORITY[number & CY_INT_NUMBER_MASK] >> 5;
2675   1      
2676   1              return (priority);
2677   1          }
2678          
2679          
2680              /*******************************************************************************
2681              * Function Name: CyIntEnable
2682              ********************************************************************************
2683              *
2684              * Summary:
2685              *  Enables the specified interrupt number.
2686              *
2687              * Parameters:
2688              *  number: Valid range [0-31].  Interrupt number
2689              *
2690              * Return:
2691              *  None
2692              *
2693              *******************************************************************************/
2694              void CyIntEnable(uint8 number) CYREENTRANT
2695              {
2696   1              reg8 * enableReg;
2697   1      
2698   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2699   1      
2700   1              /* Get a pointer to the Interrupt enable register. */
2701   1              enableReg = CYINT_ENABLE + ((number & CY_INT_NUMBER_MASK) >> 3);
2702   1      
2703   1              /* Enable the interrupt. */
2704   1              *enableReg = 1 << (0x07 & number);
2705   1          }
2706          
2707          
2708              /*******************************************************************************
2709              * Function Name: CyIntGetState
2710              ********************************************************************************
2711              *
2712              * Summary:
2713              *   Gets the enable state of the specified interrupt number.
2714              *
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 45  

2715              * Parameters:
2716              *   number: Valid range [0-31].  Interrupt number.
2717              *
2718              * Return:
2719              *   Enable status: 1 if enabled, 0 if disabled
2720              *
2721              *******************************************************************************/
2722              uint8 CyIntGetState(uint8 number) 
2723              {
2724   1              reg8 * stateReg;
2725   1      
2726   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2727   1              /* Get a pointer to the Interrupt enable register. */
2728   1              stateReg = CYINT_ENABLE + ((number & CY_INT_NUMBER_MASK) >> 3);
2729   1      
2730   1              /* Get the state of the interrupt. */
2731   1              return ((*stateReg & (1 << (0x07 & number))) ? 1:0);
2732   1          }
2733          
2734          
2735              /*******************************************************************************
2736              * Function Name: CyIntDisable
2737              ********************************************************************************
2738              *
2739              * Summary:
2740              *  Disables the specified interrupt number.
2741              *
2742              * Parameters:
2743              *  number: Valid range [0-31].  Interrupt number.
2744              *
2745              * Return:
2746              *  None
2747              *
2748              *******************************************************************************/
2749              void CyIntDisable(uint8 number) CYREENTRANT
2750              {
2751   1              reg8 * clearReg;
2752   1      
2753   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2754   1      
2755   1              /* Get a pointer to the Interrupt enable register. */
2756   1              clearReg = CYINT_CLEAR + ((number & CY_INT_NUMBER_MASK) >> 3);
2757   1      
2758   1              /* Disable the interrupt. */
2759   1              *clearReg = 1 << (0x07 & number);
2760   1          }
2761          
2762          
2763              /*******************************************************************************
2764              * Function Name: CyIntSetPending
2765              ********************************************************************************
2766              *
2767              * Summary:
2768              *  Forces the specified interrupt number to be pending.
2769              *
2770              * Parameters:
2771              *  number: Valid range [0-31].  Interrupt number.
2772              *
2773              * Return:
2774              *  None
2775              *
2776              *******************************************************************************/
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 46  

2777              void CyIntSetPending(uint8 number) 
2778              {
2779   1              reg8 * pendReg;
2780   1      
2781   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2782   1      
2783   1              /* Get a pointer to the Interrupt set pending register. */
2784   1              pendReg = CYINT_SET_PEND + ((number & CY_INT_NUMBER_MASK) >> 3);
2785   1      
2786   1              /* Enable the interrupt. */
2787   1              *pendReg = 1 << (0x07 & number);
2788   1          }
2789          
2790          
2791              /*******************************************************************************
2792              * Function Name: CyIntClearPending
2793              ********************************************************************************
2794              * Summary:
2795              *  Clears any pending interrupt for the specified interrupt number.
2796              *
2797              * Parameters:
2798              *  number: Valid range [0-31].  Interrupt number.
2799              *
2800              * Return:
2801              *  None
2802              *
2803              *******************************************************************************/
2804              void CyIntClearPending(uint8 number) 
2805              {
2806   1              reg8 * pendReg;
2807   1      
2808   1              CYASSERT(number <= CY_INT_NUMBER_MAX);
2809   1      
2810   1              /* Get a pointer to the Interrupt clear pending register. */
2811   1              pendReg = CYINT_CLR_PEND + ((number & CY_INT_NUMBER_MASK) >> 3);
2812   1      
2813   1              /* Enable the interrupt. */
2814   1              *pendReg = 1 << (0x07 & number);
2815   1          }
2816          
2817          #endif  /* (CY_PSOC5) */
2818          
2819          
2820          /* [] END OF FILE */
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 47  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyPLL_OUT_Start (BEGIN)
                                           ; SOURCE LINE # 70
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
000A 904220            MOV     DPTR,#04220H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
0015 900000      R     MOV     DPTR,#wait
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 606E              JZ      ?C0001
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 85
001D 904300            MOV     DPTR,#04300H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 900000      R     MOV     DPTR,#iloEnableState
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
0027 904380            MOV     DPTR,#04380H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#pmTwCfg0
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
0031 904382            MOV     DPTR,#04382H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#pmTwCfg2
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
003B 7F18              MOV     R7,#018H
003D 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 91
0040 900000      R     MOV     DPTR,#status
0043 7410              MOV     A,#010H
0045 F0                MOVX    @DPTR,A
0046         ?C0002:
                                           ; SOURCE LINE # 94
0046 7F01              MOV     R7,#01H
0048 120000      E     LCALL   _CyPmReadStatus
004B EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 48  

004C 6401              XRL     A,#01H
004E 601B              JZ      ?C0003
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 97
0050 904225            MOV     DPTR,#04225H
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 30E0ED            JNB     ACC.0,?C0002
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0059 904225            MOV     DPTR,#04225H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 30E0E4            JNB     ACC.0,?C0002
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0062 900000      R     MOV     DPTR,#status
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
0067 8002              SJMP    ?C0003
                                           ; SOURCE LINE # 103
0069         ?C0005:
                                           ; SOURCE LINE # 104
0069         ?C0004:
                                           ; SOURCE LINE # 105
0069 80DB              SJMP    ?C0002
006B         ?C0003:
                                           ; SOURCE LINE # 109
006B 900000      R     MOV     DPTR,#iloEnableState
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 20E203            JB      ACC.2,?C0006
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0074 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 112
0077         ?C0006:
                                           ; SOURCE LINE # 113
0077 900000      R     MOV     DPTR,#pmTwCfg0
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 904380            MOV     DPTR,#04380H
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0081 900000      R     MOV     DPTR,#pmTwCfg2
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 904382            MOV     DPTR,#04382H
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
008B         ?C0001:
                                           ; SOURCE LINE # 117
008B 900000      R     MOV     DPTR,#status
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
                                           ; SOURCE LINE # 118
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 49  

0090         ?C0007:
0090 22                RET     
             ; FUNCTION _CyPLL_OUT_Start (END)

             ; FUNCTION CyPLL_OUT_Stop (BEGIN)
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0000 904220            MOV     DPTR,#04220H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
000B         ?C0008:
000B 22                RET     
             ; FUNCTION CyPLL_OUT_Stop (END)

             ; FUNCTION _CyPLL_OUT_SetPQ (BEGIN)
                                           ; SOURCE LINE # 173
0000 900000      R     MOV     DPTR,#P
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#Q
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#current
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 176
000F 904220            MOV     DPTR,#04220H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 20E003            JB      ACC.0,?C0010
0018 D3                SETB    C
0019 8001              SJMP    ?C0011
001B         ?C0010:
001B C3                CLR     C
001C         ?C0011:
001C 401E              JC      ?C0009
001E 904220            MOV     DPTR,#04220H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 20E00A            JB      ACC.0,?C0012
0027 7F01              MOV     R7,#01H
0029 7E00              MOV     R6,#00H
002B 7D00              MOV     R5,#00H
002D 7C00              MOV     R4,#00H
002F 8008              SJMP    ?C0013
0031         ?C0012:
0031 7F00              MOV     R7,#00H
0033 7E00              MOV     R6,#00H
0035 7D00              MOV     R5,#00H
0037 7C00              MOV     R4,#00H
0039         ?C0013:
0039 120000      R     LCALL   _?CyHalt
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 50  

003C         ?C0009:
                                           ; SOURCE LINE # 179
003C 900000      R     MOV     DPTR,#P
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 C3                CLR     C
0043 9408              SUBB    A,#08H
0045 4003              JC      ?C0015
0047 D3                SETB    C
0048 8001              SJMP    ?C0016
004A         ?C0015:
004A C3                CLR     C
004B         ?C0016:
004B 4020              JC      ?C0014
004D 900000      R     MOV     DPTR,#P
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 C3                CLR     C
0054 9408              SUBB    A,#08H
0056 400A              JC      ?C0017
0058 7F01              MOV     R7,#01H
005A 7E00              MOV     R6,#00H
005C 7D00              MOV     R5,#00H
005E 7C00              MOV     R4,#00H
0060 8008              SJMP    ?C0018
0062         ?C0017:
0062 7F00              MOV     R7,#00H
0064 7E00              MOV     R6,#00H
0066 7D00              MOV     R5,#00H
0068 7C00              MOV     R4,#00H
006A         ?C0018:
006A 120000      R     LCALL   _?CyHalt
006D         ?C0014:
                                           ; SOURCE LINE # 182
006D 900000      R     MOV     DPTR,#Q
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 D3                SETB    C
0074 9410              SUBB    A,#010H
0076 500B              JNC     ?C0020
0078 900000      R     MOV     DPTR,#Q
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E C3                CLR     C
007F 9401              SUBB    A,#01H
0081 502B              JNC     ?C0019
0083         ?C0020:
0083 900000      R     MOV     DPTR,#Q
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 D3                SETB    C
008A 9410              SUBB    A,#010H
008C 5015              JNC     ?C0021
008E 900000      R     MOV     DPTR,#Q
0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 51  

0094 C3                CLR     C
0095 9401              SUBB    A,#01H
0097 400A              JC      ?C0021
0099 7F01              MOV     R7,#01H
009B 7E00              MOV     R6,#00H
009D 7D00              MOV     R5,#00H
009F 7C00              MOV     R4,#00H
00A1 8008              SJMP    ?C0022
00A3         ?C0021:
00A3 7F00              MOV     R7,#00H
00A5 7E00              MOV     R6,#00H
00A7 7D00              MOV     R5,#00H
00A9 7C00              MOV     R4,#00H
00AB         ?C0022:
00AB 120000      R     LCALL   _?CyHalt
00AE         ?C0019:
                                           ; SOURCE LINE # 185
00AE 900000      R     MOV     DPTR,#current
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 C3                CLR     C
00B5 9401              SUBB    A,#01H
00B7 400B              JC      ?C0024
00B9 900000      R     MOV     DPTR,#current
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE EF                MOV     A,R7
00BF D3                SETB    C
00C0 9407              SUBB    A,#07H
00C2 402B              JC      ?C0023
00C4         ?C0024:
00C4 900000      R     MOV     DPTR,#current
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 EF                MOV     A,R7
00CA C3                CLR     C
00CB 9401              SUBB    A,#01H
00CD 4015              JC      ?C0025
00CF 900000      R     MOV     DPTR,#current
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 EF                MOV     A,R7
00D5 D3                SETB    C
00D6 9407              SUBB    A,#07H
00D8 500A              JNC     ?C0025
00DA 7F01              MOV     R7,#01H
00DC 7E00              MOV     R6,#00H
00DE 7D00              MOV     R5,#00H
00E0 7C00              MOV     R4,#00H
00E2 8008              SJMP    ?C0026
00E4         ?C0025:
00E4 7F00              MOV     R7,#00H
00E6 7E00              MOV     R6,#00H
00E8 7D00              MOV     R5,#00H
00EA 7C00              MOV     R4,#00H
00EC         ?C0026:
00EC 120000      R     LCALL   _?CyHalt
00EF         ?C0023:
                                           ; SOURCE LINE # 189
00EF 900000      R     MOV     DPTR,#P
00F2 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 52  

00F3 FF                MOV     R7,A
00F4 904222            MOV     DPTR,#04222H
00F7 EF                MOV     A,R7
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
00F9 900000      R     MOV     DPTR,#Q
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
00FE EF                MOV     A,R7
00FF 14                DEC     A
0100 FF                MOV     R7,A
0101 904223            MOV     DPTR,#04223H
0104 EF                MOV     A,R7
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0106 900000      R     MOV     DPTR,#current
0109 E0                MOVX    A,@DPTR
010A FF                MOV     R7,A
010B EF                MOV     A,R7
010C 14                DEC     A
010D FF                MOV     R7,A
010E EF                MOV     A,R7
010F C4                SWAP    A
0110 54F0              ANL     A,#0F0H
0112 FF                MOV     R7,A
0113 904221            MOV     DPTR,#04221H
0116 E0                MOVX    A,@DPTR
0117 FE                MOV     R6,A
0118 EE                MOV     A,R6
0119 548F              ANL     A,#08FH
011B FE                MOV     R6,A
011C EF                MOV     A,R7
011D 4E                ORL     A,R6
011E FF                MOV     R7,A
011F 904221            MOV     DPTR,#04221H
0122 EF                MOV     A,R7
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0124         ?C0027:
0124 22                RET     
             ; FUNCTION _CyPLL_OUT_SetPQ (END)

             ; FUNCTION _CyPLL_OUT_SetSource (BEGIN)
                                           ; SOURCE LINE # 222
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 225
0005 904220            MOV     DPTR,#04220H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 20E003            JB      ACC.0,?C0029
000E D3                SETB    C
000F 8001              SJMP    ?C0030
0011         ?C0029:
0011 C3                CLR     C
0012         ?C0030:
0012 401E              JC      ?C0028
0014 904220            MOV     DPTR,#04220H
0017 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 53  

0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 20E00A            JB      ACC.0,?C0031
001D 7F01              MOV     R7,#01H
001F 7E00              MOV     R6,#00H
0021 7D00              MOV     R5,#00H
0023 7C00              MOV     R4,#00H
0025 8008              SJMP    ?C0032
0027         ?C0031:
0027 7F00              MOV     R7,#00H
0029 7E00              MOV     R6,#00H
002B 7D00              MOV     R5,#00H
002D 7C00              MOV     R4,#00H
002F         ?C0032:
002F 120000      R     LCALL   _?CyHalt
0032         ?C0028:
                                           ; SOURCE LINE # 227
0032 900000      R     MOV     DPTR,#source
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 120000      E     LCALL   ?C?CCASE
003B 0000        R     DW      ?C0036
003D 00                DB      00H
003E 0000        R     DW      ?C0036
0040 01                DB      01H
0041 0000        R     DW      ?C0036
0043 02                DB      02H
0044 0000              DW      00H
0046 0000        R     DW      ?C0037
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
0048         ?C0034:
                                           ; SOURCE LINE # 230
0048         ?C0035:
                                           ; SOURCE LINE # 231
0048         ?C0036:
                                           ; SOURCE LINE # 232
0048 904000            MOV     DPTR,#04000H
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 54FC              ANL     A,#0FCH
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#source
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 EF                MOV     A,R7
0057 4E                ORL     A,R6
0058 FF                MOV     R7,A
0059 904000            MOV     DPTR,#04000H
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
005E 22                RET     
                                           ; SOURCE LINE # 235
005F         ?C0037:
                                           ; SOURCE LINE # 236
005F 7F00              MOV     R7,#00H
0061 120000      R     LCALL   _?CyHalt
0064         ?C0038:
                                           ; SOURCE LINE # 237
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 54  

                                           ; SOURCE LINE # 238
0064         ?C0033:
                                           ; SOURCE LINE # 239
0064         ?C0039:
0064 22                RET     
             ; FUNCTION _CyPLL_OUT_SetSource (END)

             ; FUNCTION _CyIMO_Start (BEGIN)
                                           ; SOURCE LINE # 272
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 279
0005 9043A0            MOV     DPTR,#043A0H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4410              ORL     A,#010H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
0010 900000      R     MOV     DPTR,#wait
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 6068              JZ      ?C0045
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 285
0018 904300            MOV     DPTR,#04300H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#ilo_clock_state
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0022 900000      R     MOV     DPTR,#ilo_clock_state
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 20E203            JB      ACC.2,?C0041
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
002B 120000      R     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 289
002E         ?C0041:
                                           ; SOURCE LINE # 292
002E 904382            MOV     DPTR,#04382H
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
0038 904380            MOV     DPTR,#04380H
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#pm_tw_cfg0_state
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 55  

0042 904382            MOV     DPTR,#04382H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 54FC              ANL     A,#0FCH
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
004D 904380            MOV     DPTR,#04380H
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
0052 904382            MOV     DPTR,#04382H
0055 7401              MOV     A,#01H
0057 F0                MOVX    @DPTR,A
0058         ?C0042:
                                           ; SOURCE LINE # 305
0058 7F01              MOV     R7,#01H
005A 120000      E     LCALL   _CyPmReadStatus
005D EF                MOV     A,R7
005E 60F8              JZ      ?C0042
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 308
0060         ?C0043:
                                           ; SOURCE LINE # 311
0060 900000      R     MOV     DPTR,#ilo_clock_state
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 20E203            JB      ACC.2,?C0044
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0069 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 314
006C         ?C0044:
                                           ; SOURCE LINE # 317
006C 900000      R     MOV     DPTR,#pm_tw_cfg0_state
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 904380            MOV     DPTR,#04380H
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0076 900000      R     MOV     DPTR,#pm_tw_cfg2_state
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 904382            MOV     DPTR,#04382H
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
0080         ?C0040:
                                           ; SOURCE LINE # 320
0080         ?C0045:
0080 22                RET     
             ; FUNCTION _CyIMO_Start (END)

             ; FUNCTION CyIMO_Stop (BEGIN)
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 340
0000 9043A0            MOV     DPTR,#043A0H
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 56  

0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
000B         ?C0046:
000B 22                RET     
             ; FUNCTION CyIMO_Stop (END)

             ; FUNCTION CyUSB_PowerOnCheck (BEGIN)
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
0000 900000      R     MOV     DPTR,#powered_on
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
0005 904393            MOV     DPTR,#04393H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 700F              JNZ     ?C0049
0014 9043A5            MOV     DPTR,#043A5H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 5401              ANL     A,#01H
001C FF                MOV     R7,A
001D 7E00              MOV     R6,#00H
001F EF                MOV     A,R7
0020 4E                ORL     A,R6
0021 7020              JNZ     ?C0048
0023         ?C0049:
0023 904393            MOV     DPTR,#04393H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5407              ANL     A,#07H
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E EF                MOV     A,R7
002F 6401              XRL     A,#01H
0031 4E                ORL     A,R6
0032 7015              JNZ     ?C0047
0034 9043B5            MOV     DPTR,#043B5H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 5401              ANL     A,#01H
003C FF                MOV     R7,A
003D 7E00              MOV     R6,#00H
003F EF                MOV     A,R7
0040 4E                ORL     A,R6
0041 6006              JZ      ?C0047
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 57  

0043         ?C0048:
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
0043 900000      R     MOV     DPTR,#powered_on
0046 7401              MOV     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0049         ?C0047:
                                           ; SOURCE LINE # 371
0049 900000      R     MOV     DPTR,#powered_on
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
                                           ; SOURCE LINE # 372
004E         ?C0050:
004E 22                RET     
             ; FUNCTION CyUSB_PowerOnCheck (END)

             ; FUNCTION _CyIMO_SetTrimValue (BEGIN)
                                           ; SOURCE LINE # 389
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
0005 120000      R     LCALL   CyUSB_PowerOnCheck
0008 900000      R     MOV     DPTR,#usb_power_on
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
000D 900000      R     MOV     DPTR,#usb_power_on
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 B4010B            CJNE    A,#01H,?C0051
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 397
0016 906009            MOV     DPTR,#06009H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FD              ANL     A,#0FDH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
0021         ?C0051:
                                           ; SOURCE LINE # 399
0021 900000      R     MOV     DPTR,#freq
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 120000      E     LCALL   ?C?CCASE
002A 0000        R     DW      ?C0053
002C 00                DB      00H
002D 0000        R     DW      ?C0054
002F 01                DB      01H
0030 0000        R     DW      ?C0055
0032 02                DB      02H
0033 0000        R     DW      ?C0056
0035 03                DB      03H
0036 0000        R     DW      ?C0057
0038 04                DB      04H
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 58  

0039 0000        R     DW      ?C0058
003B 05                DB      05H
003C 0000        R     DW      ?C0059
003E 08                DB      08H
003F 0000              DW      00H
0041 0000        R     DW      ?C0061
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0043         ?C0053:
                                           ; SOURCE LINE # 402
0043 7B0C              MOV     R3,#0CH
0045 7A01              MOV     R2,#01H
0047 7908              MOV     R1,#08H
0049 120000      E     LCALL   _cyread8
004C 9046A1            MOV     DPTR,#046A1H
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0051 22                RET     
                                           ; SOURCE LINE # 405
0052         ?C0054:
                                           ; SOURCE LINE # 406
0052 7B0C              MOV     R3,#0CH
0054 7A01              MOV     R2,#01H
0056 7909              MOV     R1,#09H
0058 120000      E     LCALL   _cyread8
005B 9046A1            MOV     DPTR,#046A1H
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
0060 22                RET     
                                           ; SOURCE LINE # 409
0061         ?C0055:
                                           ; SOURCE LINE # 410
0061 7B0C              MOV     R3,#0CH
0063 7A01              MOV     R2,#01H
0065 790A              MOV     R1,#0AH
0067 120000      E     LCALL   _cyread8
006A 9046A1            MOV     DPTR,#046A1H
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
006F 22                RET     
                                           ; SOURCE LINE # 413
0070         ?C0056:
                                           ; SOURCE LINE # 414
0070 7B0C              MOV     R3,#0CH
0072 7A01              MOV     R2,#01H
0074 790B              MOV     R1,#0BH
0076 120000      E     LCALL   _cyread8
0079 9046A1            MOV     DPTR,#046A1H
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
007E 22                RET     
                                           ; SOURCE LINE # 417
007F         ?C0057:
                                           ; SOURCE LINE # 418
007F 7B0C              MOV     R3,#0CH
0081 7A01              MOV     R2,#01H
0083 7989              MOV     R1,#089H
0085 120000      E     LCALL   _cyread8
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 59  

0088 9046A1            MOV     DPTR,#046A1H
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
008D 22                RET     
                                           ; SOURCE LINE # 424
008E         ?C0058:
                                           ; SOURCE LINE # 425
008E 7B0C              MOV     R3,#0CH
0090 7A01              MOV     R2,#01H
0092 790C              MOV     R1,#0CH
0094 120000      E     LCALL   _cyread8
0097 9046A1            MOV     DPTR,#046A1H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
009C 22                RET     
                                           ; SOURCE LINE # 430
009D         ?C0059:
                                           ; SOURCE LINE # 431
009D 7B0C              MOV     R3,#0CH
009F 7A01              MOV     R2,#01H
00A1 790F              MOV     R1,#0FH
00A3 120000      E     LCALL   _cyread8
00A6 9046A1            MOV     DPTR,#046A1H
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
00AB 900000      R     MOV     DPTR,#usb_power_on
00AE E0                MOVX    A,@DPTR
00AF FF                MOV     R7,A
00B0 EF                MOV     A,R7
00B1 B40111            CJNE    A,#01H,?C0063
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 437
00B4 906009            MOV     DPTR,#06009H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 4402              ORL     A,#02H
00BC FF                MOV     R7,A
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
00BF         ?C0060:
                                           ; SOURCE LINE # 439
00BF 22                RET     
                                           ; SOURCE LINE # 441
00C0         ?C0061:
                                           ; SOURCE LINE # 442
00C0 7F00              MOV     R7,#00H
00C2 120000      R     LCALL   _?CyHalt
00C5         ?C0062:
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
00C5         ?C0052:
                                           ; SOURCE LINE # 446
00C5         ?C0063:
00C5 22                RET     
             ; FUNCTION _CyIMO_SetTrimValue (END)

             ; FUNCTION _CyIMO_SetFreq (BEGIN)
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 60  

                                           ; SOURCE LINE # 482
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 494
0005 904200            MOV     DPTR,#04200H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#current_freq
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0013 900000      R     MOV     DPTR,#freq
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 B40804            CJNE    A,#08H,?C0064
001C 7F03              MOV     R7,#03H
001E 8005              SJMP    ?C0065
0020         ?C0064:
0020 900000      R     MOV     DPTR,#freq
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025         ?C0065:
0025 900000      R     MOV     DPTR,#next_freq
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
002A 900000      R     MOV     DPTR,#current_freq
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 120000      E     LCALL   ?C?CCASE
0033 0000        R     DW      ?C0067
0035 00                DB      00H
0036 0000        R     DW      ?C0068
0038 01                DB      01H
0039 0000        R     DW      ?C0069
003B 02                DB      02H
003C 0000        R     DW      ?C0070
003E 03                DB      03H
003F 0000        R     DW      ?C0071
0041 04                DB      04H
0042 0000        R     DW      ?C0072
0044 05                DB      05H
0045 0000              DW      00H
0047 0000        R     DW      ?C0073
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
0049         ?C0067:
                                           ; SOURCE LINE # 502
0049 900000      R     MOV     DPTR,#current_freq
004C 7402              MOV     A,#02H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 503
004F 802C              SJMP    ?C0066
                                           ; SOURCE LINE # 505
0051         ?C0068:
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 61  

                                           ; SOURCE LINE # 506
0051 900000      R     MOV     DPTR,#current_freq
0054 7401              MOV     A,#01H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
0057 8024              SJMP    ?C0066
                                           ; SOURCE LINE # 509
0059         ?C0069:
                                           ; SOURCE LINE # 510
0059 900000      R     MOV     DPTR,#current_freq
005C 7403              MOV     A,#03H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
005F 801C              SJMP    ?C0066
                                           ; SOURCE LINE # 513
0061         ?C0070:
                                           ; SOURCE LINE # 514
0061 900000      R     MOV     DPTR,#current_freq
0064 E4                CLR     A
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0066 8015              SJMP    ?C0066
                                           ; SOURCE LINE # 517
0068         ?C0071:
                                           ; SOURCE LINE # 518
0068 900000      R     MOV     DPTR,#current_freq
006B 7404              MOV     A,#04H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
006E 800D              SJMP    ?C0066
                                           ; SOURCE LINE # 524
0070         ?C0072:
                                           ; SOURCE LINE # 525
0070 900000      R     MOV     DPTR,#current_freq
0073 7405              MOV     A,#05H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0076 8005              SJMP    ?C0066
                                           ; SOURCE LINE # 530
0078         ?C0073:
                                           ; SOURCE LINE # 531
0078 7F00              MOV     R7,#00H
007A 120000      R     LCALL   _?CyHalt
007D         ?C0074:
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
007D         ?C0066:
                                           ; SOURCE LINE # 535
007D 900000      R     MOV     DPTR,#current_freq
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 900000      R     MOV     DPTR,#next_freq
0085 E0                MOVX    A,@DPTR
0086 FE                MOV     R6,A
0087 EE                MOV     A,R6
0088 C3                CLR     C
0089 9F                SUBB    A,R7
008A 4008              JC      ?C0075
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 538
008C 900000      R     MOV     DPTR,#freq
008F E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 62  

0090 FF                MOV     R7,A
0091 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 539
0094         ?C0075:
                                           ; SOURCE LINE # 542
0094 900000      R     MOV     DPTR,#freq
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 120000      E     LCALL   ?C?CCASE
009D 0000        R     DW      ?C0077
009F 00                DB      00H
00A0 0000        R     DW      ?C0078
00A2 01                DB      01H
00A3 0000        R     DW      ?C0079
00A5 02                DB      02H
00A6 0000        R     DW      ?C0080
00A8 03                DB      03H
00A9 0000        R     DW      ?C0081
00AB 04                DB      04H
00AC 0000        R     DW      ?C0082
00AE 05                DB      05H
00AF 0000        R     DW      ?C0083
00B1 08                DB      08H
00B2 0000              DW      00H
00B4 0000        R     DW      ?C0084
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
00B6         ?C0077:
                                           ; SOURCE LINE # 545
00B6 904200            MOV     DPTR,#04200H
00B9 E0                MOVX    A,@DPTR
00BA FF                MOV     R7,A
00BB EF                MOV     A,R7
00BC 54F8              ANL     A,#0F8H
00BE FF                MOV     R7,A
00BF EF                MOV     A,R7
00C0 4403              ORL     A,#03H
00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 54BF              ANL     A,#0BFH
00C6 FF                MOV     R7,A
00C7 904200            MOV     DPTR,#04200H
00CA EF                MOV     A,R7
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 547
00CC 020000      R     LJMP    ?C0076
                                           ; SOURCE LINE # 549
00CF         ?C0078:
                                           ; SOURCE LINE # 550
00CF 904200            MOV     DPTR,#04200H
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 EF                MOV     A,R7
00D5 54F8              ANL     A,#0F8H
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 4401              ORL     A,#01H
00DB FF                MOV     R7,A
00DC EF                MOV     A,R7
00DD 54BF              ANL     A,#0BFH
00DF FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 63  

00E0 904200            MOV     DPTR,#04200H
00E3 EF                MOV     A,R7
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
00E5 806E              SJMP    ?C0076
                                           ; SOURCE LINE # 554
00E7         ?C0079:
                                           ; SOURCE LINE # 555
00E7 904200            MOV     DPTR,#04200H
00EA E0                MOVX    A,@DPTR
00EB FF                MOV     R7,A
00EC EF                MOV     A,R7
00ED 54B8              ANL     A,#0B8H
00EF FF                MOV     R7,A
00F0 EF                MOV     A,R7
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
00F2 8061              SJMP    ?C0076
                                           ; SOURCE LINE # 559
00F4         ?C0080:
                                           ; SOURCE LINE # 560
00F4 904200            MOV     DPTR,#04200H
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9 EF                MOV     A,R7
00FA 54F8              ANL     A,#0F8H
00FC FF                MOV     R7,A
00FD EF                MOV     A,R7
00FE 4402              ORL     A,#02H
0100 FF                MOV     R7,A
0101 EF                MOV     A,R7
0102 54BF              ANL     A,#0BFH
0104 FF                MOV     R7,A
0105 904200            MOV     DPTR,#04200H
0108 EF                MOV     A,R7
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
010A 8049              SJMP    ?C0076
                                           ; SOURCE LINE # 564
010C         ?C0081:
                                           ; SOURCE LINE # 565
010C 904200            MOV     DPTR,#04200H
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 EF                MOV     A,R7
0112 54F8              ANL     A,#0F8H
0114 FF                MOV     R7,A
0115 EF                MOV     A,R7
0116 4404              ORL     A,#04H
0118 FF                MOV     R7,A
0119 EF                MOV     A,R7
011A 54BF              ANL     A,#0BFH
011C FF                MOV     R7,A
011D 904200            MOV     DPTR,#04200H
0120 EF                MOV     A,R7
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
0122 8031              SJMP    ?C0076
                                           ; SOURCE LINE # 572
0124         ?C0082:
                                           ; SOURCE LINE # 573
0124 904200            MOV     DPTR,#04200H
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 64  

0127 E0                MOVX    A,@DPTR
0128 FF                MOV     R7,A
0129 EF                MOV     A,R7
012A 54F8              ANL     A,#0F8H
012C FF                MOV     R7,A
012D EF                MOV     A,R7
012E 4405              ORL     A,#05H
0130 FF                MOV     R7,A
0131 EF                MOV     A,R7
0132 54BF              ANL     A,#0BFH
0134 FF                MOV     R7,A
0135 904200            MOV     DPTR,#04200H
0138 EF                MOV     A,R7
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 575
013A 8019              SJMP    ?C0076
                                           ; SOURCE LINE # 579
013C         ?C0083:
                                           ; SOURCE LINE # 580
013C 904200            MOV     DPTR,#04200H
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 54F8              ANL     A,#0F8H
0144 FF                MOV     R7,A
0145 EF                MOV     A,R7
0146 4442              ORL     A,#042H
0148 FF                MOV     R7,A
0149 904200            MOV     DPTR,#04200H
014C EF                MOV     A,R7
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
014E 8005              SJMP    ?C0076
                                           ; SOURCE LINE # 584
0150         ?C0084:
                                           ; SOURCE LINE # 585
0150 7F00              MOV     R7,#00H
0152 120000      R     LCALL   _?CyHalt
0155         ?C0085:
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
0155         ?C0076:
                                           ; SOURCE LINE # 590
0155 900000      R     MOV     DPTR,#freq
0158 E0                MOVX    A,@DPTR
0159 FF                MOV     R7,A
015A EF                MOV     A,R7
015B B40805            CJNE    A,#08H,?C0086
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
015E 120000      R     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 593
0161 8003              SJMP    ?C0087
0163         ?C0086:
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
0163 120000      R     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 597
0166         ?C0087:
                                           ; SOURCE LINE # 599
0166 900000      R     MOV     DPTR,#current_freq
0169 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 65  

016A FF                MOV     R7,A
016B 900000      R     MOV     DPTR,#next_freq
016E E0                MOVX    A,@DPTR
016F FE                MOV     R6,A
0170 EE                MOV     A,R6
0171 C3                CLR     C
0172 9F                SUBB    A,R7
0173 5008              JNC     ?C0089
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 602
0175 900000      R     MOV     DPTR,#freq
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A 120000      R     LCALL   _CyIMO_SetTrimValue
                                           ; SOURCE LINE # 603
017D         ?C0088:
                                           ; SOURCE LINE # 604
017D         ?C0089:
017D 22                RET     
             ; FUNCTION _CyIMO_SetFreq (END)

             ; FUNCTION _CyIMO_SetSource (BEGIN)
                                           ; SOURCE LINE # 634
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 637
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0093
0010 00                DB      00H
0011 0000        R     DW      ?C0092
0013 01                DB      01H
0014 0000        R     DW      ?C0091
0016 02                DB      02H
0017 0000              DW      00H
0019 0000        R     DW      ?C0094
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
001B         ?C0091:
                                           ; SOURCE LINE # 640
001B 904000            MOV     DPTR,#04000H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54BF              ANL     A,#0BFH
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
0026 904200            MOV     DPTR,#04200H
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C 4420              ORL     A,#020H
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 66  

                                           ; SOURCE LINE # 642
0031 22                RET     
                                           ; SOURCE LINE # 644
0032         ?C0092:
                                           ; SOURCE LINE # 645
0032 904000            MOV     DPTR,#04000H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 4440              ORL     A,#040H
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 646
003D 904200            MOV     DPTR,#04200H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 4420              ORL     A,#020H
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
0048 22                RET     
                                           ; SOURCE LINE # 649
0049         ?C0093:
                                           ; SOURCE LINE # 650
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54DF              ANL     A,#0DFH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
0054 22                RET     
                                           ; SOURCE LINE # 653
0055         ?C0094:
                                           ; SOURCE LINE # 655
0055 7F00              MOV     R7,#00H
0057 120000      R     LCALL   _?CyHalt
005A         ?C0095:
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 657
005A         ?C0090:
                                           ; SOURCE LINE # 658
005A         ?C0096:
005A 22                RET     
             ; FUNCTION _CyIMO_SetSource (END)

             ; FUNCTION CyIMO_EnableDoubler (BEGIN)
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 679
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 67  

000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
000B         ?C0097:
000B 22                RET     
             ; FUNCTION CyIMO_EnableDoubler (END)

             ; FUNCTION CyIMO_DisableDoubler (BEGIN)
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
0000 904200            MOV     DPTR,#04200H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
000B         ?C0098:
000B 22                RET     
             ; FUNCTION CyIMO_DisableDoubler (END)

             ; FUNCTION _CyMasterClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 732
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 752
0005 904005            MOV     DPTR,#04005H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#master_reg_1
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
000F 900000      R     MOV     DPTR,#source
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5403              ANL     A,#03H
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#master_reg_1
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 54FC              ANL     A,#0FCH
0020 FE                MOV     R6,A
0021 EE                MOV     A,R6
0022 4F                ORL     A,R7
0023 FF                MOV     R7,A
0024 904005            MOV     DPTR,#04005H
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
0029         ?C0099:
0029 22                RET     
             ; FUNCTION _CyMasterClk_SetSource (END)

             ; FUNCTION _CyMasterClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 795
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 68  

0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904004            MOV     DPTR,#04004H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 798
000F         ?C0100:
000F 22                RET     
             ; FUNCTION _CyMasterClk_SetDivider (END)

             ; FUNCTION _CyBusClk_Internal_SetDivider (BEGIN)
                                           ; SOURCE LINE # 817
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 820
0008 904014            MOV     DPTR,#04014H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54F0              ANL     A,#0F0H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 821
0013 904010            MOV     DPTR,#04010H
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 823
0018 904008            MOV     DPTR,#04008H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 4480              ORL     A,#080H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
0023 7B02              MOV     R3,#02H
0025 7A40              MOV     R2,#040H
0027 7902              MOV     R1,#02H
0029 900000      R     MOV     DPTR,#divider
002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 829
0034 904001            MOV     DPTR,#04001H
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 69  

0039 EF                MOV     A,R7
003A 4401              ORL     A,#01H
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 830
003F         ?C0101:
003F 22                RET     
             ; FUNCTION _CyBusClk_Internal_SetDivider (END)

             ; FUNCTION _CyBusClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 856
0000 900000      R     MOV     DPTR,#divider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 862
0008 7B02              MOV     R3,#02H
000A 7A40              MOV     R2,#040H
000C 7906              MOV     R1,#06H
000E 120000      E     LCALL   _cyread16_nodpx
0011 900000      R     MOV     DPTR,#current_busclk_divider
0014 EE                MOV     A,R6
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
0019 900000      R     MOV     DPTR,#divider
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 600C              JZ      ?C0103
0025 900000      R     MOV     DPTR,#current_busclk_divider
0028 E0                MOVX    A,@DPTR
0029 FE                MOV     R6,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 4E                ORL     A,R6
002F 705D              JNZ     ?C0102
0031         ?C0103:
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 868
0031 904004            MOV     DPTR,#04004H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#current_masterclk_divider
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
003B 900000      R     MOV     DPTR,#current_masterclk_divider
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 70  

0040 EF                MOV     A,R7
0041 C3                CLR     C
0042 9407              SUBB    A,#07H
0044 5005              JNC     ?C0104
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 872
0046 7F07              MOV     R7,#07H
0048 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 873
004B         ?C0104:
                                           ; SOURCE LINE # 875
004B 900000      R     MOV     DPTR,#divider
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 4E                ORL     A,R6
0055 7018              JNZ     ?C0105
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 878
0057 904008            MOV     DPTR,#04008H
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D 4440              ORL     A,#040H
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 879
0062 900000      R     MOV     DPTR,#divider
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 880
006D 8016              SJMP    ?C0106
006F         ?C0105:
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
006F 900000      R     MOV     DPTR,#divider
0072 E0                MOVX    A,@DPTR
0073 FE                MOV     R6,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 884
007A 904008            MOV     DPTR,#04008H
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 54BF              ANL     A,#0BFH
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 885
0085         ?C0106:
                                           ; SOURCE LINE # 888
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 71  

0085 900000      R     MOV     DPTR,#current_masterclk_divider
0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A 120000      R     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 889
008D 22                RET     
008E         ?C0102:
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
008E 900000      R     MOV     DPTR,#divider
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 120000      R     LCALL   _CyBusClk_Internal_SetDivider
                                           ; SOURCE LINE # 893
0099         ?C0107:
                                           ; SOURCE LINE # 894
0099         ?C0108:
0099 22                RET     
             ; FUNCTION _CyBusClk_SetDivider (END)

             ; FUNCTION _CyCpuClk_SetDivider (BEGIN)
                                           ; SOURCE LINE # 923
0000 900000      R     MOV     DPTR,#divider
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
0005 900000      R     MOV     DPTR,#divider
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
000F 904005            MOV     DPTR,#04005H
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 EE                MOV     A,R6
0015 540F              ANL     A,#0FH
0017 FE                MOV     R6,A
0018 EF                MOV     A,R7
0019 4E                ORL     A,R6
001A FF                MOV     R7,A
001B 904005            MOV     DPTR,#04005H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 927
0020         ?C0109:
0020 22                RET     
             ; FUNCTION _CyCpuClk_SetDivider (END)

             ; FUNCTION _CyUsbClk_SetSource (BEGIN)
                                           ; SOURCE LINE # 950
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 951
                                           ; SOURCE LINE # 952
0005 900000      R     MOV     DPTR,#source
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 72  

0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
000E 904009            MOV     DPTR,#04009H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54FC              ANL     A,#0FCH
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904009            MOV     DPTR,#04009H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 954
001F         ?C0110:
001F 22                RET     
             ; FUNCTION _CyUsbClk_SetSource (END)

             ; FUNCTION CyILO_Start1K (BEGIN)
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 976
                                           ; SOURCE LINE # 978
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4402              ORL     A,#02H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 979
000B         ?C0111:
000B 22                RET     
             ; FUNCTION CyILO_Start1K (END)

             ; FUNCTION CyILO_Stop1K (BEGIN)
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1006
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1007
000B         ?C0112:
000B 22                RET     
             ; FUNCTION CyILO_Stop1K (END)

             ; FUNCTION CyILO_Start100K (BEGIN)
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1027
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 73  

0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
000B         ?C0113:
000B 22                RET     
             ; FUNCTION CyILO_Start100K (END)

             ; FUNCTION CyILO_Stop100K (BEGIN)
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1048
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1049
000B         ?C0114:
000B 22                RET     
             ; FUNCTION CyILO_Stop100K (END)

             ; FUNCTION CyILO_Enable33K (BEGIN)
                                           ; SOURCE LINE # 1069
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1072
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4420              ORL     A,#020H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1073
000B         ?C0115:
000B 22                RET     
             ; FUNCTION CyILO_Enable33K (END)

             ; FUNCTION CyILO_Disable33K (BEGIN)
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1096
0000 904300            MOV     DPTR,#04300H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54DF              ANL     A,#0DFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1097
000B         ?C0116:
000B 22                RET     
             ; FUNCTION CyILO_Disable33K (END)

C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 74  

             ; FUNCTION _CyILO_SetSource (BEGIN)
                                           ; SOURCE LINE # 1118
0000 900000      R     MOV     DPTR,#source
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1120
0005 900000      R     MOV     DPTR,#source
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 25E0              ADD     A,ACC
000D 25E0              ADD     A,ACC
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 540C              ANL     A,#0CH
0013 FF                MOV     R7,A
0014 904000            MOV     DPTR,#04000H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A 54F3              ANL     A,#0F3H
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 4F                ORL     A,R7
001F FF                MOV     R7,A
0020 904000            MOV     DPTR,#04000H
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0025         ?C0117:
0025 22                RET     
             ; FUNCTION _CyILO_SetSource (END)

             ; FUNCTION _CyILO_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1142
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1147
0005 904300            MOV     DPTR,#04300H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#state
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1150
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0118
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
0017 900000      R     MOV     DPTR,#state
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4410              ORL     A,#010H
001F FF                MOV     R7,A
0020 904300            MOV     DPTR,#04300H
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 75  

0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1153
0025 800E              SJMP    ?C0119
0027         ?C0118:
                                           ; SOURCE LINE # 1155
                                           ; SOURCE LINE # 1156
0027 900000      R     MOV     DPTR,#state
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54EF              ANL     A,#0EFH
002F FF                MOV     R7,A
0030 904300            MOV     DPTR,#04300H
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1157
0035         ?C0119:
                                           ; SOURCE LINE # 1160
0035 900000      R     MOV     DPTR,#state
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 5410              ANL     A,#010H
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F C4                SWAP    A
0040 540F              ANL     A,#0FH
0042 FF                MOV     R7,A
                                           ; SOURCE LINE # 1161
0043         ?C0120:
0043 22                RET     
             ; FUNCTION _CyILO_SetPowerMode (END)

             ; FUNCTION CyXTAL_32KHZ_Start (BEGIN)
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1182
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1183
0006 904698            MOV     DPTR,#04698H
0009 7403              MOV     A,#03H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1184
000C 904309            MOV     DPTR,#04309H
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 54F3              ANL     A,#0F3H
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 4404              ORL     A,#04H
0018 FF                MOV     R7,A
0019 904309            MOV     DPTR,#04309H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1187
001E 904308            MOV     DPTR,#04308H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 76  

0023 EF                MOV     A,R7
0024 4404              ORL     A,#04H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1191
0029 904308            MOV     DPTR,#04308H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 4401              ORL     A,#01H
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1193
0034 7FE8              MOV     R7,#0E8H
0036 7E03              MOV     R6,#03H
0038 7D00              MOV     R5,#00H
003A 7C00              MOV     R4,#00H
003C 900000      R     MOV     DPTR,#i
003F 120000      E     LCALL   ?C?LSTXDATA
0042         ?C0121:
0042 900000      R     MOV     DPTR,#i
0045 E0                MOVX    A,@DPTR
0046 FC                MOV     R4,A
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 FD                MOV     R5,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 D3                SETB    C
0051 EF                MOV     A,R7
0052 9400              SUBB    A,#00H
0054 EE                MOV     A,R6
0055 9400              SUBB    A,#00H
0057 403E              JC      ?C0125
                                           ; SOURCE LINE # 1194
                                           ; SOURCE LINE # 1195
0059 120000      R     LCALL   CyXTAL_32KHZ_ReadStatus
005C EF                MOV     A,R7
005D 30E506            JNB     ACC.5,?C0124
                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1198
0060 7F00              MOV     R7,#00H
0062 120000      R     LCALL   _CyXTAL_32KHZ_SetPowerMode
                                           ; SOURCE LINE # 1200
0065 22                RET     
                                           ; SOURCE LINE # 1201
0066         ?C0124:
                                           ; SOURCE LINE # 1202
0066 7F01              MOV     R7,#01H
0068 7E00              MOV     R6,#00H
006A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1203
006D         ?C0123:
006D 900000      R     MOV     DPTR,#i
0070 E0                MOVX    A,@DPTR
0071 FC                MOV     R4,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 77  

0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FD                MOV     R5,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FE                MOV     R6,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 7BFF              MOV     R3,#0FFH
007D 7AFF              MOV     R2,#0FFH
007F 79FF              MOV     R1,#0FFH
0081 78FF              MOV     R0,#0FFH
0083 EF                MOV     A,R7
0084 2B                ADD     A,R3
0085 FF                MOV     R7,A
0086 EE                MOV     A,R6
0087 3A                ADDC    A,R2
0088 FE                MOV     R6,A
0089 ED                MOV     A,R5
008A 39                ADDC    A,R1
008B FD                MOV     R5,A
008C EC                MOV     A,R4
008D 38                ADDC    A,R0
008E FC                MOV     R4,A
008F 900000      R     MOV     DPTR,#i
0092 120000      E     LCALL   ?C?LSTXDATA
0095 80AB              SJMP    ?C0121
0097         ?C0122:
                                           ; SOURCE LINE # 1204
0097         ?C0125:
0097 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Start (END)

             ; FUNCTION CyXTAL_32KHZ_Stop (BEGIN)
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
                                           ; SOURCE LINE # 1223
0000 90430A            MOV     DPTR,#0430AH
0003 74F3              MOV     A,#0F3H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1224
0006 904698            MOV     DPTR,#04698H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1225
000B 904309            MOV     DPTR,#04309H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54F3              ANL     A,#0F3H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 4404              ORL     A,#04H
0017 FF                MOV     R7,A
0018 904309            MOV     DPTR,#04309H
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1226
001D 904308            MOV     DPTR,#04308H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 78  

0022 EF                MOV     A,R7
0023 54FC              ANL     A,#0FCH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1229
0028 904308            MOV     DPTR,#04308H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 54FB              ANL     A,#0FBH
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1231
0033         ?C0126:
0033 22                RET     
             ; FUNCTION CyXTAL_32KHZ_Stop (END)

             ; FUNCTION CyXTAL_32KHZ_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5420              ANL     A,#020H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 1254
0009         ?C0127:
0009 22                RET     
             ; FUNCTION CyXTAL_32KHZ_ReadStatus (END)

             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (BEGIN)
                                           ; SOURCE LINE # 1275
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
0005 904308            MOV     DPTR,#04308H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 30E104            JNB     ACC.1,?C0128
000E 7F01              MOV     R7,#01H
0010 8002              SJMP    ?C0129
0012         ?C0128:
0012 7F00              MOV     R7,#00H
0014         ?C0129:
0014 900000      R     MOV     DPTR,#state
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1279
0019 90430A            MOV     DPTR,#0430AH
001C 74F3              MOV     A,#0F3H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1281
001F 900000      R     MOV     DPTR,#mode
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 79  

0024 EF                MOV     A,R7
0025 6401              XRL     A,#01H
0027 7033              JNZ     ?C0130
                                           ; SOURCE LINE # 1282
                                           ; SOURCE LINE # 1284
0029 904698            MOV     DPTR,#04698H
002C 7401              MOV     A,#01H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
002F 7F0A              MOV     R7,#0AH
0031 7E00              MOV     R6,#00H
0033 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1286
0036 904309            MOV     DPTR,#04309H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 54F3              ANL     A,#0F3H
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 4408              ORL     A,#08H
0042 FF                MOV     R7,A
0043 904309            MOV     DPTR,#04309H
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
0048 7F14              MOV     R7,#014H
004A 7E00              MOV     R6,#00H
004C 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1288
004F 904308            MOV     DPTR,#04308H
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 4402              ORL     A,#02H
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1289
005A 802A              SJMP    ?C0131
005C         ?C0130:
                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1293
005C 904698            MOV     DPTR,#04698H
005F 7406              MOV     A,#06H
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1294
0062 7F0A              MOV     R7,#0AH
0064 7E00              MOV     R6,#00H
0066 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1295
0069 904309            MOV     DPTR,#04309H
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 54F3              ANL     A,#0F3H
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 4404              ORL     A,#04H
0075 FF                MOV     R7,A
0076 904309            MOV     DPTR,#04309H
0079 EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 80  

007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1296
007B 904308            MOV     DPTR,#04308H
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 EF                MOV     A,R7
0081 54FD              ANL     A,#0FDH
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1297
0086         ?C0131:
                                           ; SOURCE LINE # 1299
0086 900000      R     MOV     DPTR,#state
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
                                           ; SOURCE LINE # 1300
008B         ?C0132:
008B 22                RET     
             ; FUNCTION _CyXTAL_32KHZ_SetPowerMode (END)

             ; FUNCTION _CyXTAL_Start (BEGIN)
                                           ; SOURCE LINE # 1344
0000 900000      R     MOV     DPTR,#wait
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1345
                                           ; SOURCE LINE # 1346
0005 900000      R     MOV     DPTR,#status
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
000A 900000      R     MOV     DPTR,#wait
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#timeout
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1361
0014 904210            MOV     DPTR,#04210H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 4401              ORL     A,#01H
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1364
001F 900000      R     MOV     DPTR,#wait
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 D3                SETB    C
0026 9400              SUBB    A,#00H
0028 5003              JNC     $ + 5H
002A 020000      R     LJMP    ?C0133
                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1367
002D 904300            MOV     DPTR,#04300H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#iloEnableState
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 81  

0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1368
0037 904380            MOV     DPTR,#04380H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#pmTwCfg0
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1369
0041 904382            MOV     DPTR,#04382H
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#pmTwCfg2
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1372
004B 7F18              MOV     R7,#018H
004D 120000      E     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 1373
0050 900000      R     MOV     DPTR,#status
0053 7410              MOV     A,#010H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1376
0056         ?C0134:
0056 900000      R     MOV     DPTR,#timeout
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C D3                SETB    C
005D 9400              SUBB    A,#00H
005F 4045              JC      ?C0135
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1381
0061 904210            MOV     DPTR,#04210H
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
                                           ; SOURCE LINE # 1387
0066 900000      R     MOV     DPTR,#count
0069 7404              MOV     A,#04H
006B F0                MOVX    @DPTR,A
006C         ?C0137:
006C 900000      R     MOV     DPTR,#count
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 D3                SETB    C
0073 9400              SUBB    A,#00H
0075 4017              JC      ?C0138
                                           ; SOURCE LINE # 1388
0077         ?C0140:
                                           ; SOURCE LINE # 1389
0077 7F01              MOV     R7,#01H
0079 120000      E     LCALL   _CyPmReadStatus
007C EF                MOV     A,R7
007D B40103            CJNE    A,#01H,?C0142
0080 D3                SETB    C
0081 8001              SJMP    ?C0143
0083         ?C0142:
0083 C3                CLR     C
0084         ?C0143:
0084 50F1              JNC     ?C0140
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 82  

                                           ; SOURCE LINE # 1390
                                           ; SOURCE LINE # 1392
0086         ?C0141:
                                           ; SOURCE LINE # 1393
0086         ?C0139:
0086 900000      R     MOV     DPTR,#count
0089 E0                MOVX    A,@DPTR
008A 14                DEC     A
008B F0                MOVX    @DPTR,A
008C 80DE              SJMP    ?C0137
008E         ?C0138:
                                           ; SOURCE LINE # 1402
008E 904210            MOV     DPTR,#04210H
0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 20E707            JB      ACC.7,?C0136
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1404
0097 900000      R     MOV     DPTR,#status
009A E4                CLR     A
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
009C 8008              SJMP    ?C0135
                                           ; SOURCE LINE # 1406
009E         ?C0144:
                                           ; SOURCE LINE # 1409
009E         ?C0136:
009E 900000      R     MOV     DPTR,#timeout
00A1 E0                MOVX    A,@DPTR
00A2 14                DEC     A
00A3 F0                MOVX    @DPTR,A
00A4 80B0              SJMP    ?C0134
00A6         ?C0135:
                                           ; SOURCE LINE # 1413
00A6 900000      R     MOV     DPTR,#iloEnableState
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB EF                MOV     A,R7
00AC 20E203            JB      ACC.2,?C0145
                                           ; SOURCE LINE # 1414
                                           ; SOURCE LINE # 1415
00AF 120000      R     LCALL   CyILO_Stop100K
                                           ; SOURCE LINE # 1416
00B2         ?C0145:
                                           ; SOURCE LINE # 1417
00B2 900000      R     MOV     DPTR,#pmTwCfg0
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 904380            MOV     DPTR,#04380H
00BA EF                MOV     A,R7
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1418
00BC 900000      R     MOV     DPTR,#pmTwCfg2
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 904382            MOV     DPTR,#04382H
00C4 EF                MOV     A,R7
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1419
00C6         ?C0133:
                                           ; SOURCE LINE # 1421
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 83  

00C6 900000      R     MOV     DPTR,#status
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
                                           ; SOURCE LINE # 1422
00CB         ?C0146:
00CB 22                RET     
             ; FUNCTION _CyXTAL_Start (END)

             ; FUNCTION CyXTAL_Stop (BEGIN)
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1440
                                           ; SOURCE LINE # 1442
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1443
000B         ?C0147:
000B 22                RET     
             ; FUNCTION CyXTAL_Stop (END)

             ; FUNCTION CyXTAL_EnableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1464
                                           ; SOURCE LINE # 1466
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
000B         ?C0148:
000B 22                RET     
             ; FUNCTION CyXTAL_EnableErrStatus (END)

             ; FUNCTION CyXTAL_DisableErrStatus (BEGIN)
                                           ; SOURCE LINE # 1485
                                           ; SOURCE LINE # 1486
                                           ; SOURCE LINE # 1488
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1489
000B         ?C0149:
000B 22                RET     
             ; FUNCTION CyXTAL_DisableErrStatus (END)

             ; FUNCTION CyXTAL_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1509
                                           ; SOURCE LINE # 1510
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 84  

                                           ; SOURCE LINE # 1515
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E704            JNB     ACC.7,?C0150
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0151
000D         ?C0150:
000D 7F00              MOV     R7,#00H
000F         ?C0151:
                                           ; SOURCE LINE # 1516
000F         ?C0152:
000F 22                RET     
             ; FUNCTION CyXTAL_ReadStatus (END)

             ; FUNCTION CyXTAL_EnableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1536
                                           ; SOURCE LINE # 1537
                                           ; SOURCE LINE # 1538
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4440              ORL     A,#040H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1539
000B         ?C0153:
000B 22                RET     
             ; FUNCTION CyXTAL_EnableFaultRecovery (END)

             ; FUNCTION CyXTAL_DisableFaultRecovery (BEGIN)
                                           ; SOURCE LINE # 1558
                                           ; SOURCE LINE # 1559
                                           ; SOURCE LINE # 1560
0000 904210            MOV     DPTR,#04210H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54BF              ANL     A,#0BFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1561
000B         ?C0154:
000B 22                RET     
             ; FUNCTION CyXTAL_DisableFaultRecovery (END)

             ; FUNCTION _CyXTAL_SetStartup (BEGIN)
                                           ; SOURCE LINE # 1585
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1586
                                           ; SOURCE LINE # 1587
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 541F              ANL     A,#01FH
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 85  

000D FF                MOV     R7,A
000E 904212            MOV     DPTR,#04212H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54E0              ANL     A,#0E0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904212            MOV     DPTR,#04212H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1589
001F         ?C0155:
001F 22                RET     
             ; FUNCTION _CyXTAL_SetStartup (END)

             ; FUNCTION _CyXTAL_SetFbVoltage (BEGIN)
                                           ; SOURCE LINE # 1609
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1610
                                           ; SOURCE LINE # 1611
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 540F              ANL     A,#0FH
000D FF                MOV     R7,A
000E 904213            MOV     DPTR,#04213H
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F0              ANL     A,#0F0H
0016 FE                MOV     R6,A
0017 EE                MOV     A,R6
0018 4F                ORL     A,R7
0019 FF                MOV     R7,A
001A 904213            MOV     DPTR,#04213H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1613
001F         ?C0156:
001F 22                RET     
             ; FUNCTION _CyXTAL_SetFbVoltage (END)

             ; FUNCTION _CyXTAL_SetWdVoltage (BEGIN)
                                           ; SOURCE LINE # 1632
0000 900000      R     MOV     DPTR,#setting
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1633
                                           ; SOURCE LINE # 1634
0005 900000      R     MOV     DPTR,#setting
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 54F0              ANL     A,#0F0H
000E FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 86  

000F EF                MOV     A,R7
0010 5470              ANL     A,#070H
0012 FF                MOV     R7,A
0013 904213            MOV     DPTR,#04213H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 548F              ANL     A,#08FH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904213            MOV     DPTR,#04213H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1636
0024         ?C0157:
0024 22                RET     
             ; FUNCTION _CyXTAL_SetWdVoltage (END)

             ; FUNCTION _?CyHalt (BEGIN)
                                           ; SOURCE LINE # 1655
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1657
0008 850083      E     MOV     DPH,?C_XBP
000B 850082      E     MOV     DPL,?C_XBP+01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 850083      E     MOV     DPH,?C_XBP
0013 850082      E     MOV     DPL,?C_XBP+01H
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1664
0018 9046EA            MOV     DPTR,#046EAH
001B 7401              MOV     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1666
001E         ?C0158:
001E 900001            MOV     DPTR,#01H
0021 120000      E     LCALL   ?C?ADDXBP
0024 22                RET     
             ; FUNCTION _?CyHalt (END)

             ; FUNCTION CySoftwareReset (BEGIN)
                                           ; SOURCE LINE # 1683
                                           ; SOURCE LINE # 1684
                                           ; SOURCE LINE # 1686
0000 9046F6            MOV     DPTR,#046F6H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1687
0006         ?C0159:
0006 22                RET     
             ; FUNCTION CySoftwareReset (END)

             ; FUNCTION _?CyDelay (BEGIN)
                                           ; SOURCE LINE # 1710
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 87  

0006 120000      E     LCALL   ?C?LSTXDATA
0009         ?C0160:
                                           ; SOURCE LINE # 1712
0009 7F00              MOV     R7,#00H
000B 7E80              MOV     R6,#080H
000D 7D00              MOV     R5,#00H
000F 7C00              MOV     R4,#00H
0011 850083      E     MOV     DPH,?C_XBP
0014 850082      E     MOV     DPL,?C_XBP+01H
0017 E0                MOVX    A,@DPTR
0018 F8                MOV     R0,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B F9                MOV     R1,A
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FA                MOV     R2,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 FB                MOV     R3,A
0022 D3                SETB    C
0023 120000      E     LCALL   ?C?ULCMP
0026 4040              JC      ?C0161
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1718
0028 900000      R     MOV     DPTR,#cydelay_32k_ms
002B E0                MOVX    A,@DPTR
002C FC                MOV     R4,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1719
0039 850083      E     MOV     DPH,?C_XBP
003C 850082      E     MOV     DPL,?C_XBP+01H
003F C083              PUSH    DPH
0041 C082              PUSH    DPL
0043 E0                MOVX    A,@DPTR
0044 FC                MOV     R4,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 FD                MOV     R5,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E C3                CLR     C
004F EF                MOV     A,R7
0050 9400              SUBB    A,#00H
0052 FF                MOV     R7,A
0053 EE                MOV     A,R6
0054 9480              SUBB    A,#080H
0056 FE                MOV     R6,A
0057 ED                MOV     A,R5
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 88  

0058 9400              SUBB    A,#00H
005A FD                MOV     R5,A
005B EC                MOV     A,R4
005C 9400              SUBB    A,#00H
005E FC                MOV     R4,A
005F D082              POP     DPL
0061 D083              POP     DPH
0063 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1720
0066 80A1              SJMP    ?C0160
0068         ?C0161:
                                           ; SOURCE LINE # 1722
0068 900000      R     MOV     DPTR,#cydelay_freq_khz
006B E0                MOVX    A,@DPTR
006C FC                MOV     R4,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FD                MOV     R5,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 FE                MOV     R6,A
0073 A3                INC     DPTR
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 850083      E     MOV     DPH,?C_XBP
0079 850082      E     MOV     DPL,?C_XBP+01H
007C E0                MOVX    A,@DPTR
007D F8                MOV     R0,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 F9                MOV     R1,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 FA                MOV     R2,A
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 FB                MOV     R3,A
0087 120000      E     LCALL   ?C?LMUL
008A 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 1723
008D         ?C0162:
008D 900004            MOV     DPTR,#04H
0090 120000      E     LCALL   ?C?ADDXBP
0093 22                RET     
             ; FUNCTION _?CyDelay (END)

             ; FUNCTION _?CyDelayFreq (BEGIN)
                                           ; SOURCE LINE # 1781
0000 90FFFC            MOV     DPTR,#0FFFCH
0003 120000      E     LCALL   ?C?ADDXBP
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1783
0009 850083      E     MOV     DPH,?C_XBP
000C 850082      E     MOV     DPL,?C_XBP+01H
000F E0                MOVX    A,@DPTR
0010 FC                MOV     R4,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 89  

0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 4E                ORL     A,R6
001C 6019              JZ      ?C0163
                                           ; SOURCE LINE # 1784
                                           ; SOURCE LINE # 1785
001E 850083      E     MOV     DPH,?C_XBP
0021 850082      E     MOV     DPL,?C_XBP+01H
0024 E0                MOVX    A,@DPTR
0025 FC                MOV     R4,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FD                MOV     R5,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#cydelay_freq_hz
0032 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1786
0035 800E              SJMP    ?C0164
0037         ?C0163:
                                           ; SOURCE LINE # 1788
                                           ; SOURCE LINE # 1789
0037 7F00              MOV     R7,#00H
0039 7E36              MOV     R6,#036H
003B 7D6E              MOV     R5,#06EH
003D 7C01              MOV     R4,#01H
003F 900000      R     MOV     DPTR,#cydelay_freq_hz
0042 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1790
0045         ?C0164:
                                           ; SOURCE LINE # 1792
0045 900000      R     MOV     DPTR,#cydelay_freq_hz
0048 E0                MOVX    A,@DPTR
0049 FC                MOV     R4,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FD                MOV     R5,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 243F              ADD     A,#03FH
0056 FF                MOV     R7,A
0057 EE                MOV     A,R6
0058 3442              ADDC    A,#042H
005A FE                MOV     R6,A
005B ED                MOV     A,R5
005C 340F              ADDC    A,#0FH
005E FD                MOV     R5,A
005F EC                MOV     A,R4
0060 3400              ADDC    A,#00H
0062 FC                MOV     R4,A
0063 7B40              MOV     R3,#040H
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 90  

0065 7A42              MOV     R2,#042H
0067 790F              MOV     R1,#0FH
0069 7800              MOV     R0,#00H
006B 120000      E     LCALL   ?C?ULDIV
006E 900000      R     MOV     DPTR,#cydelay_freq_mhz
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1793
0073 900000      R     MOV     DPTR,#cydelay_freq_hz
0076 E0                MOVX    A,@DPTR
0077 FC                MOV     R4,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A FD                MOV     R5,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D FE                MOV     R6,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 24E7              ADD     A,#0E7H
0084 FF                MOV     R7,A
0085 EE                MOV     A,R6
0086 3403              ADDC    A,#03H
0088 FE                MOV     R6,A
0089 ED                MOV     A,R5
008A 3400              ADDC    A,#00H
008C FD                MOV     R5,A
008D EC                MOV     A,R4
008E 3400              ADDC    A,#00H
0090 FC                MOV     R4,A
0091 7BE8              MOV     R3,#0E8H
0093 7A03              MOV     R2,#03H
0095 7900              MOV     R1,#00H
0097 7800              MOV     R0,#00H
0099 120000      E     LCALL   ?C?ULDIV
009C 900000      R     MOV     DPTR,#cydelay_freq_khz
009F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1794
00A2 7F00              MOV     R7,#00H
00A4 7E80              MOV     R6,#080H
00A6 7D00              MOV     R5,#00H
00A8 7C00              MOV     R4,#00H
00AA 900000      R     MOV     DPTR,#cydelay_freq_khz
00AD E0                MOVX    A,@DPTR
00AE F8                MOV     R0,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 F9                MOV     R1,A
00B2 A3                INC     DPTR
00B3 E0                MOVX    A,@DPTR
00B4 FA                MOV     R2,A
00B5 A3                INC     DPTR
00B6 E0                MOVX    A,@DPTR
00B7 FB                MOV     R3,A
00B8 120000      E     LCALL   ?C?LMUL
00BB 900000      R     MOV     DPTR,#cydelay_32k_ms
00BE 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1795
00C1         ?C0165:
00C1 900004            MOV     DPTR,#04H
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 91  

00C4 120000      E     LCALL   ?C?ADDXBP
00C7 22                RET     
             ; FUNCTION _?CyDelayFreq (END)

             ; FUNCTION _CyWdtStart (BEGIN)
                                           ; SOURCE LINE # 1844
0000 900000      R     MOV     DPTR,#ticks
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#lpMode
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1845
                                           ; SOURCE LINE # 1851
000A 900000      R     MOV     DPTR,#ticks
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 5403              ANL     A,#03H
0012 FF                MOV     R7,A
0013 904383            MOV     DPTR,#04383H
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
0018 EE                MOV     A,R6
0019 54FC              ANL     A,#0FCH
001B FE                MOV     R6,A
001C EE                MOV     A,R6
001D 4F                ORL     A,R7
001E FF                MOV     R7,A
001F 904383            MOV     DPTR,#04383H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1854
0024 904383            MOV     DPTR,#04383H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4480              ORL     A,#080H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1855
002F 904383            MOV     DPTR,#04383H
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 EF                MOV     A,R7
0035 547F              ANL     A,#07FH
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1861
003A 900000      R     MOV     DPTR,#lpMode
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 C4                SWAP    A
0041 33                RLC     A
0042 54E0              ANL     A,#0E0H
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 5460              ANL     A,#060H
0048 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 92  

0049 904383            MOV     DPTR,#04383H
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E EE                MOV     A,R6
004F 549F              ANL     A,#09FH
0051 FE                MOV     R6,A
0052 EF                MOV     A,R7
0053 4E                ORL     A,R6
0054 FF                MOV     R7,A
0055 904383            MOV     DPTR,#04383H
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1870
005A 904383            MOV     DPTR,#04383H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 4410              ORL     A,#010H
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1871
0065         ?C0166:
0065 22                RET     
             ; FUNCTION _CyWdtStart (END)

             ; FUNCTION CyWdtClear (BEGIN)
                                           ; SOURCE LINE # 1888
                                           ; SOURCE LINE # 1889
                                           ; SOURCE LINE # 1900
0000 904384            MOV     DPTR,#04384H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1903
0006         ?C0167:
0006 22                RET     
             ; FUNCTION CyWdtClear (END)

             ; FUNCTION _CyVdLvDigitEnable (BEGIN)
                                           ; SOURCE LINE # 1929
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#threshold
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1930
                                           ; SOURCE LINE # 1931
000A 9044C8            MOV     DPTR,#044C8H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1934
0015 9046F7            MOV     DPTR,#046F7H
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 54BF              ANL     A,#0BFH
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 93  

001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1937
0020 9046F4            MOV     DPTR,#046F4H
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 54F0              ANL     A,#0F0H
0028 FF                MOV     R7,A
0029 900000      R     MOV     DPTR,#threshold
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E EE                MOV     A,R6
002F 540F              ANL     A,#0FH
0031 FE                MOV     R6,A
0032 EE                MOV     A,R6
0033 4F                ORL     A,R7
0034 FF                MOV     R7,A
0035 9046F4            MOV     DPTR,#046F4H
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1938
003A 9046F5            MOV     DPTR,#046F5H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 4401              ORL     A,#01H
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1941
0045 7F01              MOV     R7,#01H
0047 7E00              MOV     R6,#00H
0049 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1943
004C 9046FA            MOV     DPTR,#046FAH
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
                                           ; SOURCE LINE # 1946
0051 900000      R     MOV     DPTR,#reset
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 600D              JZ      ?C0168
                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1948
0059 9046F7            MOV     DPTR,#046F7H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 4440              ORL     A,#040H
0061 FF                MOV     R7,A
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1949
0064 800B              SJMP    ?C0169
0066         ?C0168:
                                           ; SOURCE LINE # 1951
                                           ; SOURCE LINE # 1952
0066 9046F7            MOV     DPTR,#046F7H
0069 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 94  

006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 54BF              ANL     A,#0BFH
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1953
0071         ?C0169:
                                           ; SOURCE LINE # 1958
0071 9044D8            MOV     DPTR,#044D8H
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 4401              ORL     A,#01H
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1959
007C 9044C0            MOV     DPTR,#044C0H
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 4401              ORL     A,#01H
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1960
0087         ?C0170:
0087 22                RET     
             ; FUNCTION _CyVdLvDigitEnable (END)

             ; FUNCTION _CyVdLvAnalogEnable (BEGIN)
                                           ; SOURCE LINE # 1985
0000 900000      R     MOV     DPTR,#reset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#threshold
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1986
                                           ; SOURCE LINE # 1987
000A 9044C8            MOV     DPTR,#044C8H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1990
0015 9046F7            MOV     DPTR,#046F7H
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 547F              ANL     A,#07FH
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1993
0020 900000      R     MOV     DPTR,#threshold
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 95  

0025 EF                MOV     A,R7
0026 C4                SWAP    A
0027 54F0              ANL     A,#0F0H
0029 FF                MOV     R7,A
002A 9046F4            MOV     DPTR,#046F4H
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F EE                MOV     A,R6
0030 540F              ANL     A,#0FH
0032 FE                MOV     R6,A
0033 EF                MOV     A,R7
0034 4E                ORL     A,R6
0035 FF                MOV     R7,A
0036 9046F4            MOV     DPTR,#046F4H
0039 EF                MOV     A,R7
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1994
003B 9046F5            MOV     DPTR,#046F5H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 4402              ORL     A,#02H
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1997
0046 7F01              MOV     R7,#01H
0048 7E00              MOV     R6,#00H
004A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 1999
004D 9046FA            MOV     DPTR,#046FAH
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
                                           ; SOURCE LINE # 2002
0052 900000      R     MOV     DPTR,#reset
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 600D              JZ      ?C0171
                                           ; SOURCE LINE # 2003
                                           ; SOURCE LINE # 2004
005A 9046F7            MOV     DPTR,#046F7H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 4480              ORL     A,#080H
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2005
0065 800B              SJMP    ?C0172
0067         ?C0171:
                                           ; SOURCE LINE # 2007
                                           ; SOURCE LINE # 2008
0067 9046F7            MOV     DPTR,#046F7H
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D 547F              ANL     A,#07FH
006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 96  

                                           ; SOURCE LINE # 2009
0072         ?C0172:
                                           ; SOURCE LINE # 2014
0072 9044D8            MOV     DPTR,#044D8H
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 4401              ORL     A,#01H
007A FF                MOV     R7,A
007B EF                MOV     A,R7
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2015
007D 9044C0            MOV     DPTR,#044C0H
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
0083 4401              ORL     A,#01H
0085 FF                MOV     R7,A
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2016
0088         ?C0173:
0088 22                RET     
             ; FUNCTION _CyVdLvAnalogEnable (END)

             ; FUNCTION CyVdLvDigitDisable (BEGIN)
                                           ; SOURCE LINE # 2034
                                           ; SOURCE LINE # 2035
                                           ; SOURCE LINE # 2036
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2039
000B 9046F7            MOV     DPTR,#046F7H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54BF              ANL     A,#0BFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016         ?C0174:
                                           ; SOURCE LINE # 2042
0016 9046FA            MOV     DPTR,#046FAH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 70F4              JNZ     ?C0174
0022         ?C0175:
                                           ; SOURCE LINE # 2044
0022         ?C0176:
0022 22                RET     
             ; FUNCTION CyVdLvDigitDisable (END)

C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 97  

             ; FUNCTION CyVdLvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 2062
                                           ; SOURCE LINE # 2063
                                           ; SOURCE LINE # 2064
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FD              ANL     A,#0FDH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2067
000B 9046F7            MOV     DPTR,#046F7H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 547F              ANL     A,#07FH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016         ?C0177:
                                           ; SOURCE LINE # 2070
0016 9046FA            MOV     DPTR,#046FAH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5407              ANL     A,#07H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 70F4              JNZ     ?C0177
0022         ?C0178:
                                           ; SOURCE LINE # 2071
0022         ?C0179:
0022 22                RET     
             ; FUNCTION CyVdLvAnalogDisable (END)

             ; FUNCTION CyVdHvAnalogEnable (BEGIN)
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2090
                                           ; SOURCE LINE # 2091
0000 9044C8            MOV     DPTR,#044C8H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2094
000B 9046F7            MOV     DPTR,#046F7H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 547F              ANL     A,#07FH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2097
0016 9046F5            MOV     DPTR,#046F5H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 98  

001B EF                MOV     A,R7
001C 4404              ORL     A,#04H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2100
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 2102
0028 9046FA            MOV     DPTR,#046FAH
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
                                           ; SOURCE LINE # 2104
002D 9044D8            MOV     DPTR,#044D8H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 4401              ORL     A,#01H
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2105
0038 9044C0            MOV     DPTR,#044C0H
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E 4401              ORL     A,#01H
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2106
0043         ?C0180:
0043 22                RET     
             ; FUNCTION CyVdHvAnalogEnable (END)

             ; FUNCTION CyVdHvAnalogDisable (BEGIN)
                                           ; SOURCE LINE # 2124
                                           ; SOURCE LINE # 2125
                                           ; SOURCE LINE # 2126
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2127
000B         ?C0181:
000B 22                RET     
             ; FUNCTION CyVdHvAnalogDisable (END)

             ; FUNCTION _CyVdStickyStatus (BEGIN)
                                           ; SOURCE LINE # 2150
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2151
                                           ; SOURCE LINE # 2154
0005 9046FA            MOV     DPTR,#046FAH
0008 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 99  

0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#status
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2155
000F 9046FA            MOV     DPTR,#046FAH
0012 C083              PUSH    DPH
0014 C082              PUSH    DPL
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#mask
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E F4                CPL     A
001F FE                MOV     R6,A
0020 EF                MOV     A,R7
0021 5E                ANL     A,R6
0022 FF                MOV     R7,A
0023 D082              POP     DPL
0025 D083              POP     DPH
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2157
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 2158
002E         ?C0182:
002E 22                RET     
             ; FUNCTION _CyVdStickyStatus (END)

             ; FUNCTION CyVdRealTimeStatus (BEGIN)
                                           ; SOURCE LINE # 2175
                                           ; SOURCE LINE # 2176
                                           ; SOURCE LINE # 2180
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2181
0008 9046FC            MOV     DPTR,#046FCH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 900000      R     MOV     DPTR,#VdFlagsState
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2182
0012 900000      R     MOV     DPTR,#interruptState
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 2184
001A 900000      R     MOV     DPTR,#VdFlagsState
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 2185
001F         ?C0183:
001F 22                RET     
             ; FUNCTION CyVdRealTimeStatus (END)

             ; FUNCTION CyDisableInts (BEGIN)
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 100 

                                           ; SOURCE LINE # 2202
                                           ; SOURCE LINE # 2203
                                           ; SOURCE LINE # 2207
0000 7B02              MOV     R3,#02H
0002 7A44              MOV     R2,#044H
0004 79C8              MOV     R1,#0C8H
0006 120000      E     LCALL   _cyread32_nodpx
0009 900000      R     MOV     DPTR,#intState
000C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2210
000F 7B02              MOV     R3,#02H
0011 7A44              MOV     R2,#044H
0013 79C8              MOV     R1,#0C8H
0015 7FFF              MOV     R7,#0FFH
0017 7EFF              MOV     R6,#0FFH
0019 7DFF              MOV     R5,#0FFH
001B 7CFF              MOV     R4,#0FFH
001D 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 2212
0020 900000      R     MOV     DPTR,#intState
0023 E0                MOVX    A,@DPTR
0024 FC                MOV     R4,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FE                MOV     R6,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 2213
002E         ?C0184:
002E 22                RET     
             ; FUNCTION CyDisableInts (END)

             ; FUNCTION _CyEnableInts (BEGIN)
                                           ; SOURCE LINE # 2230
0000 900000      R     MOV     DPTR,#mask
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2231
                                           ; SOURCE LINE # 2233
0006 7B02              MOV     R3,#02H
0008 7A44              MOV     R2,#044H
000A 79C0              MOV     R1,#0C0H
000C 900000      R     MOV     DPTR,#mask
000F E0                MOVX    A,@DPTR
0010 FC                MOV     R4,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _cywrite32_nodpx
                                           ; SOURCE LINE # 2234
001D         ?C0185:
001D 22                RET     
             ; FUNCTION _CyEnableInts (END)
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 101 


             ; FUNCTION _CyIntSetVector (BEGIN)
                                           ; SOURCE LINE # 2590
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2591
                                           ; SOURCE LINE # 2592
                                           ; SOURCE LINE # 2594
000D 900000      R     MOV     DPTR,#number
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 941F              SUBB    A,#01FH
0016 5003              JNC     ?C0187
0018 D3                SETB    C
0019 8001              SJMP    ?C0188
001B         ?C0187:
001B C3                CLR     C
001C         ?C0188:
001C 4020              JC      ?C0186
001E 900000      R     MOV     DPTR,#number
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 D3                SETB    C
0025 941F              SUBB    A,#01FH
0027 500A              JNC     ?C0189
0029 7F01              MOV     R7,#01H
002B 7E00              MOV     R6,#00H
002D 7D00              MOV     R5,#00H
002F 7C00              MOV     R4,#00H
0031 8008              SJMP    ?C0190
0033         ?C0189:
0033 7F00              MOV     R7,#00H
0035 7E00              MOV     R6,#00H
0037 7D00              MOV     R5,#00H
0039 7C00              MOV     R4,#00H
003B         ?C0190:
003B 120000      R     LCALL   _?CyHalt
003E         ?C0186:
                                           ; SOURCE LINE # 2597
003E 900000      R     MOV     DPTR,#number
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 541F              ANL     A,#01FH
0046 FF                MOV     R7,A
0047 7E00              MOV     R6,#00H
0049 EF                MOV     A,R7
004A 25E0              ADD     A,ACC
004C FF                MOV     R7,A
004D EE                MOV     A,R6
004E 33                RLC     A
004F FE                MOV     R6,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 102 

0050 EF                MOV     A,R7
0051 2400              ADD     A,#00H
0053 FF                MOV     R7,A
0054 EE                MOV     A,R6
0055 3444              ADDC    A,#044H
0057 FE                MOV     R6,A
0058 AA06              MOV     R2,AR6
005A A907              MOV     R1,AR7
005C 7B01              MOV     R3,#01H
005E 120000      E     LCALL   _cyread16_nodpx
0061 900000      R     MOV     DPTR,#oldIsr
0064 EE                MOV     A,R6
0065 F0                MOVX    @DPTR,A
0066 A3                INC     DPTR
0067 EF                MOV     A,R7
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2601
0069 900000      R     MOV     DPTR,#number
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 7E02              MOV     R6,#02H
0070 EF                MOV     A,R7
0071 8EF0              MOV     B,R6
0073 A4                MUL     AB
0074 FF                MOV     R7,A
0075 AEF0              MOV     R6,B
0077 EF                MOV     A,R7
0078 2400              ADD     A,#00H
007A FF                MOV     R7,A
007B EE                MOV     A,R6
007C 3444              ADDC    A,#044H
007E FE                MOV     R6,A
007F AA06              MOV     R2,AR6
0081 A907              MOV     R1,AR7
0083 7B01              MOV     R3,#01H
0085 900000      R     MOV     DPTR,#address
0088 E0                MOVX    A,@DPTR
0089 FE                MOV     R6,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D AD07              MOV     R5,AR7
008F AC06              MOV     R4,AR6
0091 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 2603
0094 900000      R     MOV     DPTR,#oldIsr
0097 E0                MOVX    A,@DPTR
0098 FE                MOV     R6,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FF                MOV     R7,A
                                           ; SOURCE LINE # 2604
009C         ?C0191:
009C 22                RET     
             ; FUNCTION _CyIntSetVector (END)

             ; FUNCTION _CyIntGetVector (BEGIN)
                                           ; SOURCE LINE # 2621
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2622
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 103 

                                           ; SOURCE LINE # 2623
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0193
0010 D3                SETB    C
0011 8001              SJMP    ?C0194
0013         ?C0193:
0013 C3                CLR     C
0014         ?C0194:
0014 4020              JC      ?C0192
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0195
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0196
002B         ?C0195:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0196:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0192:
                                           ; SOURCE LINE # 2625
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 25E0              ADD     A,ACC
0044 FF                MOV     R7,A
0045 EE                MOV     A,R6
0046 33                RLC     A
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 2400              ADD     A,#00H
004B FF                MOV     R7,A
004C EE                MOV     A,R6
004D 3444              ADDC    A,#044H
004F FE                MOV     R6,A
0050 AA06              MOV     R2,AR6
0052 A907              MOV     R1,AR7
0054 7B01              MOV     R3,#01H
0056 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 2627
0059         ?C0197:
0059 22                RET     
             ; FUNCTION _CyIntGetVector (END)
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 104 


             ; FUNCTION _CyIntSetPriority (BEGIN)
                                           ; SOURCE LINE # 2645
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#priority
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2646
                                           ; SOURCE LINE # 2647
000A 900000      R     MOV     DPTR,#priority
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9407              SUBB    A,#07H
0013 5003              JNC     ?C0199
0015 D3                SETB    C
0016 8001              SJMP    ?C0200
0018         ?C0199:
0018 C3                CLR     C
0019         ?C0200:
0019 4020              JC      ?C0198
001B 900000      R     MOV     DPTR,#priority
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 D3                SETB    C
0022 9407              SUBB    A,#07H
0024 500A              JNC     ?C0201
0026 7F01              MOV     R7,#01H
0028 7E00              MOV     R6,#00H
002A 7D00              MOV     R5,#00H
002C 7C00              MOV     R4,#00H
002E 8008              SJMP    ?C0202
0030         ?C0201:
0030 7F00              MOV     R7,#00H
0032 7E00              MOV     R6,#00H
0034 7D00              MOV     R5,#00H
0036 7C00              MOV     R4,#00H
0038         ?C0202:
0038 120000      R     LCALL   _?CyHalt
003B         ?C0198:
                                           ; SOURCE LINE # 2648
003B 900000      R     MOV     DPTR,#number
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 D3                SETB    C
0042 941F              SUBB    A,#01FH
0044 5003              JNC     ?C0204
0046 D3                SETB    C
0047 8001              SJMP    ?C0205
0049         ?C0204:
0049 C3                CLR     C
004A         ?C0205:
004A 4020              JC      ?C0203
004C 900000      R     MOV     DPTR,#number
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 105 

0052 D3                SETB    C
0053 941F              SUBB    A,#01FH
0055 500A              JNC     ?C0206
0057 7F01              MOV     R7,#01H
0059 7E00              MOV     R6,#00H
005B 7D00              MOV     R5,#00H
005D 7C00              MOV     R4,#00H
005F 8008              SJMP    ?C0207
0061         ?C0206:
0061 7F00              MOV     R7,#00H
0063 7E00              MOV     R6,#00H
0065 7D00              MOV     R5,#00H
0067 7C00              MOV     R4,#00H
0069         ?C0207:
0069 120000      R     LCALL   _?CyHalt
006C         ?C0203:
                                           ; SOURCE LINE # 2649
006C 900000      R     MOV     DPTR,#priority
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 5407              ANL     A,#07H
0074 FF                MOV     R7,A
0075 7E00              MOV     R6,#00H
0077 EF                MOV     A,R7
0078 75F020            MOV     B,#020H
007B A4                MUL     AB
007C FF                MOV     R7,A
007D AEF0              MOV     R6,B
007F 900000      R     MOV     DPTR,#number
0082 E0                MOVX    A,@DPTR
0083 FE                MOV     R6,A
0084 EE                MOV     A,R6
0085 541F              ANL     A,#01FH
0087 FE                MOV     R6,A
0088 7480              MOV     A,#080H
008A 2E                ADD     A,R6
008B F582              MOV     DPL,A
008D E4                CLR     A
008E 3444              ADDC    A,#044H
0090 F583              MOV     DPH,A
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2651
0094         ?C0208:
0094 22                RET     
             ; FUNCTION _CyIntSetPriority (END)

             ; FUNCTION _CyIntGetPriority (BEGIN)
                                           ; SOURCE LINE # 2668
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2669
                                           ; SOURCE LINE # 2670
                                           ; SOURCE LINE # 2672
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 106 

000E 5003              JNC     ?C0210
0010 D3                SETB    C
0011 8001              SJMP    ?C0211
0013         ?C0210:
0013 C3                CLR     C
0014         ?C0211:
0014 4020              JC      ?C0209
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0212
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0213
002B         ?C0212:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0213:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0209:
                                           ; SOURCE LINE # 2674
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7480              MOV     A,#080H
0041 2F                ADD     A,R7
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3444              ADDC    A,#044H
0047 F583              MOV     DPH,A
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C C4                SWAP    A
004D 13                RRC     A
004E 5407              ANL     A,#07H
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#priority
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2676
0056 900000      R     MOV     DPTR,#priority
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
                                           ; SOURCE LINE # 2677
005B         ?C0214:
005B 22                RET     
             ; FUNCTION _CyIntGetPriority (END)

             ; FUNCTION _?CyIntEnable (BEGIN)
                                           ; SOURCE LINE # 2694
0000 90FFFF            MOV     DPTR,#0FFFFH
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 107 

0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 2696
                                           ; SOURCE LINE # 2698
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 941F              SUBB    A,#01FH
001C 5003              JNC     ?C0216
001E D3                SETB    C
001F 8001              SJMP    ?C0217
0021         ?C0216:
0021 C3                CLR     C
0022         ?C0217:
0022 4025              JC      ?C0215
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
002A A3                INC     DPTR
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F D3                SETB    C
0030 941F              SUBB    A,#01FH
0032 500A              JNC     ?C0218
0034 7F01              MOV     R7,#01H
0036 7E00              MOV     R6,#00H
0038 7D00              MOV     R5,#00H
003A 7C00              MOV     R4,#00H
003C 8008              SJMP    ?C0219
003E         ?C0218:
003E 7F00              MOV     R7,#00H
0040 7E00              MOV     R6,#00H
0042 7D00              MOV     R5,#00H
0044 7C00              MOV     R4,#00H
0046         ?C0219:
0046 120000      R     LCALL   _?CyHalt
0049         ?C0215:
                                           ; SOURCE LINE # 2701
0049 850083      E     MOV     DPH,?C_XBP
004C 850082      E     MOV     DPL,?C_XBP+01H
004F A3                INC     DPTR
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 541F              ANL     A,#01FH
0056 FF                MOV     R7,A
0057 7E00              MOV     R6,#00H
0059 EF                MOV     A,R7
005A 7803              MOV     R0,#03H
005C         ?C0247:
005C CE                XCH     A,R6
005D C3                CLR     C
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 108 

005E 13                RRC     A
005F CE                XCH     A,R6
0060 13                RRC     A
0061 D8F9              DJNZ    R0,?C0247
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 24C0              ADD     A,#0C0H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3444              ADDC    A,#044H
006B FE                MOV     R6,A
006C 850083      E     MOV     DPH,?C_XBP
006F 850082      E     MOV     DPL,?C_XBP+01H
0072 EE                MOV     A,R6
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2704
0077 850083      E     MOV     DPH,?C_XBP
007A 850082      E     MOV     DPL,?C_XBP+01H
007D A3                INC     DPTR
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 5407              ANL     A,#07H
0084 FF                MOV     R7,A
0085 7401              MOV     A,#01H
0087 A807              MOV     R0,AR7
0089 08                INC     R0
008A 8002              SJMP    ?C0249
008C         ?C0248:
008C C3                CLR     C
008D 33                RLC     A
008E         ?C0249:
008E D8FC              DJNZ    R0,?C0248
0090 FF                MOV     R7,A
0091 850083      E     MOV     DPH,?C_XBP
0094 850082      E     MOV     DPL,?C_XBP+01H
0097 E0                MOVX    A,@DPTR
0098 FC                MOV     R4,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FD                MOV     R5,A
009C 8D82              MOV     DPL,R5
009E 8C83              MOV     DPH,R4
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2705
00A2         ?C0220:
00A2 900003            MOV     DPTR,#03H
00A5 120000      E     LCALL   ?C?ADDXBP
00A8 22                RET     
             ; FUNCTION _?CyIntEnable (END)

             ; FUNCTION _CyIntGetState (BEGIN)
                                           ; SOURCE LINE # 2722
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2723
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 109 

                                           ; SOURCE LINE # 2724
                                           ; SOURCE LINE # 2726
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0222
0010 D3                SETB    C
0011 8001              SJMP    ?C0223
0013         ?C0222:
0013 C3                CLR     C
0014         ?C0223:
0014 4020              JC      ?C0221
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0224
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0225
002B         ?C0224:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0225:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0221:
                                           ; SOURCE LINE # 2728
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 7803              MOV     R0,#03H
0044         ?C0250:
0044 CE                XCH     A,R6
0045 C3                CLR     C
0046 13                RRC     A
0047 CE                XCH     A,R6
0048 13                RRC     A
0049 D8F9              DJNZ    R0,?C0250
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 24C0              ADD     A,#0C0H
004F FF                MOV     R7,A
0050 EE                MOV     A,R6
0051 3444              ADDC    A,#044H
0053 FE                MOV     R6,A
0054 900000      R     MOV     DPTR,#stateReg
0057 EE                MOV     A,R6
0058 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 110 

0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2731
005C 900000      R     MOV     DPTR,#stateReg
005F E0                MOVX    A,@DPTR
0060 FE                MOV     R6,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 8F82              MOV     DPL,R7
0066 8E83              MOV     DPH,R6
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B FD                MOV     R5,A
006C 7C00              MOV     R4,#00H
006E 900000      R     MOV     DPTR,#number
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 5407              ANL     A,#07H
0076 FF                MOV     R7,A
0077 7401              MOV     A,#01H
0079 7E00              MOV     R6,#00H
007B A807              MOV     R0,AR7
007D 08                INC     R0
007E 8005              SJMP    ?C0252
0080         ?C0251:
0080 C3                CLR     C
0081 33                RLC     A
0082 CE                XCH     A,R6
0083 33                RLC     A
0084 CE                XCH     A,R6
0085         ?C0252:
0085 D8F9              DJNZ    R0,?C0251
0087 FF                MOV     R7,A
0088 EE                MOV     A,R6
0089 5C                ANL     A,R4
008A FE                MOV     R6,A
008B EF                MOV     A,R7
008C 5D                ANL     A,R5
008D FF                MOV     R7,A
008E EF                MOV     A,R7
008F 4E                ORL     A,R6
0090 6004              JZ      ?C0226
0092 7F01              MOV     R7,#01H
0094 8002              SJMP    ?C0227
0096         ?C0226:
0096 7F00              MOV     R7,#00H
0098         ?C0227:
                                           ; SOURCE LINE # 2732
0098         ?C0228:
0098 22                RET     
             ; FUNCTION _CyIntGetState (END)

             ; FUNCTION _?CyIntDisable (BEGIN)
                                           ; SOURCE LINE # 2749
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 111 

0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 2751
                                           ; SOURCE LINE # 2753
000E 850083      E     MOV     DPH,?C_XBP
0011 850082      E     MOV     DPL,?C_XBP+01H
0014 A3                INC     DPTR
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 941F              SUBB    A,#01FH
001C 5003              JNC     ?C0230
001E D3                SETB    C
001F 8001              SJMP    ?C0231
0021         ?C0230:
0021 C3                CLR     C
0022         ?C0231:
0022 4025              JC      ?C0229
0024 850083      E     MOV     DPH,?C_XBP
0027 850082      E     MOV     DPL,?C_XBP+01H
002A A3                INC     DPTR
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F D3                SETB    C
0030 941F              SUBB    A,#01FH
0032 500A              JNC     ?C0232
0034 7F01              MOV     R7,#01H
0036 7E00              MOV     R6,#00H
0038 7D00              MOV     R5,#00H
003A 7C00              MOV     R4,#00H
003C 8008              SJMP    ?C0233
003E         ?C0232:
003E 7F00              MOV     R7,#00H
0040 7E00              MOV     R6,#00H
0042 7D00              MOV     R5,#00H
0044 7C00              MOV     R4,#00H
0046         ?C0233:
0046 120000      R     LCALL   _?CyHalt
0049         ?C0229:
                                           ; SOURCE LINE # 2756
0049 850083      E     MOV     DPH,?C_XBP
004C 850082      E     MOV     DPL,?C_XBP+01H
004F A3                INC     DPTR
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 541F              ANL     A,#01FH
0056 FF                MOV     R7,A
0057 7E00              MOV     R6,#00H
0059 EF                MOV     A,R7
005A 7803              MOV     R0,#03H
005C         ?C0253:
005C CE                XCH     A,R6
005D C3                CLR     C
005E 13                RRC     A
005F CE                XCH     A,R6
0060 13                RRC     A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 112 

0061 D8F9              DJNZ    R0,?C0253
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 24C8              ADD     A,#0C8H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3444              ADDC    A,#044H
006B FE                MOV     R6,A
006C 850083      E     MOV     DPH,?C_XBP
006F 850082      E     MOV     DPL,?C_XBP+01H
0072 EE                MOV     A,R6
0073 F0                MOVX    @DPTR,A
0074 A3                INC     DPTR
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2759
0077 850083      E     MOV     DPH,?C_XBP
007A 850082      E     MOV     DPL,?C_XBP+01H
007D A3                INC     DPTR
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 5407              ANL     A,#07H
0084 FF                MOV     R7,A
0085 7401              MOV     A,#01H
0087 A807              MOV     R0,AR7
0089 08                INC     R0
008A 8002              SJMP    ?C0255
008C         ?C0254:
008C C3                CLR     C
008D 33                RLC     A
008E         ?C0255:
008E D8FC              DJNZ    R0,?C0254
0090 FF                MOV     R7,A
0091 850083      E     MOV     DPH,?C_XBP
0094 850082      E     MOV     DPL,?C_XBP+01H
0097 E0                MOVX    A,@DPTR
0098 FC                MOV     R4,A
0099 A3                INC     DPTR
009A E0                MOVX    A,@DPTR
009B FD                MOV     R5,A
009C 8D82              MOV     DPL,R5
009E 8C83              MOV     DPH,R4
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2760
00A2         ?C0234:
00A2 900003            MOV     DPTR,#03H
00A5 120000      E     LCALL   ?C?ADDXBP
00A8 22                RET     
             ; FUNCTION _?CyIntDisable (END)

             ; FUNCTION _CyIntSetPending (BEGIN)
                                           ; SOURCE LINE # 2777
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2778
                                           ; SOURCE LINE # 2779
                                           ; SOURCE LINE # 2781
0005 900000      R     MOV     DPTR,#number
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 113 

0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0236
0010 D3                SETB    C
0011 8001              SJMP    ?C0237
0013         ?C0236:
0013 C3                CLR     C
0014         ?C0237:
0014 4020              JC      ?C0235
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0238
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0239
002B         ?C0238:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0239:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0235:
                                           ; SOURCE LINE # 2784
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 7803              MOV     R0,#03H
0044         ?C0256:
0044 CE                XCH     A,R6
0045 C3                CLR     C
0046 13                RRC     A
0047 CE                XCH     A,R6
0048 13                RRC     A
0049 D8F9              DJNZ    R0,?C0256
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 24D0              ADD     A,#0D0H
004F FF                MOV     R7,A
0050 EE                MOV     A,R6
0051 3444              ADDC    A,#044H
0053 FE                MOV     R6,A
0054 900000      R     MOV     DPTR,#pendReg
0057 EE                MOV     A,R6
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 114 

                                           ; SOURCE LINE # 2787
005C 900000      R     MOV     DPTR,#number
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 5407              ANL     A,#07H
0064 FF                MOV     R7,A
0065 7401              MOV     A,#01H
0067 A807              MOV     R0,AR7
0069 08                INC     R0
006A 8002              SJMP    ?C0258
006C         ?C0257:
006C C3                CLR     C
006D 33                RLC     A
006E         ?C0258:
006E D8FC              DJNZ    R0,?C0257
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#pendReg
0074 E0                MOVX    A,@DPTR
0075 FC                MOV     R4,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FD                MOV     R5,A
0079 8D82              MOV     DPL,R5
007B 8C83              MOV     DPH,R4
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2788
007F         ?C0240:
007F 22                RET     
             ; FUNCTION _CyIntSetPending (END)

             ; FUNCTION _CyIntClearPending (BEGIN)
                                           ; SOURCE LINE # 2804
0000 900000      R     MOV     DPTR,#number
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2805
                                           ; SOURCE LINE # 2806
                                           ; SOURCE LINE # 2808
0005 900000      R     MOV     DPTR,#number
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B D3                SETB    C
000C 941F              SUBB    A,#01FH
000E 5003              JNC     ?C0242
0010 D3                SETB    C
0011 8001              SJMP    ?C0243
0013         ?C0242:
0013 C3                CLR     C
0014         ?C0243:
0014 4020              JC      ?C0241
0016 900000      R     MOV     DPTR,#number
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 941F              SUBB    A,#01FH
001F 500A              JNC     ?C0244
0021 7F01              MOV     R7,#01H
0023 7E00              MOV     R6,#00H
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 115 

0025 7D00              MOV     R5,#00H
0027 7C00              MOV     R4,#00H
0029 8008              SJMP    ?C0245
002B         ?C0244:
002B 7F00              MOV     R7,#00H
002D 7E00              MOV     R6,#00H
002F 7D00              MOV     R5,#00H
0031 7C00              MOV     R4,#00H
0033         ?C0245:
0033 120000      R     LCALL   _?CyHalt
0036         ?C0241:
                                           ; SOURCE LINE # 2811
0036 900000      R     MOV     DPTR,#number
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 541F              ANL     A,#01FH
003E FF                MOV     R7,A
003F 7E00              MOV     R6,#00H
0041 EF                MOV     A,R7
0042 7803              MOV     R0,#03H
0044         ?C0259:
0044 CE                XCH     A,R6
0045 C3                CLR     C
0046 13                RRC     A
0047 CE                XCH     A,R6
0048 13                RRC     A
0049 D8F9              DJNZ    R0,?C0259
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 24D8              ADD     A,#0D8H
004F FF                MOV     R7,A
0050 EE                MOV     A,R6
0051 3444              ADDC    A,#044H
0053 FE                MOV     R6,A
0054 900000      R     MOV     DPTR,#pendReg
0057 EE                MOV     A,R6
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2814
005C 900000      R     MOV     DPTR,#number
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 5407              ANL     A,#07H
0064 FF                MOV     R7,A
0065 7401              MOV     A,#01H
0067 A807              MOV     R0,AR7
0069 08                INC     R0
006A 8002              SJMP    ?C0261
006C         ?C0260:
006C C3                CLR     C
006D 33                RLC     A
006E         ?C0261:
006E D8FC              DJNZ    R0,?C0260
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#pendReg
0074 E0                MOVX    A,@DPTR
0075 FC                MOV     R4,A
0076 A3                INC     DPTR
C51 COMPILER V9.03   CYLIB                                                                 04/04/2015 14:09:13 PAGE 116 

0077 E0                MOVX    A,@DPTR
0078 FD                MOV     R5,A
0079 8D82              MOV     DPL,R5
007B 8C83              MOV     DPH,R4
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2815
007F         ?C0246:
007F 22                RET     
             ; FUNCTION _CyIntClearPending (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5035    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    102    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
